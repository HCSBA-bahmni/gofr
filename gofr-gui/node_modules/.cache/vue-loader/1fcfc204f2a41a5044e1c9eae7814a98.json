{"remainingRequest":"/home/ally/gofr/gofr-gui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ally/gofr/gofr-gui/src/components/DataSourcesPair/FacilityReconDataSourcePair.vue?vue&type=template&id=326a76f8&","dependencies":[{"path":"/home/ally/gofr/gofr-gui/src/components/DataSourcesPair/FacilityReconDataSourcePair.vue","mtime":1619257194373},{"path":"/home/ally/gofr/gofr-gui/node_modules/cache-loader/dist/cjs.js","mtime":1619257191457},{"path":"/home/ally/gofr/gofr-gui/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1619257191305},{"path":"/home/ally/gofr/gofr-gui/node_modules/cache-loader/dist/cjs.js","mtime":1619257191457},{"path":"/home/ally/gofr/gofr-gui/node_modules/vue-loader/lib/index.js","mtime":1619257191305}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Cjx2LWNvbnRhaW5lciBmbHVpZD4KICA8Y2VudGVyPgogICAgPHYtZGlhbG9nCiAgICAgIHBlcnNpc3RlbnQKICAgICAgdi1tb2RlbD0iY29uZmlybVBhaXJEZWxldGVEaWFsb2ciCiAgICAgIG1heC13aWR0aD0iNTAwcHgiCiAgICA+CiAgICAgIDx2LWNhcmQ+CiAgICAgICAgPHYtdG9vbGJhcgogICAgICAgICAgY29sb3I9ImVycm9yIgogICAgICAgICAgZGFyawogICAgICAgID4KICAgICAgICAgIDx2LXRvb2xiYXItdGl0bGU+CiAgICAgICAgICAgIENvbmZpcm0gZGVsZXRpbmcKICAgICAgICAgIDwvdi10b29sYmFyLXRpdGxlPgogICAgICAgICAgPHYtc3BhY2VyPjwvdi1zcGFjZXI+CiAgICAgICAgICA8di1idG4KICAgICAgICAgICAgaWNvbgogICAgICAgICAgICBkYXJrCiAgICAgICAgICAgIEBjbGljay5uYXRpdmU9ImNvbmZpcm1QYWlyRGVsZXRlRGlhbG9nID0gZmFsc2UiCiAgICAgICAgICA+CiAgICAgICAgICAgIDx2LWljb24+bWRpLWNsb3NlPC92LWljb24+CiAgICAgICAgICA8L3YtYnRuPgogICAgICAgIDwvdi10b29sYmFyPgogICAgICAgIDx2LWNhcmQtdGV4dD4KICAgICAgICAgIEFyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBkZWxldGUgdGhpcyBkYXRhIHNvdXJjZSBwYWlyCiAgICAgICAgPC92LWNhcmQtdGV4dD4KICAgICAgICA8di1jYXJkLWFjdGlvbnM+CiAgICAgICAgICA8di1idG4KICAgICAgICAgICAgY29sb3I9InByaW1hcnkiCiAgICAgICAgICAgIEBjbGljay5uYXRpdmU9ImNvbmZpcm1QYWlyRGVsZXRlRGlhbG9nID0gZmFsc2UiCiAgICAgICAgICA+Q2FuY2VsPC92LWJ0bj4KICAgICAgICAgIDx2LXNwYWNlcj48L3Ytc3BhY2VyPgogICAgICAgICAgPHYtYnRuCiAgICAgICAgICAgIGNvbG9yPSJlcnJvciIKICAgICAgICAgICAgQGNsaWNrLm5hdGl2ZT0iZGVsZXRlUGFpciIKICAgICAgICAgID5Pazwvdi1idG4+CiAgICAgICAgPC92LWNhcmQtYWN0aW9ucz4KICAgICAgPC92LWNhcmQ+CiAgICA8L3YtZGlhbG9nPgogICAgPHYtYWxlcnQKICAgICAgc3R5bGU9IndpZHRoOiAxMDAwcHgiCiAgICAgIHYtbW9kZWw9ImFsZXJ0U3VjY2VzcyIKICAgICAgdHlwZT0ic3VjY2VzcyIKICAgICAgZGlzbWlzc2libGUKICAgICAgdHJhbnNpdGlvbj0ic2NhbGUtdHJhbnNpdGlvbiIKICAgID4KICAgICAge3thbGVydE1zZ319CiAgICA8L3YtYWxlcnQ+CiAgICA8di1hbGVydAogICAgICBzdHlsZT0id2lkdGg6IDEwMDBweCIKICAgICAgdi1tb2RlbD0iYWxlcnRFcnJvciIKICAgICAgdHlwZT0iZXJyb3IiCiAgICAgIGRpc21pc3NpYmxlCiAgICAgIHRyYW5zaXRpb249InNjYWxlLXRyYW5zaXRpb24iCiAgICA+CiAgICAgIHt7YWxlcnRNc2d9fQogICAgPC92LWFsZXJ0PgogICAgPHYtZGlhbG9nCiAgICAgIHYtbW9kZWw9InBhaXJMaW1pdFdhcm4iCiAgICAgIHNjcm9sbGFibGUKICAgICAgcGVyc2lzdGVudAogICAgICA6b3ZlcmxheT0iZmFsc2UiCiAgICAgIG1heC13aWR0aD0iNzcwcHgiCiAgICAgIHRyYW5zaXRpb249ImRpYWxvZy10cmFuc2l0aW9uIgogICAgPgogICAgICA8di1jYXJkPgogICAgICAgIDx2LXRvb2xiYXIKICAgICAgICAgIGNvbG9yPSJlcnJvciIKICAgICAgICAgIGRhcmsKICAgICAgICA+CiAgICAgICAgICA8di10b29sYmFyLXRpdGxlPgogICAgICAgICAgICA8di1pY29uPm1kaS1pbmZvcm1hdGlvbjwvdi1pY29uPiBQYWlyIGNyZWF0aW9uIGxpbWl0CiAgICAgICAgICA8L3YtdG9vbGJhci10aXRsZT4KICAgICAgICAgIDx2LXNwYWNlcj48L3Ytc3BhY2VyPgogICAgICAgICAgPHYtYnRuCiAgICAgICAgICAgIGljb24KICAgICAgICAgICAgZGFyawogICAgICAgICAgICBAY2xpY2submF0aXZlPSJwYWlyTGltaXRXYXJuID0gZmFsc2UiCiAgICAgICAgICA+CiAgICAgICAgICAgIDx2LWljb24+bWRpLWNsb3NlPC92LWljb24+CiAgICAgICAgICA8L3YtYnRuPgogICAgICAgIDwvdi10b29sYmFyPgogICAgICAgIDx2LWNhcmQtdGV4dD4KICAgICAgICAgIFlvdSBjYW50IGNyZWF0ZSBtb3JlIHBhaXJzIGFzIHRoaXMgYWNjb3VudCBpcyBsaW1pdGVkIHRvIG9uZSBwYWlyIG9ubHkgYXQgYSB0aW1lLgogICAgICAgIDwvdi1jYXJkLXRleHQ+CiAgICAgICAgPHYtY2FyZC1hY3Rpb25zPgogICAgICAgICAgPHYtc3BhY2VyPjwvdi1zcGFjZXI+CiAgICAgICAgICA8di1idG4KICAgICAgICAgICAgY29sb3I9InByaW1hcnkiCiAgICAgICAgICAgIEBjbGljay5uYXRpdmU9InBhaXJMaW1pdFdhcm4gPSBmYWxzZSIKICAgICAgICAgID5Pazwvdi1idG4+CiAgICAgICAgPC92LWNhcmQtYWN0aW9ucz4KICAgICAgPC92LWNhcmQ+CiAgICA8L3YtZGlhbG9nPgogICAgPHYtZGlhbG9nCiAgICAgIHYtbW9kZWw9Im1hcFNvdXJjZVBhaXJMZXZlbHMiCiAgICAgIHNjcm9sbGFibGUKICAgICAgcGVyc2lzdGVudAogICAgICA6b3ZlcmxheT0iZmFsc2UiCiAgICAgIG1heC13aWR0aD0iNzcwcHgiCiAgICAgIHRyYW5zaXRpb249ImRpYWxvZy10cmFuc2l0aW9uIgogICAgPgogICAgICA8di1jYXJkPgogICAgICAgIDx2LXRvb2xiYXIKICAgICAgICAgIGNvbG9yPSJwcmltYXJ5IgogICAgICAgICAgZGFyawogICAgICAgID4KICAgICAgICAgIDx2LXRvb2xiYXItdGl0bGU+CiAgICAgICAgICAgIDx2LWljb24+bWRpLWluZm9ybWF0aW9uPC92LWljb24+IERhdGEgc291cmNlcyBoYXMgZGlmZmVyZW50IGxldmVsIGNvdW50cywgcGxlYXNlIG1hcCBMZXZlbHMgdG8gcHJvY2VlZAogICAgICAgICAgPC92LXRvb2xiYXItdGl0bGU+CiAgICAgICAgICA8di1zcGFjZXI+PC92LXNwYWNlcj4KICAgICAgICAgIDx2LWJ0bgogICAgICAgICAgICBpY29uCiAgICAgICAgICAgIGRhcmsKICAgICAgICAgICAgQGNsaWNrLm5hdGl2ZT0iY2xvc2VMZXZlbE1hcHBpbmdEaWFsb2ciCiAgICAgICAgICA+CiAgICAgICAgICAgIDx2LWljb24+bWRpLWNsb3NlPC92LWljb24+CiAgICAgICAgICA8L3YtYnRuPgogICAgICAgIDwvdi10b29sYmFyPgogICAgICAgIDx2LWNhcmQtdGV4dD4KICAgICAgICAgIDx2LWRhdGEtdGFibGUKICAgICAgICAgICAgOmhlYWRlcnM9InBhaXJMZXZlbHNNYXBwaW5nSGVhZGVyIgogICAgICAgICAgICA6aXRlbXM9InNvdXJjZTFMZXZlbHMiCiAgICAgICAgICA+CiAgICAgICAgICAgIDx0ZW1wbGF0ZQogICAgICAgICAgICAgIHYtc2xvdDppdGVtPSJ7IGl0ZW0gfSIKICAgICAgICAgICAgPgogICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgIDx0ZD57e2l0ZW0udGV4dH19PC90ZD4KICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtaWY9J3BhaXJMZXZlbHNNYXBwaW5nW2l0ZW0udmFsdWVdJz4KICAgICAgICAgICAgICAgICAgICB7eyRzdG9yZS5zdGF0ZS5sZXZlbE1hcHBpbmcuc291cmNlMltwYWlyTGV2ZWxzTWFwcGluZ1tpdGVtLnZhbHVlXV19fQogICAgICAgICAgICAgICAgICAgIDx2LWljb24KICAgICAgICAgICAgICAgICAgICAgIHNtYWxsCiAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9ImNsZWFyTWFwcGluZ1NlbGVjdGlvbihpdGVtLnZhbHVlKSIKICAgICAgICAgICAgICAgICAgICA+bWRpLWNsb3NlPC92LWljb24+CiAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+CiAgICAgICAgICAgICAgICAgIDx2LXNlbGVjdAogICAgICAgICAgICAgICAgICAgIHYtZWxzZQogICAgICAgICAgICAgICAgICAgIDppdGVtcz0ic291cmNlMkxldmVscyIKICAgICAgICAgICAgICAgICAgICBjbGVhcmFibGUKICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJwYWlyTGV2ZWxzTWFwcGluZ1tpdGVtLnZhbHVlXSIKICAgICAgICAgICAgICAgICAgICBAY2hhbmdlPSJtYXBwaW5nU2VsZWN0ZWQoaXRlbS52YWx1ZSkiCiAgICAgICAgICAgICAgICAgID48L3Ytc2VsZWN0PgogICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgICAgPC92LWRhdGEtdGFibGU+CiAgICAgICAgPC92LWNhcmQtdGV4dD4KICAgICAgICA8di1jYXJkLWFjdGlvbnM+CiAgICAgICAgICA8di1idG4KICAgICAgICAgICAgY29sb3I9ImVycm9yIgogICAgICAgICAgICByb3VuZGVkCiAgICAgICAgICAgIEBjbGljaz0iY2xvc2VMZXZlbE1hcHBpbmdEaWFsb2ciCiAgICAgICAgICA+CiAgICAgICAgICAgIDx2LWljb24gbGVmdD5tZGktY2FuY2VsPC92LWljb24+IENhbmNlbAogICAgICAgICAgPC92LWJ0bj4KICAgICAgICAgIDx2LXNwYWNlcj48L3Ytc3BhY2VyPgogICAgICAgICAgPHYtYnRuCiAgICAgICAgICAgIGNvbG9yPSJwcmltYXJ5IgogICAgICAgICAgICByb3VuZGVkCiAgICAgICAgICA+CiAgICAgICAgICAgIDx2LWljb24gbGVmdD5tZGktY29udGVudC1zYXZlPC92LWljb24+U2F2ZSBNYXBwaW5nCiAgICAgICAgICA8L3YtYnRuPgogICAgICAgIDwvdi1jYXJkLWFjdGlvbnM+CiAgICAgIDwvdi1jYXJkPgogICAgPC92LWRpYWxvZz4KICAgIDx2LWRpYWxvZwogICAgICB2LW1vZGVsPSJoZWxwRGlhbG9nIgogICAgICBzY3JvbGxhYmxlCiAgICAgIHBlcnNpc3RlbnQKICAgICAgOm92ZXJsYXk9ImZhbHNlIgogICAgICBtYXgtd2lkdGg9IjcwMHB4IgogICAgICB0cmFuc2l0aW9uPSJkaWFsb2ctdHJhbnNpdGlvbiIKICAgID4KICAgICAgPHYtY2FyZD4KICAgICAgICA8di10b29sYmFyCiAgICAgICAgICBjb2xvcj0icHJpbWFyeSIKICAgICAgICAgIGRhcmsKICAgICAgICA+CiAgICAgICAgICA8di10b29sYmFyLXRpdGxlPgogICAgICAgICAgICA8di1pY29uPm1kaS1pbmZvcm1hdGlvbjwvdi1pY29uPiBBYm91dCB0aGlzIHBhZ2UKICAgICAgICAgIDwvdi10b29sYmFyLXRpdGxlPgogICAgICAgICAgPHYtc3BhY2VyPjwvdi1zcGFjZXI+CiAgICAgICAgICA8di1idG4KICAgICAgICAgICAgaWNvbgogICAgICAgICAgICBkYXJrCiAgICAgICAgICAgIEBjbGljay5uYXRpdmU9ImhlbHBEaWFsb2cgPSBmYWxzZSIKICAgICAgICAgID4KICAgICAgICAgICAgPHYtaWNvbj5tZGktY2xvc2U8L3YtaWNvbj4KICAgICAgICAgIDwvdi1idG4+CiAgICAgICAgPC92LXRvb2xiYXI+CiAgICAgICAgPHYtY2FyZC10ZXh0PgogICAgICAgICAgVGhpcyBwYWdlIGxldCB5b3UgY2hvb3NlIGEgcGFpciBvZiBkYXRhIHNvdXJjZXMgdG8gdXNlIGZvciByZWNvbmNpbGlhdGlvbgogICAgICAgICAgPHYtbGlzdD4xLiBTb3VyY2UgMSBpcyB0aGUgc291cmNlIHdoaWxlIHNvdXJjZSAyIGlzIHRoZSB0YXJnZXQ8L3YtbGlzdD4KICAgICAgICA8L3YtY2FyZC10ZXh0PgogICAgICA8L3YtY2FyZD4KICAgIDwvdi1kaWFsb2c+CiAgICA8di1kaWFsb2cKICAgICAgcGVyc2lzdGVudAogICAgICB2LW1vZGVsPSJzaGFyZURpYWxvZyIKICAgICAgd2lkdGg9IjUzMHB4IgogICAgPgogICAgICA8di1jYXJkIHdpZHRoPSc1MzBweCc+CiAgICAgICAgPHYtdG9vbGJhcgogICAgICAgICAgY29sb3I9InByaW1hcnkiCiAgICAgICAgICBkYXJrCiAgICAgICAgPgogICAgICAgICAgPHYtdG9vbGJhci10aXRsZT4KICAgICAgICAgICAgU2hhcmluZyA8dGVtcGxhdGUgdi1pZj0ic2hhcmVQYWlyLmhhc093blByb3BlcnR5KCdzb3VyY2UxJykiPnt7c2hhcmVQYWlyLnNvdXJjZTEubmFtZX19IC0ge3tzaGFyZVBhaXIuc291cmNlMi5uYW1lfX08L3RlbXBsYXRlPgogICAgICAgICAgPC92LXRvb2xiYXItdGl0bGU+CiAgICAgICAgICA8di1zcGFjZXI+PC92LXNwYWNlcj4KICAgICAgICAgIDx2LWJ0bgogICAgICAgICAgICBpY29uCiAgICAgICAgICAgIGRhcmsKICAgICAgICAgICAgQGNsaWNrLm5hdGl2ZT0ic2hhcmVEaWFsb2cgPSBmYWxzZSIKICAgICAgICAgID4KICAgICAgICAgICAgPHYtaWNvbj5tZGktY2xvc2U8L3YtaWNvbj4KICAgICAgICAgIDwvdi1idG4+CiAgICAgICAgPC92LXRvb2xiYXI+CiAgICAgICAgPHYtY2FyZC10ZXh0PgogICAgICAgICAgPHYtdGV4dC1maWVsZAogICAgICAgICAgICB2LW1vZGVsPSJzZWFyY2hVc2VycyIKICAgICAgICAgICAgYXBwZW5kLWljb249Im1kaS1tYWduaWZ5IgogICAgICAgICAgICBsYWJlbD0iU2VhcmNoIgogICAgICAgICAgICBzaW5nbGUtbGluZQogICAgICAgICAgICBoaWRlLWRldGFpbHMKICAgICAgICAgID48L3YtdGV4dC1maWVsZD4KICAgICAgICAgIDx2LWRhdGEtdGFibGUKICAgICAgICAgICAgOmhlYWRlcnM9InVzZXJzSGVhZGVyIgogICAgICAgICAgICA6aXRlbXM9InVzZXJzIgogICAgICAgICAgICA6c2VhcmNoPSJzZWFyY2hVc2VycyIKICAgICAgICAgICAgY2xhc3M9ImVsZXZhdGlvbi0xIgogICAgICAgICAgPgogICAgICAgICAgICA8dGVtcGxhdGUKICAgICAgICAgICAgICB2LXNsb3Q6aXRlbT0ieyBpdGVtIH0iCiAgICAgICAgICAgID4KICAgICAgICAgICAgICA8dHIgdi1pZj0iaXRlbS51c2VyTmFtZSAhPT0gJHN0b3JlLnN0YXRlLmF1dGgudXNlcm5hbWUiPgogICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICA8di1jaGVja2JveAogICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9InNoYXJlZFVzZXJzIgogICAgICAgICAgICAgICAgICAgIDp2YWx1ZT0iaXRlbS5faWQiCiAgICAgICAgICAgICAgICAgID48L3YtY2hlY2tib3g+CiAgICAgICAgICAgICAgICA8dGQ+e3tpdGVtLnVzZXJOYW1lfX08L3RkPgogICAgICAgICAgICAgICAgPHRkPnt7aXRlbS5maXJzdE5hbWV9fTwvdGQ+CiAgICAgICAgICAgICAgICA8dGQ+e3tpdGVtLnN1cm5hbWV9fTwvdGQ+CiAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICAgIDwvdi1kYXRhLXRhYmxlPgogICAgICAgIDwvdi1jYXJkLXRleHQ+CiAgICAgICAgPHYtY2FyZC1hY3Rpb25zIHN0eWxlPSdmbG9hdDogY2VudGVyJz4KICAgICAgICAgIDx2LWJ0bgogICAgICAgICAgICBjb2xvcj0iZXJyb3IiCiAgICAgICAgICAgIEBjbGljay5uYXRpdmU9InNoYXJlRGlhbG9nID0gZmFsc2UiCiAgICAgICAgICAgIHN0eWxlPSJjb2xvcjogd2hpdGUiCiAgICAgICAgICA+CiAgICAgICAgICAgIDx2LWljb24KICAgICAgICAgICAgICBkYXJrCiAgICAgICAgICAgICAgbGVmdAogICAgICAgICAgICA+bWRpLWNhbmNlbDwvdi1pY29uPkNhbmNlbAogICAgICAgICAgPC92LWJ0bj4KICAgICAgICAgIDx2LXNwYWNlcj48L3Ytc3BhY2VyPgogICAgICAgICAgPHYtYnRuCiAgICAgICAgICAgIGNvbG9yPSJwcmltYXJ5IgogICAgICAgICAgICBkYXJrCiAgICAgICAgICAgIEBjbGljay5uYXRpdmU9InNoYXJlKCcnLCAnc2F2ZVNoYXJlJykiCiAgICAgICAgICA+CiAgICAgICAgICAgIDx2LWljb24gbGVmdD5tZGktc2hhcmUtdmFyaWFudC1vdXRsaW5lPC92LWljb24+U2hhcmUKICAgICAgICAgIDwvdi1idG4+CiAgICAgICAgPC92LWNhcmQtYWN0aW9ucz4KICAgICAgPC92LWNhcmQ+CiAgICA8L3YtZGlhbG9nPgogICAgPHYtbGF5b3V0IHJvdz4KICAgICAgPHYtZmxleCB4czExPgogICAgICAgIENyZWF0ZS9DaG9vc2UgYSBwYWlyIG9mIGRhdGEgc291cmNlcyB0byB1c2UgZm9yIHJlY29uY2lsaWF0aW9uLiBTb3VyY2UgMSBpcyB0aGUgc291cmNlIHdoaWxlIHNvdXJjZSAyIGlzIHRoZSB0YXJnZXQKICAgICAgPC92LWZsZXg+CiAgICAgIDx2LWZsZXgKICAgICAgICB4czEKICAgICAgICB0ZXh0LXhzLXJpZ2h0CiAgICAgID4KICAgICAgICA8di10b29sdGlwIHRvcD4KICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6YWN0aXZhdG9yPSJ7IG9uIH0iPgogICAgICAgICAgICA8di1idG4KICAgICAgICAgICAgICBjbGFzcz0ibXgtMSIKICAgICAgICAgICAgICBmYWIKICAgICAgICAgICAgICBkYXJrCiAgICAgICAgICAgICAgeC1zbWFsbAogICAgICAgICAgICAgIGNvbG9yPSJwcmltYXJ5IgogICAgICAgICAgICAgIEBjbGljaz0iaGVscERpYWxvZyA9IHRydWUiCiAgICAgICAgICAgICAgdi1vbj0ib24iCiAgICAgICAgICAgID4KICAgICAgICAgICAgICA8di1pY29uPm1kaS1oZWxwPC92LWljb24+CiAgICAgICAgICAgIDwvdi1idG4+CiAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgICAgPHNwYW4+SGVscDwvc3Bhbj4KICAgICAgICA8L3YtdG9vbHRpcD4KICAgICAgPC92LWZsZXg+CiAgICA8L3YtbGF5b3V0PgogICAgPHYtbGF5b3V0IGNvbHVtbj4KICAgICAgPHYtZmxleD4KICAgICAgICA8di1jYXJkCiAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMDBweCIKICAgICAgICAgIGNvbG9yPSdjeWFuIGxpZ2h0ZW4tNScKICAgICAgICA+CiAgICAgICAgICA8di1jYXJkLXRpdGxlIHByaW1hcnktdGl0bGU+CiAgICAgICAgICAgIDx2LXRvb2xiYXIKICAgICAgICAgICAgICBjb2xvcj0id2hpdGUgbGlnaHRlbi0yIgogICAgICAgICAgICAgIHN0eWxlPSJmb250LXdlaWdodDogYm9sZDsgZm9udC1zaXplOiAxOHB4OyIKICAgICAgICAgICAgPgogICAgICAgICAgICAgIENob29zZSBEYXRhIFNvdXJjZSBQYWlyCiAgICAgICAgICAgIDwvdi10b29sYmFyPgogICAgICAgICAgPC92LWNhcmQtdGl0bGU+CiAgICAgICAgICA8di1jYXJkLXRleHQgc3R5bGU9ImZsb2F0OiBjZW50ZXIiPgogICAgICAgICAgICA8di1yb3c+CiAgICAgICAgICAgICAgPHYtY29sPgogICAgICAgICAgICAgICAgPHYtZGF0YS10YWJsZQogICAgICAgICAgICAgICAgICA6aGVhZGVycz0ic291cmNlMUhlYWRlcnMiCiAgICAgICAgICAgICAgICAgIDppdGVtcz0iJHN0b3JlLnN0YXRlLmRhdGFTb3VyY2VzIgogICAgICAgICAgICAgICAgICA6bG9hZGluZz0iJHN0b3JlLnN0YXRlLmxvYWRpbmdTZXJ2ZXJzIgogICAgICAgICAgICAgICAgICBkYXJrCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDx2LXByb2dyZXNzLWxpbmVhcgogICAgICAgICAgICAgICAgICAgIHNsb3Q9InByb2dyZXNzIgogICAgICAgICAgICAgICAgICAgIGNvbG9yPSJibHVlIgogICAgICAgICAgICAgICAgICAgIGluZGV0ZXJtaW5hdGUKICAgICAgICAgICAgICAgICAgPjwvdi1wcm9ncmVzcy1saW5lYXI+CiAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZQogICAgICAgICAgICAgICAgICAgIHYtc2xvdDppdGVtPSJ7IGl0ZW0gfSIKICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgIDx2LXJhZGlvLWdyb3VwCiAgICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9J3NvdXJjZTEnCiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJoZWlnaHQ6IDVweCIKICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAgIDx2LXJhZGlvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6dmFsdWU9Iml0ZW0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcj0iYmx1ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICA+PC92LXJhZGlvPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgPC92LXJhZGlvLWdyb3VwPgogICAgICAgICAgICAgICAgICAgICAgPHRkPnt7aXRlbS5uYW1lfX08L3RkPgogICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+CiAgICAgICAgICAgICAgICA8L3YtZGF0YS10YWJsZT4KICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgIDx2LWNvbD4KICAgICAgICAgICAgICAgIDx2LWRhdGEtdGFibGUKICAgICAgICAgICAgICAgICAgOmhlYWRlcnM9InNvdXJjZTJIZWFkZXJzIgogICAgICAgICAgICAgICAgICA6aXRlbXM9ImRhdGFTb3VyY2VzMiIKICAgICAgICAgICAgICAgICAgaXRlbS1rZXk9ImlkIgogICAgICAgICAgICAgICAgICA6bG9hZGluZz0iJHN0b3JlLnN0YXRlLmxvYWRpbmdTZXJ2ZXJzIgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8di1wcm9ncmVzcy1saW5lYXIKICAgICAgICAgICAgICAgICAgICBzbG90PSJwcm9ncmVzcyIKICAgICAgICAgICAgICAgICAgICBjb2xvcj0iYmx1ZSIKICAgICAgICAgICAgICAgICAgICBpbmRldGVybWluYXRlCiAgICAgICAgICAgICAgICAgID48L3YtcHJvZ3Jlc3MtbGluZWFyPgogICAgICAgICAgICAgICAgICA8dGVtcGxhdGUKICAgICAgICAgICAgICAgICAgICB2LXNsb3Q6aXRlbT0ieyBpdGVtIH0iCiAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICA8di1yYWRpby1ncm91cAogICAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSdzb3VyY2UyJwogICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0iaGVpZ2h0OiA1cHgiCiAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICA8di1yYWRpbwogICAgICAgICAgICAgICAgICAgICAgICAgICAgOnZhbHVlPSJpdGVtIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I9ImJsdWUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvdi1yYWRpbz4KICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgIDwvdi1yYWRpby1ncm91cD4KICAgICAgICAgICAgICAgICAgICAgIDx0ZD57e2l0ZW0ubmFtZX19PC90ZD4KICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgICAgICAgICAgPC92LWRhdGEtdGFibGU+CiAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgPC92LXJvdz4KICAgICAgICAgIDwvdi1jYXJkLXRleHQ+CiAgICAgICAgICA8di1jYXJkLWFjdGlvbnM+CiAgICAgICAgICAgIDx2LWJ0bgogICAgICAgICAgICAgIGNvbG9yPSJlcnJvciIKICAgICAgICAgICAgICByb3VuZGVkCiAgICAgICAgICAgICAgQGNsaWNrPSJyZXNldCIKICAgICAgICAgICAgPgogICAgICAgICAgICAgIDx2LWljb24gbGVmdD5tZGktcmVmcmVzaDwvdi1pY29uPiBSZXNldAogICAgICAgICAgICA8L3YtYnRuPgogICAgICAgICAgICA8di1zcGFjZXI+PC92LXNwYWNlcj4KICAgICAgICAgICAgPHYtYnRuCiAgICAgICAgICAgICAgOmRpc2FibGVkPSchY2FuQ3JlYXRlUGFpcicKICAgICAgICAgICAgICBjb2xvcj0icHJpbWFyeSIKICAgICAgICAgICAgICByb3VuZGVkCiAgICAgICAgICAgICAgQGNsaWNrPSJjaGVja0xldmVscyIKICAgICAgICAgICAgPgogICAgICAgICAgICAgIDx2LWljb24gbGVmdD5tZGktY29udGVudC1zYXZlPC92LWljb24+IFNhdmUKICAgICAgICAgICAgPC92LWJ0bj4KICAgICAgICAgIDwvdi1jYXJkLWFjdGlvbnM+CiAgICAgICAgPC92LWNhcmQ+CiAgICAgIDwvdi1mbGV4PgogICAgICA8di1mbGV4PgogICAgICAgIDx2LWNhcmQKICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwMHB4IgogICAgICAgICAgY29sb3I9J2N5YW4gbGlnaHRlbi00JwogICAgICAgID4KICAgICAgICAgIDx2LWNhcmQtdGl0bGUgcHJpbWFyeS10aXRsZT4KICAgICAgICAgICAgPHYtdG9vbGJhcgogICAgICAgICAgICAgIGNvbG9yPSJ3aGl0ZSBsaWdodGVuLTIiCiAgICAgICAgICAgICAgc3R5bGU9ImZvbnQtd2VpZ2h0OiBib2xkOyBmb250LXNpemU6IDE4cHg7IgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgRXhpc3RpbmcgRGF0YSBTb3VyY2UgUGFpcnMKICAgICAgICAgICAgICA8di1zcGFjZXI+PC92LXNwYWNlcj4KICAgICAgICAgICAgICA8di10ZXh0LWZpZWxkCiAgICAgICAgICAgICAgICB2LW1vZGVsPSJzZWFyY2hQYWlycyIKICAgICAgICAgICAgICAgIGFwcGVuZC1pY29uPSJtZGktbWFnbmlmeSIKICAgICAgICAgICAgICAgIGxhYmVsPSJTZWFyY2giCiAgICAgICAgICAgICAgICBzaW5nbGUtbGluZQogICAgICAgICAgICAgICAgaGlkZS1kZXRhaWxzCiAgICAgICAgICAgICAgPjwvdi10ZXh0LWZpZWxkPgogICAgICAgICAgICA8L3YtdG9vbGJhcj4KICAgICAgICAgIDwvdi1jYXJkLXRpdGxlPgogICAgICAgICAgPHYtY2FyZC10ZXh0IHN0eWxlPSJmbG9hdDogY2VudGVyIj4KICAgICAgICAgICAgPHYtZGF0YS10YWJsZQogICAgICAgICAgICAgIDpoZWFkZXJzPSJzb3VyY2VQYWlySGVhZGVycyIKICAgICAgICAgICAgICA6aXRlbXM9IiRzdG9yZS5zdGF0ZS5kYXRhU291cmNlUGFpcnMiCiAgICAgICAgICAgICAgOnNlYXJjaD0ic2VhcmNoUGFpcnMiCiAgICAgICAgICAgICAgOmxvYWRpbmc9IiRzdG9yZS5zdGF0ZS5sb2FkaW5nU2VydmVycyIKICAgICAgICAgICAgPgogICAgICAgICAgICAgIDx2LXByb2dyZXNzLWxpbmVhcgogICAgICAgICAgICAgICAgc2xvdD0icHJvZ3Jlc3MiCiAgICAgICAgICAgICAgICBjb2xvcj0iYmx1ZSIKICAgICAgICAgICAgICAgIGluZGV0ZXJtaW5hdGUKICAgICAgICAgICAgICA+PC92LXByb2dyZXNzLWxpbmVhcj4KICAgICAgICAgICAgICA8dGVtcGxhdGUKICAgICAgICAgICAgICAgIHYtc2xvdDppdGVtPSJ7IGl0ZW0gfSIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgIDx0ZD57e2l0ZW0uc291cmNlMS5uYW1lfX0gLSB7e2l0ZW0uc291cmNlMi5uYW1lfX08L3RkPgogICAgICAgICAgICAgICAgICA8dGQ+e3tpdGVtLnVzZXJJRC51c2VyTmFtZX19PC90ZD4KICAgICAgICAgICAgICAgICAgPHYtcmFkaW8tZ3JvdXAKICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSdhY3RpdmVEYXRhU291cmNlUGFpcicKICAgICAgICAgICAgICAgICAgICBzdHlsZT0iaGVpZ2h0OiA1cHgiCiAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICA8di1yYWRpbwogICAgICAgICAgICAgICAgICAgICAgICA6dmFsdWU9Iml0ZW0iCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yPSJibHVlIgogICAgICAgICAgICAgICAgICAgICAgPjwvdi1yYWRpbz4KICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICA8L3YtcmFkaW8tZ3JvdXA+CiAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICB7e2l0ZW0uc2hhcmVkLnVzZXJzIHwgbWVyZ2VVc2Vyc319CiAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgIDx0ZCB2LWlmPSdpdGVtLnVzZXJJRC5faWQgPT09ICRzdG9yZS5zdGF0ZS5hdXRoLnVzZXJJRCc+CiAgICAgICAgICAgICAgICAgICAgPHYtYnRuCiAgICAgICAgICAgICAgICAgICAgICB0ZXh0CiAgICAgICAgICAgICAgICAgICAgICBjb2xvcj0icHJpbWFyeSIKICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz0ic2hhcmUoaXRlbSwgJ3Nob3dEaWFsb2cnKSIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICA8di1pY29uPm1kaS1zaGFyZS12YXJpYW50LW91dGxpbmU8L3YtaWNvbj5TaGFyZQogICAgICAgICAgICAgICAgICAgIDwvdi1idG4+CiAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgIDwvdGVtcGxhdGU+CiAgICAgICAgICAgIDwvdi1kYXRhLXRhYmxlPgogICAgICAgICAgPC92LWNhcmQtdGV4dD4KICAgICAgICAgIDx2LWNhcmQtYWN0aW9ucz4KICAgICAgICAgICAgPHYtYnRuCiAgICAgICAgICAgICAgOmRpc2FibGVkPSIhY2FuRGVsZXRlUGFpciIKICAgICAgICAgICAgICBjb2xvcj0iZXJyb3IiCiAgICAgICAgICAgICAgcm91bmRlZAogICAgICAgICAgICAgIEBjbGljaz0iY29uZmlybURlbGV0ZVBhaXIiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICA8di1pY29uIGxlZnQ+bWRpLWRlbGV0ZTwvdi1pY29uPkRlbGV0ZSBQYWlyCiAgICAgICAgICAgIDwvdi1idG4+CiAgICAgICAgICAgIDx2LXNwYWNlcj48L3Ytc3BhY2VyPgogICAgICAgICAgICA8di1idG4KICAgICAgICAgICAgICBjb2xvcj0icHJpbWFyeSIKICAgICAgICAgICAgICByb3VuZGVkCiAgICAgICAgICAgICAgQGNsaWNrPSJhY3RpdmF0ZVBhaXIiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICA8di1pY29uIGxlZnQ+bWRpLWNvbnRlbnQtc2F2ZTwvdi1pY29uPkFjdGl2YXRlIFBhaXIKICAgICAgICAgICAgPC92LWJ0bj4KICAgICAgICAgIDwvdi1jYXJkLWFjdGlvbnM+CiAgICAgICAgPC92LWNhcmQ+CiAgICAgIDwvdi1mbGV4PgogICAgPC92LWxheW91dD4KICA8L2NlbnRlcj4KPC92LWNvbnRhaW5lcj4K"},null]}