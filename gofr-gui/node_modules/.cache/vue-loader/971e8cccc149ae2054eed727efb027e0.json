{"remainingRequest":"/home/ally/gofr/facility-recon-gui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ally/gofr/facility-recon-gui/src/components/Configure.vue?vue&type=template&id=479877e6&","dependencies":[{"path":"/home/ally/gofr/facility-recon-gui/src/components/Configure.vue","mtime":1619257194369},{"path":"/home/ally/gofr/facility-recon-gui/node_modules/cache-loader/dist/cjs.js","mtime":1619257191457},{"path":"/home/ally/gofr/facility-recon-gui/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1619257191305},{"path":"/home/ally/gofr/facility-recon-gui/node_modules/cache-loader/dist/cjs.js","mtime":1619257191457},{"path":"/home/ally/gofr/facility-recon-gui/node_modules/vue-loader/lib/index.js","mtime":1619257191305}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}