{"remainingRequest":"/home/ally/gofr/facility-recon-gui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ally/gofr/facility-recon-gui/src/components/fhir/fhir-reference.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/ally/gofr/facility-recon-gui/src/components/fhir/fhir-reference.vue","mtime":1619768856174},{"path":"/home/ally/gofr/facility-recon-gui/node_modules/cache-loader/dist/cjs.js","mtime":1619257191457},{"path":"/home/ally/gofr/facility-recon-gui/node_modules/babel-loader/lib/index.js","mtime":1619257191453},{"path":"/home/ally/gofr/facility-recon-gui/node_modules/cache-loader/dist/cjs.js","mtime":1619257191457},{"path":"/home/ally/gofr/facility-recon-gui/node_modules/vue-loader/lib/index.js","mtime":1619257191305}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["fhir-reference.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0EA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","file":"fhir-reference.vue","sourceRoot":"src/components/fhir","sourcesContent":["<template>\n  <ihris-element :edit=\"edit\" :loading=\"loading\">\n    <template #form>\n      <v-menu\n        v-if=\"displayType == 'tree'\"\n        ref=\"menu\"\n        v-model=\"menu\"\n        :close-on-content-click=\"false\"\n        transition=\"scale-transition\"\n        offset-y\n        min-width=\"290px\"\n        max-height=\"500px\"\n        >\n        <template v-slot:activator=\"{ on }\">\n          <v-text-field\n            v-model=\"displayValue\"\n            :label=\"display\"\n            readonly\n            v-on=\"on\"\n            outlined\n            hide-details=\"auto\"\n            :rules=\"rules\"\n            :error-messages=\"errors\"\n            :loading=\"loading\"\n            dense>\n            <template #label>{{display}} <span v-if=\"required\" class=\"red--text font-weight-bold\">*</span></template>\n          </v-text-field>\n        </template>\n        <v-card v-if=\"!((disabled) || (preset && $route.name === 'resource_add'))\">\n          <v-treeview\n            :active.sync=\"active\"\n            :items=\"items\"\n            :load-children=\"fetchChildren\"\n            :open.sync=\"open\"\n            item-disabled=\"locked\"\n            activatable\n            :multiple-active=\"false\"\n            selection-type=\"independent\"\n            :loading=\"loading\"\n            ></v-treeview>\n        </v-card>\n      </v-menu>\n      <v-autocomplete\n        v-else\n        v-model=\"select\"\n        :loading=\"loading\"\n        :items=\"items\"\n        :search-input.sync=\"search\"\n        cache-items\n        flat\n        hide-no-data\n        hide-details\n        :label=\"display\"\n        outlined\n        dense\n        placeholder=\"Start typing for selection\"\n        :rules=\"rules\"\n        :disabled=\"(disabled) || (preset && $route.name === 'resource_add')\"\n        :error-messages=\"errors\"\n        @change=\"errors = []\"\n      >\n        <template #label>{{display}} <span v-if=\"required\" class=\"red--text font-weight-bold\">*</span></template>\n      </v-autocomplete>\n    </template>\n    <template #header>\n      {{display}}\n    </template>\n    <template #value>\n      {{displayValue}}\n    </template>\n  </ihris-element>\n</template>\n\n<script>\nimport axios from 'axios'\nimport IhrisElement from \"../ihris/ihris-element.vue\"\n\nconst querystring = require('querystring')\nconst fhirurl = \"http://hl7.org/fhir/StructureDefinition/\"\nexport default {\n  name: \"fhir-reference\",\n  props: [\"field\",\"label\",\"sliceName\",\"targetProfile\",\"targetResource\",\"min\",\"max\",\"base-min\",\"base-max\",\n    \"slotProps\",\"path\",\"sub-fields\",\"edit\",\"readOnlyIfSet\",\"constraints\", \"displayType\", \"initialValue\", \"overrideValue\"],\n  components: {\n    IhrisElement\n  },\n  data: function() {\n    return {\n      source: { path: \"\", data: {} },\n      value: { reference: \"\" },\n      qField: \"valueReference\",\n      loading: false,\n      search: \"\",\n      menu: false,\n      items: [],\n      select: \"\",\n      resource: \"\",\n      awaitingSearch: false,\n      displayValue: \"\",\n      preset: false,\n      disabled: false,\n      errors: [],\n      lockWatch: false,\n      active: [],\n      open: [],\n      treeLookup: {},\n      allAllowed: true\n    }\n  },\n  created: function() {\n    this.setupData()\n  },\n  watch: {\n    slotProps: {\n      handler() {\n        //console.log(\"WATCH REFERENCE\",this.path,this.slotProps)\n        if ( !this.lockWatch ) {\n          this.setupData()\n        }\n      },\n      deep: true\n    },\n    search: function (val) {\n      if ( !this.awaitingSearch) {\n        setTimeout( () => {\n          val && val.length > 1 && this.querySelections( this.search )\n          this.awaitingSearch = false\n        }, 500 )\n      }\n      this.awaitingSearch = true\n    },\n    select: function(val) {\n      this.value.reference = val\n      this.getDisplay()\n    },\n    active: function() {\n      if ( this.active.length ) {\n        this.select = this.active[0]\n        this.displayValue = this.treeLookup[ this.select ]\n      } else {\n        this.select = undefined\n        this.displayValue = \"\"\n      }\n      this.menu = false\n    }\n  },\n  methods: {\n    setupData: function() {\n      if ( this.targetProfile && this.targetResource ) {\n        if ( this.targetProfile.replace( fhirurl, \"\" ) === this.targetResource ) {\n          this.allAllowed = true\n        } else {\n          this.allAllowed = false\n        }\n        this.resource = this.targetResource\n      }\n      if ( this.displayType === \"tree\" ) {\n        this.setupTreeItems()\n      }\n      if ( this.slotProps && this.slotProps.source ) {\n        this.source = { path: this.slotProps.source.path+\".\"+this.field, data: {} }\n        if ( this.slotProps.source.fromArray ) {\n          this.source.data = this.slotProps.source.data\n        } else {\n          let expression = this.$fhirutils.pathFieldExpression( this.field )\n          let results = this.$fhirpath.evaluate( this.slotProps.source.data, expression )\n          this.source.data = results[0]\n        }\n        if( this.source.data ) {\n          this.preset = true\n          this.select = this.source.data.reference\n          this.lockWatch = true\n        }\n      }\n      this.disabled = this.readOnlyIfSet && this.preset\n    },\n    setupTreeItems: function() {\n      let treetop = this.initialValue\n      if ( this.overrideValue ) {\n        treetop = this.overrideValue\n      }\n      this.loading = true\n      let params = {}\n      if ( treetop ) {\n        params = { \"partof\": treetop }\n      } else {\n        params = { \"partof:missing\": true }\n      }\n      params._count = 500\n      let url = \"/fhir/\"+this.resource+\"?\"+querystring.stringify( params )\n      this.items = []\n      this.addItems( url, this.items )\n\n    },\n    checkChildren: function(item) {\n      let params = { \"partof\": item.id, \"_summary\": \"count\" }\n      let url = \"/fhir/\"+this.resource+\"?\"+querystring.stringify( params )\n      return new Promise( resolve => {\n        axios.get( url ).then( response => {\n          let data = response.data\n          if ( data.total && data.total > 0 ) {\n            item.children = []\n          }\n          resolve()\n        } ).catch( err => {\n          console.log(\"failed to check children for\",url,err)\n          resolve()\n        } )\n      } )\n    },\n    addItems: function(url, items) {\n      axios.get( url ).then( async(response) => {\n        let data = response.data\n        if ( data.entry && data.entry.length > 0 ) {\n          for( let entry of data.entry ) {\n            let locked = this.allAllowed ? false : !entry.resource.meta.profile.includes( this.targetProfile )\n            let item = {\n              id: entry.resource.resourceType+\"/\"+entry.resource.id,\n              name: entry.resource.name,\n              locked: locked\n            }\n            await this.checkChildren( item )\n            this.treeLookup[ item.id ] = item.name\n            items.push( item )\n          }\n        }\n        if ( data.link ) {\n          let next = data.link.find( link => link.relation === \"next\" )\n          if ( next ) {\n            this.addItems( next.url, items )\n          } else {\n            this.loading = false\n          }\n        } else {\n          this.loading = false\n        }\n      } ).catch( err => {\n        console.log(\"Failed to add items for\",url,err)\n        this.loading = false\n      } )\n    },\n    fetchChildren: function(item) {\n      let params = {}\n      params = { \"partof\": item.id, _count: 500 }\n      let url = \"/fhir/\"+this.resource+\"?\"+querystring.stringify( params )\n      this.loading = true\n      this.addItems( url, item.children )\n      return new Promise( resolve => {\n        let count = 0\n        const checkLoading = () => {\n          if ( !this.loading || count++ > 100) {\n            resolve()\n          } else {\n            setTimeout( checkLoading, 200 )\n          }\n        }\n        checkLoading()\n      } )\n    },\n    querySelections: function( val ) {\n      this.loading = true\n      let params = { \"name:contains\": val }\n      if ( !this.targetProfile.endsWith( this.resource ) ) {\n        params._profile = this.targetProfile\n      }\n      let url = \"/fhir/\"+this.resource+\"?\"+querystring.stringify( params )\n      axios.get( url ).then( async(response) => {\n        let data = response.data\n        this.items = []\n        if ( data.entry && data.entry.length ) {\n          for( let entry of data.entry ) {\n            let ref = entry.resource.resourceType+\"/\"+entry.resource.id\n            let item = { value: ref }\n            item.text = await this.$fhirutils.resourceLookup( ref )\n            this.items.push( item )\n          }\n        }\n      } )\n    },\n    getDisplay: function() {\n      if ( (!this.edit || this.preset) && this.value && this.value.reference ) {\n        this.loading = true\n        this.$fhirutils.resourceLookup( this.value.reference ).then( display => {\n          this.displayValue = display\n          if ( this.displayType !== \"tree\" ) {\n            this.items.push( {text: display, value: this.value.reference} )\n          }\n          this.loading = false\n        } )\n      }\n    }\n  },\n  computed: {\n    index: function() {\n      if ( this.slotProps ) return this.slotProps.input\n      else return undefined\n    },\n    display: function() {\n      if ( this.slotProps && this.slotProps.input) return this.slotProps.input.label\n      else return this.label\n    },\n    required: function() {\n      return (this.index || 0) < this.min\n    },\n    rules: function() {\n      if ( this.required ) {\n        return [ v => !!v || this.display+\" is required\" ]\n      } else {\n        return []\n      }\n    }\n  }\n\n}\n</script>\n"]}]}