{"remainingRequest":"/home/ally/gofr/gofr-gui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ally/gofr/gofr-gui/src/components/DataSources/RemoteSync.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/ally/gofr/gofr-gui/src/components/DataSources/RemoteSync.vue","mtime":1619257194373},{"path":"/home/ally/gofr/gofr-gui/node_modules/cache-loader/dist/cjs.js","mtime":1619257191457},{"path":"/home/ally/gofr/gofr-gui/node_modules/babel-loader/lib/index.js","mtime":1619257191453},{"path":"/home/ally/gofr/gofr-gui/node_modules/cache-loader/dist/cjs.js","mtime":1619257191457},{"path":"/home/ally/gofr/gofr-gui/node_modules/vue-loader/lib/index.js","mtime":1619257191305}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBheGlvcyBmcm9tICdheGlvcycKaW1wb3J0IHsgZXZlbnRCdXMgfSBmcm9tICcuLi8uLi9tYWluJwppbXBvcnQgU3luY1Byb2dyZXNzIGZyb20gJy4vU3luY1Byb2dyZXNzJwpjb25zdCBiYWNrZW5kU2VydmVyID0gcHJvY2Vzcy5lbnYuQkFDS0VORF9TRVJWRVIKZXhwb3J0IGRlZmF1bHQgewogIHByb3BzOiBbJ3N5bmNUeXBlJywgJ3NlcnZlck5hbWUnLCAndXNlcklEJywgJ3NvdXJjZU93bmVyJywgJ21vZGUnXSwKICBkYXRhICgpIHsKICAgIHJldHVybiB7CiAgICAgIHN5bmNQcm9nckluZGV0ZXI6IGZhbHNlLAogICAgICBzeW5jU3RhdHVzOiAnV2FpdGluZyBmb3Igc3luYyBzdGF0dXMnLAogICAgICBzeW5jUGVyY2VudDogbnVsbCwKICAgICAgc3luY1Byb2dyUGVyY2VudDogZmFsc2UsCiAgICAgIHN5bmNQcm9ncmVzc1RpbWVyOiAnJywKICAgICAgc3luY1J1bm5pbmc6IGZhbHNlCiAgICB9CiAgfSwKICBtZXRob2RzOiB7CiAgICBzeW5jICgpIHsKICAgICAgbGV0IG1vZGUgPSB0aGlzLm1vZGUKICAgICAgaWYgKCFtb2RlKSB7CiAgICAgICAgbW9kZSA9ICdmdWxsJwogICAgICB9CiAgICAgIGxldCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpCiAgICAgIGNvbnN0IGNsaWVudElkID0gdGhpcy4kc3RvcmUuc3RhdGUuY2xpZW50SWQKICAgICAgZm9ybURhdGEuYXBwZW5kKCduYW1lJywgdGhpcy5zZXJ2ZXJOYW1lKQogICAgICBmb3JtRGF0YS5hcHBlbmQoJ3VzZXJJRCcsIHRoaXMudXNlcklEKQogICAgICBmb3JtRGF0YS5hcHBlbmQoJ3NvdXJjZU93bmVyJywgdGhpcy5zb3VyY2VPd25lcikKICAgICAgZm9ybURhdGEuYXBwZW5kKCdjbGllbnRJZCcsIGNsaWVudElkKQogICAgICBmb3JtRGF0YS5hcHBlbmQoJ21vZGUnLCBtb2RlKQogICAgICB0aGlzLnN5bmNSdW5uaW5nID0gdHJ1ZQogICAgICB0aGlzLnN5bmNQcm9nckluZGV0ZXIgPSB0cnVlCiAgICAgIGF4aW9zLnBvc3QoYmFja2VuZFNlcnZlciArICcvJyArIHRoaXMuc3luY1R5cGUgKyAnLycsIGZvcm1EYXRhLCB7CiAgICAgICAgaGVhZGVyczogewogICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdtdWx0aXBhcnQvZm9ybS1kYXRhJwogICAgICAgIH0KICAgICAgfSkudGhlbigoKSA9PiB7CiAgICAgICAgdGhpcy5zeW5jUHJvZ3Jlc3NUaW1lciA9IHNldEludGVydmFsKHRoaXMuY2hlY2tTeW5jUHJvZ3Jlc3MsIDEwMDApCiAgICAgIH0pLmNhdGNoKChlcnIpID0+IHsKICAgICAgICB0aGlzLiRzdG9yZS5zdGF0ZS5kaWFsb2dFcnJvciA9IHRydWUKICAgICAgICB0aGlzLiRzdG9yZS5zdGF0ZS5lcnJvclRpdGxlID0gJ0Vycm9yJwogICAgICAgIHRoaXMuJHN0b3JlLnN0YXRlLmVycm9yRGVzY3JpcHRpb24gPSBlcnIucmVzcG9uc2UuZGF0YS5lcnJvciArICcuIGNyb3NzIGNoZWNrIGhvc3QsdXNlciBhbmQgcGFzc3dvcmQnCiAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLnN5bmNQcm9ncmVzc1RpbWVyKQogICAgICAgIGNvbnNvbGUubG9nKGVyci5yZXNwb25zZS5kYXRhLmVycm9yKQogICAgICB9KQogICAgfSwKICAgIGNoZWNrU3luY1Byb2dyZXNzICgpIHsKICAgICAgY29uc3QgY2xpZW50SWQgPSB0aGlzLiRzdG9yZS5zdGF0ZS5jbGllbnRJZAogICAgICBsZXQgc3luY1Byb2dyZXNzVHlwZQogICAgICBpZiAodGhpcy5zeW5jVHlwZSA9PT0gJ2RoaXNTeW5jJykgewogICAgICAgIHN5bmNQcm9ncmVzc1R5cGUgPSAnZGhpc1N5bmNSZXF1ZXN0JwogICAgICB9IGVsc2UgaWYgKHRoaXMuc3luY1R5cGUgPT09ICdmaGlyU3luYycpIHsKICAgICAgICBzeW5jUHJvZ3Jlc3NUeXBlID0gJ2ZoaXJTeW5jUmVxdWVzdCcKICAgICAgfQogICAgICBheGlvcy5nZXQoYmFja2VuZFNlcnZlciArICcvcHJvZ3Jlc3MvJyArIHN5bmNQcm9ncmVzc1R5cGUgKyAnLycgKyBjbGllbnRJZCkudGhlbigoc3luY1Byb2dyZXNzKSA9PiB7CiAgICAgICAgaWYgKHN5bmNQcm9ncmVzcy5kYXRhID09PSBudWxsIHx8IHN5bmNQcm9ncmVzcy5kYXRhID09PSB1bmRlZmluZWQgfHwgc3luY1Byb2dyZXNzLmRhdGEgPT09IGZhbHNlKSB7CiAgICAgICAgICB0aGlzLiRzdG9yZS5zdGF0ZS51cGxvYWRSdW5uaW5nID0gZmFsc2UKICAgICAgICAgIHRoaXMuc3luY1Byb2dySW5kZXRlciA9IGZhbHNlCiAgICAgICAgICB0aGlzLnN5bmNQcm9nclBlcmNlbnQgPSBmYWxzZQogICAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLnN5bmNQcm9ncmVzc1RpbWVyKQogICAgICAgICAgcmV0dXJuCiAgICAgICAgfSBlbHNlIGlmIChzeW5jUHJvZ3Jlc3MuZGF0YS5lcnJvciAhPT0gbnVsbCkgewogICAgICAgICAgdGhpcy4kc3RvcmUuc3RhdGUudXBsb2FkUnVubmluZyA9IGZhbHNlCiAgICAgICAgICB0aGlzLnN5bmNQcm9nckluZGV0ZXIgPSBmYWxzZQogICAgICAgICAgdGhpcy5zeW5jUHJvZ3JQZXJjZW50ID0gZmFsc2UKICAgICAgICAgIHRoaXMuJHN0b3JlLnN0YXRlLmRpYWxvZ0Vycm9yID0gdHJ1ZQogICAgICAgICAgdGhpcy4kc3RvcmUuc3RhdGUuZXJyb3JUaXRsZSA9ICdFcnJvcicKICAgICAgICAgIHRoaXMuJHN0b3JlLnN0YXRlLmVycm9yRGVzY3JpcHRpb24gPSBzeW5jUHJvZ3Jlc3MuZGF0YS5lcnJvcgogICAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLnN5bmNQcm9ncmVzc1RpbWVyKQogICAgICAgICAgY29uc29sZS5sb2coc3luY1Byb2dyZXNzLmRhdGEuZXJyb3IpCiAgICAgICAgICByZXR1cm4KICAgICAgICB9IGVsc2UgaWYgKHN5bmNQcm9ncmVzcy5kYXRhLnN0YXR1cyA9PT0gbnVsbCkgewogICAgICAgICAgdGhpcy4kc3RvcmUuc3RhdGUudXBsb2FkUnVubmluZyA9IGZhbHNlCiAgICAgICAgICB0aGlzLnN5bmNQcm9nckluZGV0ZXIgPSBmYWxzZQogICAgICAgICAgdGhpcy5zeW5jUHJvZ3JQZXJjZW50ID0gZmFsc2UKICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5zeW5jUHJvZ3Jlc3NUaW1lcikKICAgICAgICAgIHJldHVybgogICAgICAgIH0KICAgICAgICB0aGlzLnN5bmNTdGF0dXMgPSBzeW5jUHJvZ3Jlc3MuZGF0YS5zdGF0dXMKICAgICAgICBpZiAoc3luY1Byb2dyZXNzLmRhdGEucGVyY2VudCkgewogICAgICAgICAgaWYgKCF0aGlzLnN5bmNQcm9nclBlcmNlbnQpIHsKICAgICAgICAgICAgdGhpcy5zeW5jUHJvZ3JJbmRldGVyID0gZmFsc2UKICAgICAgICAgICAgdGhpcy5zeW5jUHJvZ3JQZXJjZW50ID0gdHJ1ZQogICAgICAgICAgfQogICAgICAgICAgdGhpcy5zeW5jUGVyY2VudCA9IHN5bmNQcm9ncmVzcy5kYXRhLnBlcmNlbnQKICAgICAgICB9CiAgICAgICAgaWYgKHN5bmNQcm9ncmVzcy5kYXRhLnN0YXR1cyA9PT0gJ0RvbmUnKSB7CiAgICAgICAgICB0aGlzLnN5bmNTdGF0dXMgPSAnV2FpdGluZyBmb3Igc3luYyBzdGF0dXMnCiAgICAgICAgICBjbGVhckludGVydmFsKHRoaXMuc3luY1Byb2dyZXNzVGltZXIpCiAgICAgICAgICB0aGlzLnN5bmNQcm9nclBlcmNlbnQgPSBmYWxzZQogICAgICAgICAgdGhpcy4kc3RvcmUuc3RhdGUudXBsb2FkUnVubmluZyA9IGZhbHNlCiAgICAgICAgICBldmVudEJ1cy4kZW1pdCgnZ2V0RGF0YVNvdXJjZXMnKQogICAgICAgIH0KICAgICAgfSkuY2F0Y2goKGVycikgPT4gewogICAgICAgIHRoaXMuJHN0b3JlLnN0YXRlLmRpYWxvZ0Vycm9yID0gdHJ1ZQogICAgICAgIHRoaXMuJHN0b3JlLnN0YXRlLmVycm9yVGl0bGUgPSAnRXJyb3InCiAgICAgICAgY29uc29sZS5sb2coZXJyLnJlc3BvbnNlLmRhdGEuZXJyb3IgKyAnLiBjcm9zcyBjaGVjayBob3N0LHVzZXIgYW5kIHBhc3N3b3JkJykKICAgICAgICB0aGlzLiRzdG9yZS5zdGF0ZS5lcnJvckRlc2NyaXB0aW9uID0gZXJyLnJlc3BvbnNlLmRhdGEuZXJyb3IgKyAnLiBjcm9zcyBjaGVjayBob3N0LHVzZXIgYW5kIHBhc3N3b3JkJwogICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5zeW5jUHJvZ3Jlc3NUaW1lcikKICAgICAgfSkKICAgIH0KICB9LAogIGNyZWF0ZWQgKCkgewogICAgZXZlbnRCdXMuJG9uKCdydW5SZW1vdGVTeW5jJywgdGhpcy5zeW5jKQogIH0sCiAgYmVmb3JlRGVzdHJveSAoKSB7CiAgICBldmVudEJ1cy4kb2ZmKCdydW5SZW1vdGVTeW5jJywgdGhpcy5zeW5jKQogIH0sCiAgY29tcG9uZW50czogewogICAgJ2FwcFN5bmNQcm9ncmVzcyc6IFN5bmNQcm9ncmVzcwogIH0KfQo="},{"version":3,"sources":["RemoteSync.vue"],"names":[],"mappingsfile":"RemoteSync.vue","sourceRoot":"src/components/DataSources","sourcesContent":["<template>\n  <v-container>\n    <app-syncProgress\n      :syncProgrIndeter='syncProgrIndeter'\n      :syncStatus='syncStatus'\n      :syncProgrPercent='syncProgrPercent'\n      :syncPercent='syncPercent'\n    >\n    </app-syncProgress>\n  </v-container>\n</template>\n<script>\nimport axios from 'axios'\nimport { eventBus } from '../../main'\nimport SyncProgress from './SyncProgress'\nconst backendServer = process.env.BACKEND_SERVER\nexport default {\n  props: ['syncType', 'serverName', 'userID', 'sourceOwner', 'mode'],\n  data () {\n    return {\n      syncProgrIndeter: false,\n      syncStatus: 'Waiting for sync status',\n      syncPercent: null,\n      syncProgrPercent: false,\n      syncProgressTimer: '',\n      syncRunning: false\n    }\n  },\n  methods: {\n    sync () {\n      let mode = this.mode\n      if (!mode) {\n        mode = 'full'\n      }\n      let formData = new FormData()\n      const clientId = this.$store.state.clientId\n      formData.append('name', this.serverName)\n      formData.append('userID', this.userID)\n      formData.append('sourceOwner', this.sourceOwner)\n      formData.append('clientId', clientId)\n      formData.append('mode', mode)\n      this.syncRunning = true\n      this.syncProgrIndeter = true\n      axios.post(backendServer + '/' + this.syncType + '/', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      }).then(() => {\n        this.syncProgressTimer = setInterval(this.checkSyncProgress, 1000)\n      }).catch((err) => {\n        this.$store.state.dialogError = true\n        this.$store.state.errorTitle = 'Error'\n        this.$store.state.errorDescription = err.response.data.error + '. cross check host,user and password'\n        clearInterval(this.syncProgressTimer)\n        console.log(err.response.data.error)\n      })\n    },\n    checkSyncProgress () {\n      const clientId = this.$store.state.clientId\n      let syncProgressType\n      if (this.syncType === 'dhisSync') {\n        syncProgressType = 'dhisSyncRequest'\n      } else if (this.syncType === 'fhirSync') {\n        syncProgressType = 'fhirSyncRequest'\n      }\n      axios.get(backendServer + '/progress/' + syncProgressType + '/' + clientId).then((syncProgress) => {\n        if (syncProgress.data === null || syncProgress.data === undefined || syncProgress.data === false) {\n          this.$store.state.uploadRunning = false\n          this.syncProgrIndeter = false\n          this.syncProgrPercent = false\n          clearInterval(this.syncProgressTimer)\n          return\n        } else if (syncProgress.data.error !== null) {\n          this.$store.state.uploadRunning = false\n          this.syncProgrIndeter = false\n          this.syncProgrPercent = false\n          this.$store.state.dialogError = true\n          this.$store.state.errorTitle = 'Error'\n          this.$store.state.errorDescription = syncProgress.data.error\n          clearInterval(this.syncProgressTimer)\n          console.log(syncProgress.data.error)\n          return\n        } else if (syncProgress.data.status === null) {\n          this.$store.state.uploadRunning = false\n          this.syncProgrIndeter = false\n          this.syncProgrPercent = false\n          clearInterval(this.syncProgressTimer)\n          return\n        }\n        this.syncStatus = syncProgress.data.status\n        if (syncProgress.data.percent) {\n          if (!this.syncProgrPercent) {\n            this.syncProgrIndeter = false\n            this.syncProgrPercent = true\n          }\n          this.syncPercent = syncProgress.data.percent\n        }\n        if (syncProgress.data.status === 'Done') {\n          this.syncStatus = 'Waiting for sync status'\n          clearInterval(this.syncProgressTimer)\n          this.syncProgrPercent = false\n          this.$store.state.uploadRunning = false\n          eventBus.$emit('getDataSources')\n        }\n      }).catch((err) => {\n        this.$store.state.dialogError = true\n        this.$store.state.errorTitle = 'Error'\n        console.log(err.response.data.error + '. cross check host,user and password')\n        this.$store.state.errorDescription = err.response.data.error + '. cross check host,user and password'\n        clearInterval(this.syncProgressTimer)\n      })\n    }\n  },\n  created () {\n    eventBus.$on('runRemoteSync', this.sync)\n  },\n  beforeDestroy () {\n    eventBus.$off('runRemoteSync', this.sync)\n  },\n  components: {\n    'appSyncProgress': SyncProgress\n  }\n}\n</script>\n"]}]}