{"remainingRequest":"/home/ally/gofr2/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ally/gofr2/src/components/menu.vue?vue&type=template&id=a380d422&scoped=true&","dependencies":[{"path":"/home/ally/gofr2/src/components/menu.vue","mtime":1619017787885},{"path":"/home/ally/gofr2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ally/gofr2/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/ally/gofr2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ally/gofr2/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Cjx1bCBpZD0ibWVudSI+CiAgPGxpIGNsYXNzPSJwYXJlbnQiPjxhIGhyZWY9IiMiPgogICAgICA8di1pY29uPm1kaS1zcGVsbGNoZWNrPC92LWljb24+IHt7JHQoJ0FwcC5tZW51LmZhY2lsaXR5UmVjb24ubXNnJyl9fQogICAgPC9hPgogICAgPHVsIGNsYXNzPSJjaGlsZCI+CiAgICAgIDxsaSBjbGFzcz0icGFyZW50Ij4KICAgICAgICA8YQogICAgICAgICAgaHJlZj0iIyIKICAgICAgICAgIHN0eWxlPSJtYXJnaW4tbGVmdDogMTVweCIKICAgICAgICA+CiAgICAgICAgICA8di1pY29uCiAgICAgICAgICAgIGNvbG9yPSJibGFjayIKICAgICAgICAgICAgbGVmdAogICAgICAgICAgPm1kaS1zeW5jPC92LWljb24+e3sgJHQoJ0FwcC5tZW51LmRhdGFTb3VyY2VzUGFyZW50Lm1zZycpfX0gPHYtaWNvbgogICAgICAgICAgICBjb2xvcj0iYmxhY2siCiAgICAgICAgICAgIHNtYWxsCiAgICAgICAgICAgIGNsYXNzPSJtZW51QXJyb3ciCiAgICAgICAgICA+bWRpLXBsYXk8L3YtaWNvbj4KICAgICAgICA8L2E+CiAgICAgICAgPHVsIGNsYXNzPSJjaGlsZCI+CiAgICAgICAgICA8di1saXN0IGNsYXNzPSJsYXN0TWVudSI+CiAgICAgICAgICAgIDx2LXRvb2x0aXAgcmlnaHQ+CiAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDphY3RpdmF0b3I9Insgb24gfSI+CiAgICAgICAgICAgICAgICA8di1saXN0LWl0ZW0KICAgICAgICAgICAgICAgICAgdG89IkFkZERhdGFTb3VyY2VzIgogICAgICAgICAgICAgICAgICB2LW9uPSJvbiIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPHYtbGlzdC1pdGVtLXRpdGxlIGNsYXNzPSJtZW51VGV4dCI+CiAgICAgICAgICAgICAgICAgICAgPHYtaWNvbgogICAgICAgICAgICAgICAgICAgICAgbGVmdAogICAgICAgICAgICAgICAgICAgICAgY29sb3I9ImJsYWNrIgogICAgICAgICAgICAgICAgICAgID5tZGktY2xvdWQtdXBsb2FkPC92LWljb24+CiAgICAgICAgICAgICAgICAgICAge3sgJHQoJ0FwcC5tZW51LmFkZERhdGFTb3VyY2VzLm1zZycpfX0KICAgICAgICAgICAgICAgICAgPC92LWxpc3QtaXRlbS10aXRsZT4KICAgICAgICAgICAgICAgIDwvdi1saXN0LWl0ZW0+CiAgICAgICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICAgICAgICA8c3Bhbj57eyAkdCgnQXBwLm1lbnUuYWRkRGF0YVNvdXJjZXMudG9vbHRpcCcpfX08L3NwYW4+CiAgICAgICAgICAgIDwvdi10b29sdGlwPgogICAgICAgICAgPC92LWxpc3Q+CiAgICAgICAgICA8di1saXN0IGNsYXNzPSJsYXN0TWVudSI+CiAgICAgICAgICAgIDx2LXRvb2x0aXAgcmlnaHQ+CiAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDphY3RpdmF0b3I9Insgb24gfSI+CiAgICAgICAgICAgICAgICA8di1saXN0LWl0ZW0KICAgICAgICAgICAgICAgICAgdG89IlZpZXdEYXRhU291cmNlcyIKICAgICAgICAgICAgICAgICAgdi1vbj0ib24iCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDx2LWxpc3QtaXRlbS10aXRsZSBjbGFzcz0ibWVudVRleHQiPgogICAgICAgICAgICAgICAgICAgIDx2LWljb24KICAgICAgICAgICAgICAgICAgICAgIGxlZnQKICAgICAgICAgICAgICAgICAgICAgIGNvbG9yPSJibGFjayIKICAgICAgICAgICAgICAgICAgICA+bWRpLWZvcm1hdC1saXN0LWJ1bGxldGVkLXNxdWFyZTwvdi1pY29uPnt7ICR0KCdBcHAubWVudS52aWV3RGF0YVNvdXJjZXMubXNnJyl9fQogICAgICAgICAgICAgICAgICA8L3YtbGlzdC1pdGVtLXRpdGxlPgogICAgICAgICAgICAgICAgPC92LWxpc3QtaXRlbT4KICAgICAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgICAgICAgIDxzcGFuPnt7ICR0KCdBcHAubWVudS52aWV3RGF0YVNvdXJjZXMudG9vbHRpcCcpfX08L3NwYW4+CiAgICAgICAgICAgIDwvdi10b29sdGlwPgogICAgICAgICAgPC92LWxpc3Q+CiAgICAgICAgPC91bD4KICAgICAgPC9saT4KICAgICAgPHYtbGlzdCA6Y2xhc3M9InsgZGlzYWJsZWRNZW51OiBPYmplY3Qua2V5cygkc3RvcmUuc3RhdGUuYWN0aXZlUGFpci5zb3VyY2UxKS5sZW5ndGg9PT0wLGxhc3RNZW51OiB0cnVlIH0iPgogICAgICAgIDx2LXRvb2x0aXAgcmlnaHQ+CiAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90OmFjdGl2YXRvcj0ieyBvbiB9Ij4KICAgICAgICAgICAgPHYtbGlzdC1pdGVtCiAgICAgICAgICAgICAgdi1vbj0ib24iCiAgICAgICAgICAgICAgdG89InZpZXciCiAgICAgICAgICAgICAgY29sb3I9IndoaXRlIgogICAgICAgICAgICAgIDpkaXNhYmxlZD0iT2JqZWN0LmtleXMoJHN0b3JlLnN0YXRlLmFjdGl2ZVBhaXIuc291cmNlMSkubGVuZ3RoPT09MCIKICAgICAgICAgICAgPgogICAgICAgICAgICAgIDx2LWxpc3QtaXRlbS10aXRsZSBjbGFzcz0ibWVudVRleHQiPgogICAgICAgICAgICAgICAgPHYtaWNvbgogICAgICAgICAgICAgICAgICBsZWZ0CiAgICAgICAgICAgICAgICAgIGNvbG9yPSJibGFjayIKICAgICAgICAgICAgICAgID5tZGktZm9ybWF0LWxpc3QtYnVsbGV0ZWQtc3F1YXJlPC92LWljb24+e3sgJHQoJ0FwcC5tZW51LnZpZXcubXNnJyl9fQogICAgICAgICAgICAgIDwvdi1saXN0LWl0ZW0tdGl0bGU+CiAgICAgICAgICAgIDwvdi1saXN0LWl0ZW0+CiAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgICAgPHNwYW4+e3sgJHQoJ0FwcC5tZW51LnZpZXcudG9vbHRpcCcpIH19PC9zcGFuPgogICAgICAgIDwvdi10b29sdGlwPgogICAgICA8L3YtbGlzdD4KICAgICAgPGxpIGNsYXNzPSJwYXJlbnQiPgogICAgICAgIDxhCiAgICAgICAgICBocmVmPSIjIgogICAgICAgICAgc3R5bGU9Im1hcmdpbi1sZWZ0OiAxNXB4IgogICAgICAgID4KICAgICAgICAgIDx2LWljb24KICAgICAgICAgICAgbGVmdAogICAgICAgICAgICBjb2xvcj0iYmxhY2siCiAgICAgICAgICA+bWRpLWNvbXBhcmUtaG9yaXpvbnRhbDwvdi1pY29uPnt7ICR0KCdBcHAubWVudS5yZWNvbmNpbGUubXNnJyl9fSA8di1pY29uCiAgICAgICAgICAgIGNvbG9yPSJibGFjayIKICAgICAgICAgICAgc21hbGwKICAgICAgICAgICAgY2xhc3M9Im1lbnVBcnJvdyIKICAgICAgICAgID5tZGktcGxheTwvdi1pY29uPgogICAgICAgIDwvYT4KICAgICAgICA8dWwgY2xhc3M9ImNoaWxkIj4KICAgICAgICAgIDx2LWxpc3QgOmNsYXNzPSJ7IGRpc2FibGVkTWVudTogJHN0b3JlLnN0YXRlLmRhdGFTb3VyY2VzLmxlbmd0aCA8PSAxIHx8ICRzdG9yZS5zdGF0ZS5kYXRhU291cmNlUGFpcnMubGVuZ3RoIDw9IDAsbGFzdE1lbnU6IHRydWUgfSI+CiAgICAgICAgICAgIDx2LXRvb2x0aXAgcmlnaHQ+CiAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDphY3RpdmF0b3I9Insgb24gfSI+CiAgICAgICAgICAgICAgICA8di1saXN0LWl0ZW0KICAgICAgICAgICAgICAgICAgdG89ImRhdGFTb3VyY2VzUGFpciIKICAgICAgICAgICAgICAgICAgdi1vbj0ib24iCiAgICAgICAgICAgICAgICAgIDpkaXNhYmxlZD0iJHN0b3JlLnN0YXRlLmRhdGFTb3VyY2VzLmxlbmd0aCA8PSAxIHx8ICRzdG9yZS5zdGF0ZS5kYXRhU291cmNlUGFpcnMubGVuZ3RoIDw9IDAiCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDx2LWxpc3QtaXRlbS10aXRsZSBjbGFzcz0ibWVudVRleHQiPgogICAgICAgICAgICAgICAgICAgIDx2LWljb24KICAgICAgICAgICAgICAgICAgICAgIGxlZnQKICAgICAgICAgICAgICAgICAgICAgIGNvbG9yPSJibGFjayIKICAgICAgICAgICAgICAgICAgICA+bWRpLW51bWVyaWMtMi1ib3gtbXVsdGlwbGUtb3V0bGluZTwvdi1pY29uPnt7ICR0KCdBcHAubWVudS5jcmVhdGVQYWlyLm1zZycpfX0KICAgICAgICAgICAgICAgICAgPC92LWxpc3QtaXRlbS10aXRsZT4KICAgICAgICAgICAgICAgIDwvdi1saXN0LWl0ZW0+CiAgICAgICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICAgICAgICA8c3Bhbj57eyAkdCgnQXBwLm1lbnUuY3JlYXRlUGFpci50b29sdGlwJyl9fTwvc3Bhbj4KICAgICAgICAgICAgPC92LXRvb2x0aXA+CiAgICAgICAgICA8L3YtbGlzdD4KICAgICAgICAgIDx2LWxpc3QgOmNsYXNzPSJ7IGRpc2FibGVkTWVudTogT2JqZWN0LmtleXMoJHN0b3JlLnN0YXRlLmFjdGl2ZVBhaXIuc291cmNlMSkubGVuZ3RoID09PSAwLGxhc3RNZW51OiB0cnVlIH0iPgogICAgICAgICAgICA8di10b29sdGlwIHJpZ2h0PgogICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6YWN0aXZhdG9yPSJ7IG9uIH0iPgogICAgICAgICAgICAgICAgPHYtbGlzdC1pdGVtCiAgICAgICAgICAgICAgICAgIHRvPSJzY29yZXMiCiAgICAgICAgICAgICAgICAgIHYtb249Im9uIgogICAgICAgICAgICAgICAgICA6ZGlzYWJsZWQ9J09iamVjdC5rZXlzKCRzdG9yZS5zdGF0ZS5hY3RpdmVQYWlyLnNvdXJjZTEpLmxlbmd0aCA9PT0gMCcKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPHYtbGlzdC1pdGVtLXRpdGxlIGNsYXNzPSJtZW51VGV4dCI+CiAgICAgICAgICAgICAgICAgICAgPHYtaWNvbgogICAgICAgICAgICAgICAgICAgICAgbGVmdAogICAgICAgICAgICAgICAgICAgICAgY29sb3I9ImJsYWNrIgogICAgICAgICAgICAgICAgICAgID5tZGktYm9vay1zZWFyY2g8L3YtaWNvbj57eyAkdCgnQXBwLm1lbnUucmVjb25jaWxlLm1zZycpIH19CiAgICAgICAgICAgICAgICAgIDwvdi1saXN0LWl0ZW0tdGl0bGU+CiAgICAgICAgICAgICAgICA8L3YtbGlzdC1pdGVtPgogICAgICAgICAgICAgIDwvdGVtcGxhdGU+CiAgICAgICAgICAgICAgPHNwYW4+e3sgJHQoJ0FwcC5tZW51LnJlY29uY2lsZS50b29sdGlwJykgfX08L3NwYW4+CiAgICAgICAgICAgIDwvdi10b29sdGlwPgogICAgICAgICAgPC92LWxpc3Q+CiAgICAgICAgICA8di1saXN0IDpjbGFzcz0ieyBkaXNhYmxlZE1lbnU6IE9iamVjdC5rZXlzKCRzdG9yZS5zdGF0ZS5hY3RpdmVQYWlyLnNvdXJjZTEpLmxlbmd0aD09PTAsbGFzdE1lbnU6IHRydWUgfSI+CiAgICAgICAgICAgIDx2LXRvb2x0aXAgcmlnaHQ+CiAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDphY3RpdmF0b3I9Insgb24gfSI+CiAgICAgICAgICAgICAgICA8di1saXN0LWl0ZW0KICAgICAgICAgICAgICAgICAgdG89InJlY29TdGF0dXMiCiAgICAgICAgICAgICAgICAgIHYtb249Im9uIgogICAgICAgICAgICAgICAgICA6ZGlzYWJsZWQ9J09iamVjdC5rZXlzKCRzdG9yZS5zdGF0ZS5hY3RpdmVQYWlyLnNvdXJjZTEpLmxlbmd0aCA9PT0gMCcKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPHYtbGlzdC1pdGVtLXRpdGxlIGNsYXNzPSJtZW51VGV4dCI+CiAgICAgICAgICAgICAgICAgICAgPHYtaWNvbgogICAgICAgICAgICAgICAgICAgICAgbGVmdAogICAgICAgICAgICAgICAgICAgICAgY29sb3I9ImJsYWNrIgogICAgICAgICAgICAgICAgICAgID5tZGktdmlldy1kYXNoYm9hcmQ8L3YtaWNvbj4ge3sgJHQoJ0FwcC5tZW51LnJlY29TdGF0dXMubXNnJykgfX0KICAgICAgICAgICAgICAgICAgPC92LWxpc3QtaXRlbS10aXRsZT4KICAgICAgICAgICAgICAgIDwvdi1saXN0LWl0ZW0+CiAgICAgICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICAgICAgICA8c3Bhbj57eyAkdCgnQXBwLm1lbnUucmVjb1N0YXR1cy50b29sdGlwJykgfX08L3NwYW4+CiAgICAgICAgICAgIDwvdi10b29sdGlwPgogICAgICAgICAgPC92LWxpc3Q+CiAgICAgICAgPC91bD4KICAgICAgPC9saT4KICAgIDwvdWw+CiAgPC9saT4KICA8bGkgY2xhc3M9InBhcmVudCI+CiAgICA8YSBocmVmPSIjIj4KICAgICAgPHYtaWNvbj5tZGktbWFwLW1hcmtlcjwvdi1pY29uPnt7ICR0KCdBcHAubWVudS5mYWNpbGl0eVJlZ2lzdHJ5Lm1zZycpfX0KICAgIDwvYT4KICAgIDx1bCBjbGFzcz0iY2hpbGQiPgogICAgICA8di1saXN0CiAgICAgICAgY2xhc3M9Imxhc3RNZW51IgogICAgICAgIHYtaWY9InRhc2tzVmVyaWZpY2F0aW9uLmNhbkFkZCgnQWRkSnVyaXNkaWN0aW9uJykiCiAgICAgID4KICAgICAgICA8di10b29sdGlwIHJpZ2h0PgogICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDphY3RpdmF0b3I9Insgb24gfSI+CiAgICAgICAgICAgIDx2LWxpc3QtaXRlbQogICAgICAgICAgICAgIHRvPSJBZGRKdXJpc2RpY3Rpb24iCiAgICAgICAgICAgICAgdi1vbj0ib24iCiAgICAgICAgICAgID4KICAgICAgICAgICAgICA8di1saXN0LWl0ZW0tdGl0bGUgY2xhc3M9Im1lbnVUZXh0Ij4KICAgICAgICAgICAgICAgIDx2LWljb24KICAgICAgICAgICAgICAgICAgbGVmdAogICAgICAgICAgICAgICAgICBjb2xvcj0iYmxhY2siCiAgICAgICAgICAgICAgICA+bWRpLWhvbWUtY2l0eTwvdi1pY29uPnt7ICR0KCdBcHAubWVudS5hZGRKdXJpc2RpY3Rpb24ubXNnJyl9fQogICAgICAgICAgICAgIDwvdi1saXN0LWl0ZW0tdGl0bGU+CiAgICAgICAgICAgIDwvdi1saXN0LWl0ZW0+CiAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgICAgPHNwYW4+e3sgJHQoJ0FwcC5tZW51LmFkZEp1cmlzZGljdGlvbi50b29sdGlwJyl9fTwvc3Bhbj4KICAgICAgICA8L3YtdG9vbHRpcD4KICAgICAgPC92LWxpc3Q+CiAgICAgIDx2LWxpc3QgY2xhc3M9Imxhc3RNZW51Ij4KICAgICAgICA8di10b29sdGlwIHJpZ2h0PgogICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDphY3RpdmF0b3I9Insgb24gfSI+CiAgICAgICAgICAgIDx2LWxpc3QtaXRlbQogICAgICAgICAgICAgIHRvPSJBZGRGYWNpbGl0eVRlc3QiCiAgICAgICAgICAgICAgdi1vbj0ib24iCiAgICAgICAgICAgID4KICAgICAgICAgICAgICA8di1saXN0LWl0ZW0tdGl0bGUgY2xhc3M9Im1lbnVUZXh0Ij4KICAgICAgICAgICAgICAgIDx2LWljb24KICAgICAgICAgICAgICAgICAgbGVmdAogICAgICAgICAgICAgICAgICBjb2xvcj0iYmxhY2siCiAgICAgICAgICAgICAgICA+bWRpLWhvbWUtY2l0eTwvdi1pY29uPgogICAgICAgICAgICAgICAgVGVzdCBBZGQgRmFjaWxpdHkKICAgICAgICAgICAgICA8L3YtbGlzdC1pdGVtLXRpdGxlPgogICAgICAgICAgICA8L3YtbGlzdC1pdGVtPgogICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICAgIDxzcGFuPnt7ICR0KCdBcHAubWVudS5hZGREYXRhU291cmNlcy50b29sdGlwJyl9fTwvc3Bhbj4KICAgICAgICA8L3YtdG9vbHRpcD4KICAgICAgPC92LWxpc3Q+CiAgICAgIDx2LWxpc3QKICAgICAgICBjbGFzcz0ibGFzdE1lbnUiCiAgICAgICAgdi1pZj0idGFza3NWZXJpZmljYXRpb24uY2FuQWRkKCdBZGRGYWNpbGl0eScpIgogICAgICA+CiAgICAgICAgPHYtdG9vbHRpcCByaWdodD4KICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6YWN0aXZhdG9yPSJ7IG9uIH0iPgogICAgICAgICAgICA8di1saXN0LWl0ZW0KICAgICAgICAgICAgICB0bz0iQWRkRmFjaWxpdHkiCiAgICAgICAgICAgICAgdi1vbj0ib24iCiAgICAgICAgICAgID4KICAgICAgICAgICAgICA8di1saXN0LWl0ZW0tdGl0bGUgY2xhc3M9Im1lbnVUZXh0Ij4KICAgICAgICAgICAgICAgIDx2LWljb24KICAgICAgICAgICAgICAgICAgbGVmdAogICAgICAgICAgICAgICAgICBjb2xvcj0iYmxhY2siCiAgICAgICAgICAgICAgICA+bWRpLWhvc3BpdGFsLWJ1aWxkaW5nPC92LWljb24+e3sgJHQoJ0FwcC5tZW51LmFkZEZhY2lsaXR5Lm1zZycpfX0KICAgICAgICAgICAgICA8L3YtbGlzdC1pdGVtLXRpdGxlPgogICAgICAgICAgICA8L3YtbGlzdC1pdGVtPgogICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICAgIDxzcGFuPnt7ICR0KCdBcHAubWVudS5hZGRGYWNpbGl0eS50b29sdGlwJyl9fTwvc3Bhbj4KICAgICAgICA8L3YtdG9vbHRpcD4KICAgICAgPC92LWxpc3Q+CiAgICAgIDx2LWxpc3QKICAgICAgICBjbGFzcz0ibGFzdE1lbnUiCiAgICAgICAgdi1pZj0idGFza3NWZXJpZmljYXRpb24uY2FuQWRkKCdBZGRTZXJ2aWNlJykiCiAgICAgID4KICAgICAgICA8di10b29sdGlwIHJpZ2h0PgogICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDphY3RpdmF0b3I9Insgb24gfSI+CiAgICAgICAgICAgIDx2LWxpc3QtaXRlbQogICAgICAgICAgICAgIHRvPSJBZGRTZXJ2aWNlIgogICAgICAgICAgICAgIHYtb249Im9uIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgPHYtbGlzdC1pdGVtLXRpdGxlIGNsYXNzPSJtZW51VGV4dCI+CiAgICAgICAgICAgICAgICA8di1pY29uCiAgICAgICAgICAgICAgICAgIGxlZnQKICAgICAgICAgICAgICAgICAgY29sb3I9ImJsYWNrIgogICAgICAgICAgICAgICAgPm1kaS1yb29tLXNlcnZpY2U8L3YtaWNvbj57eyAkdCgnQXBwLm1lbnUuYWRkU2VydmljZS5tc2cnKX19CiAgICAgICAgICAgICAgPC92LWxpc3QtaXRlbS10aXRsZT4KICAgICAgICAgICAgPC92LWxpc3QtaXRlbT4KICAgICAgICAgIDwvdGVtcGxhdGU+CiAgICAgICAgICA8c3Bhbj57eyAkdCgnQXBwLm1lbnUuYWRkU2VydmljZS50b29sdGlwJyl9fTwvc3Bhbj4KICAgICAgICA8L3YtdG9vbHRpcD4KICAgICAgPC92LWxpc3Q+CiAgICAgIDxsaQogICAgICAgIGNsYXNzPSJwYXJlbnQiCiAgICAgICAgdi1pZj0idGFza3NWZXJpZmljYXRpb24uY2FuQWRkKCdBZGRDb2RlU3lzdGVtJykiCiAgICAgID4KICAgICAgICA8YQogICAgICAgICAgaHJlZj0iIyIKICAgICAgICAgIHN0eWxlPSJtYXJnaW4tbGVmdDogMTVweCIKICAgICAgICA+CiAgICAgICAgICA8di1pY29uCiAgICAgICAgICAgIGxlZnQKICAgICAgICAgICAgY29sb3I9ImJsYWNrIgogICAgICAgICAgPm1kaS1ib29rLWFscGhhYmV0PC92LWljb24+CiAgICAgICAgICB7eyAkdCgnQXBwLm1lbnUuaGVhbHRoU2VydmljZVRlcm1pbm9sb2dpZXMubXNnJyl9fQogICAgICAgICAgPHYtaWNvbgogICAgICAgICAgICBjb2xvcj0iYmxhY2siCiAgICAgICAgICAgIHNtYWxsCiAgICAgICAgICAgIGNsYXNzPSJtZW51QXJyb3ciCiAgICAgICAgICA+bWRpLXBsYXktYXJyb3c8L3YtaWNvbj4KICAgICAgICA8L2E+CiAgICAgICAgPHVsIGNsYXNzPSJjaGlsZCI+CiAgICAgICAgICA8di1saXN0IGNsYXNzPSJsYXN0TWVudSI+CiAgICAgICAgICAgIDx2LXRvb2x0aXAgcmlnaHQ+CiAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDphY3RpdmF0b3I9Insgb24gfSI+CiAgICAgICAgICAgICAgICA8di1saXN0LWl0ZW0KICAgICAgICAgICAgICAgICAgdG89Ii9BZGRDb2RlU3lzdGVtP3R5cGU9c2VydmljZUNhdGVnb3JpZXMmZGlzcGxheVRleHQ9U2VydmljZSBDYXRlZ29yaWUiCiAgICAgICAgICAgICAgICAgIHYtb249Im9uIgogICAgICAgICAgICAgICAgICB2LWlmPSJ0YXNrc1ZlcmlmaWNhdGlvbi5jYW5BZGQoJ0FkZENvZGVTeXN0ZW0nKSIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPHYtbGlzdC1pdGVtLXRpdGxlIGNsYXNzPSJtZW51VGV4dCI+CiAgICAgICAgICAgICAgICAgICAgPHYtaWNvbgogICAgICAgICAgICAgICAgICAgICAgbGVmdAogICAgICAgICAgICAgICAgICAgICAgY29sb3I9ImJsYWNrIgogICAgICAgICAgICAgICAgICAgID5tZGktYm9vay1hbHBoYWJldDwvdi1pY29uPnt7ICR0KCdBcHAubWVudS5hZGRTZXJ2aWNlQ2F0ZWdvcnkubXNnJyl9fQogICAgICAgICAgICAgICAgICA8L3YtbGlzdC1pdGVtLXRpdGxlPgogICAgICAgICAgICAgICAgPC92LWxpc3QtaXRlbT4KICAgICAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgICAgICAgIDxzcGFuPnt7ICR0KCdBcHAubWVudS5hZGRTZXJ2aWNlQ2F0ZWdvcnkudG9vbHRpcCcpfX08L3NwYW4+CiAgICAgICAgICAgIDwvdi10b29sdGlwPgogICAgICAgICAgPC92LWxpc3Q+CiAgICAgICAgICA8di1saXN0IGNsYXNzPSJsYXN0TWVudSI+CiAgICAgICAgICAgIDx2LXRvb2x0aXAgcmlnaHQ+CiAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDphY3RpdmF0b3I9Insgb24gfSI+CiAgICAgICAgICAgICAgICA8di1saXN0LWl0ZW0KICAgICAgICAgICAgICAgICAgdG89Ii9BZGRDb2RlU3lzdGVtP3R5cGU9c2VydmljZVR5cGVzJmRpc3BsYXlUZXh0PVNlcnZpY2UgVHlwZSIKICAgICAgICAgICAgICAgICAgdi1vbj0ib24iCiAgICAgICAgICAgICAgICAgIHYtaWY9InRhc2tzVmVyaWZpY2F0aW9uLmNhbkFkZCgnQWRkQ29kZVN5c3RlbScpIgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8di1saXN0LWl0ZW0tdGl0bGUgY2xhc3M9Im1lbnVUZXh0Ij4KICAgICAgICAgICAgICAgICAgICA8di1pY29uCiAgICAgICAgICAgICAgICAgICAgICBsZWZ0CiAgICAgICAgICAgICAgICAgICAgICBjb2xvcj0iYmxhY2siCiAgICAgICAgICAgICAgICAgICAgPm1kaS1ib29rLWFscGhhYmV0PC92LWljb24+e3sgJHQoJ0FwcC5tZW51LmFkZFNlcnZpY2VUeXBlLm1zZycpfX0KICAgICAgICAgICAgICAgICAgPC92LWxpc3QtaXRlbS10aXRsZT4KICAgICAgICAgICAgICAgIDwvdi1saXN0LWl0ZW0+CiAgICAgICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICAgICAgICA8c3Bhbj57eyAkdCgnQXBwLm1lbnUuYWRkU2VydmljZVR5cGUudG9vbHRpcCcpfX08L3NwYW4+CiAgICAgICAgICAgIDwvdi10b29sdGlwPgogICAgICAgICAgPC92LWxpc3Q+CiAgICAgICAgICA8di1saXN0IGNsYXNzPSJsYXN0TWVudSI+CiAgICAgICAgICAgIDx2LXRvb2x0aXAgcmlnaHQ+CiAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDphY3RpdmF0b3I9Insgb24gfSI+CiAgICAgICAgICAgICAgICA8di1saXN0LWl0ZW0KICAgICAgICAgICAgICAgICAgdG89Ii9BZGRDb2RlU3lzdGVtP3R5cGU9c3BlY2lhbHRpZXMmZGlzcGxheVRleHQ9U3BlY2lhbHR5IgogICAgICAgICAgICAgICAgICB2LW9uPSJvbiIKICAgICAgICAgICAgICAgICAgdi1pZj0idGFza3NWZXJpZmljYXRpb24uY2FuQWRkKCdBZGRDb2RlU3lzdGVtJykiCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDx2LWxpc3QtaXRlbS10aXRsZSBjbGFzcz0ibWVudVRleHQiPgogICAgICAgICAgICAgICAgICAgIDx2LWljb24KICAgICAgICAgICAgICAgICAgICAgIGxlZnQKICAgICAgICAgICAgICAgICAgICAgIGNvbG9yPSJibGFjayIKICAgICAgICAgICAgICAgICAgICA+bWRpLWJvb2stYWxwaGFiZXQ8L3YtaWNvbj57eyAkdCgnQXBwLm1lbnUuYWRkU2VydmljZVNwZWNpYWx0eS5tc2cnKX19CiAgICAgICAgICAgICAgICAgIDwvdi1saXN0LWl0ZW0tdGl0bGU+CiAgICAgICAgICAgICAgICA8L3YtbGlzdC1pdGVtPgogICAgICAgICAgICAgIDwvdGVtcGxhdGU+CiAgICAgICAgICAgICAgPHNwYW4+e3sgJHQoJ0FwcC5tZW51LmFkZFNlcnZpY2VTcGVjaWFsdHkudG9vbHRpcCcpfX08L3NwYW4+CiAgICAgICAgICAgIDwvdi10b29sdGlwPgogICAgICAgICAgPC92LWxpc3Q+CiAgICAgICAgICA8di1saXN0IGNsYXNzPSJsYXN0TWVudSI+CiAgICAgICAgICAgIDx2LXRvb2x0aXAgcmlnaHQ+CiAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDphY3RpdmF0b3I9Insgb24gfSI+CiAgICAgICAgICAgICAgICA8di1saXN0LWl0ZW0KICAgICAgICAgICAgICAgICAgdG89Ii9BZGRDb2RlU3lzdGVtP3R5cGU9c2VydmljZUVsaWdpYmlsaXRpZXMmZGlzcGxheVRleHQ9U2VydmljZSBFbGlnaWJpbGl0eSIKICAgICAgICAgICAgICAgICAgdi1vbj0ib24iCiAgICAgICAgICAgICAgICAgIHYtaWY9InRhc2tzVmVyaWZpY2F0aW9uLmNhbkFkZCgnQWRkQ29kZVN5c3RlbScpIgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8di1saXN0LWl0ZW0tdGl0bGUgY2xhc3M9Im1lbnVUZXh0Ij4KICAgICAgICAgICAgICAgICAgICA8di1pY29uCiAgICAgICAgICAgICAgICAgICAgICBsZWZ0CiAgICAgICAgICAgICAgICAgICAgICBjb2xvcj0iYmxhY2siCiAgICAgICAgICAgICAgICAgICAgPm1kaS1ib29rLWFscGhhYmV0PC92LWljb24+e3sgJHQoJ0FwcC5tZW51LmFkZFNlcnZpY2VFbGlnaWJpbGl0eS5tc2cnKX19CiAgICAgICAgICAgICAgICAgIDwvdi1saXN0LWl0ZW0tdGl0bGU+CiAgICAgICAgICAgICAgICA8L3YtbGlzdC1pdGVtPgogICAgICAgICAgICAgIDwvdGVtcGxhdGU+CiAgICAgICAgICAgICAgPHNwYW4+e3sgJHQoJ0FwcC5tZW51LmFkZFNlcnZpY2VFbGlnaWJpbGl0eS50b29sdGlwJyl9fTwvc3Bhbj4KICAgICAgICAgICAgPC92LXRvb2x0aXA+CiAgICAgICAgICA8L3YtbGlzdD4KICAgICAgICAgIDx2LWxpc3QgY2xhc3M9Imxhc3RNZW51Ij4KICAgICAgICAgICAgPHYtdG9vbHRpcCByaWdodD4KICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90OmFjdGl2YXRvcj0ieyBvbiB9Ij4KICAgICAgICAgICAgICAgIDx2LWxpc3QtaXRlbQogICAgICAgICAgICAgICAgICB0bz0iL0FkZENvZGVTeXN0ZW0/dHlwZT1sYW5ndWFnZXMmZGlzcGxheVRleHQ9TGFuZ3VhZ2UiCiAgICAgICAgICAgICAgICAgIHYtb249Im9uIgogICAgICAgICAgICAgICAgICB2LWlmPSJ0YXNrc1ZlcmlmaWNhdGlvbi5jYW5BZGQoJ0FkZENvZGVTeXN0ZW0nKSIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPHYtbGlzdC1pdGVtLXRpdGxlIGNsYXNzPSJtZW51VGV4dCI+CiAgICAgICAgICAgICAgICAgICAgPHYtaWNvbgogICAgICAgICAgICAgICAgICAgICAgbGVmdAogICAgICAgICAgICAgICAgICAgICAgY29sb3I9ImJsYWNrIgogICAgICAgICAgICAgICAgICAgID5tZGktYm9vay1hbHBoYWJldDwvdi1pY29uPnt7ICR0KCdBcHAubWVudS5hZGRMYW5ndWFnZS5tc2cnKX19CiAgICAgICAgICAgICAgICAgIDwvdi1saXN0LWl0ZW0tdGl0bGU+CiAgICAgICAgICAgICAgICA8L3YtbGlzdC1pdGVtPgogICAgICAgICAgICAgIDwvdGVtcGxhdGU+CiAgICAgICAgICAgICAgPHNwYW4+e3sgJHQoJ0FwcC5tZW51LmFkZExhbmd1YWdlLnRvb2x0aXAnKX19PC9zcGFuPgogICAgICAgICAgICA8L3YtdG9vbHRpcD4KICAgICAgICAgIDwvdi1saXN0PgogICAgICAgICAgPHYtbGlzdCBjbGFzcz0ibGFzdE1lbnUiPgogICAgICAgICAgICA8di10b29sdGlwIHJpZ2h0PgogICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6YWN0aXZhdG9yPSJ7IG9uIH0iPgogICAgICAgICAgICAgICAgPHYtbGlzdC1pdGVtCiAgICAgICAgICAgICAgICAgIHRvPSIvQWRkQ29kZVN5c3RlbT90eXBlPXJlZmVycmFsTWV0aG9kcyZkaXNwbGF5VGV4dD1SZWZlcnJhbCBNZXRob2RzIgogICAgICAgICAgICAgICAgICB2LW9uPSJvbiIKICAgICAgICAgICAgICAgICAgdi1pZj0idGFza3NWZXJpZmljYXRpb24uY2FuQWRkKCdBZGRDb2RlU3lzdGVtJykiCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDx2LWxpc3QtaXRlbS10aXRsZSBjbGFzcz0ibWVudVRleHQiPgogICAgICAgICAgICAgICAgICAgIDx2LWljb24KICAgICAgICAgICAgICAgICAgICAgIGxlZnQKICAgICAgICAgICAgICAgICAgICAgIGNvbG9yPSJibGFjayIKICAgICAgICAgICAgICAgICAgICA+bWRpLWJvb2stYWxwaGFiZXQ8L3YtaWNvbj57eyAkdCgnQXBwLm1lbnUuYWRkUmVmZXJyYWxNZXRob2QubXNnJyl9fQogICAgICAgICAgICAgICAgICA8L3YtbGlzdC1pdGVtLXRpdGxlPgogICAgICAgICAgICAgICAgPC92LWxpc3QtaXRlbT4KICAgICAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgICAgICAgIDxzcGFuPnt7ICR0KCdBcHAubWVudS5hZGRSZWZlcnJhbE1ldGhvZC50b29sdGlwJyl9fTwvc3Bhbj4KICAgICAgICAgICAgPC92LXRvb2x0aXA+CiAgICAgICAgICA8L3YtbGlzdD4KICAgICAgICAgIDx2LWxpc3QgY2xhc3M9Imxhc3RNZW51Ij4KICAgICAgICAgICAgPHYtdG9vbHRpcCByaWdodD4KICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90OmFjdGl2YXRvcj0ieyBvbiB9Ij4KICAgICAgICAgICAgICAgIDx2LWxpc3QtaXRlbQogICAgICAgICAgICAgICAgICB0bz0iL0FkZENvZGVTeXN0ZW0/dHlwZT1wcm9ncmFtcyZkaXNwbGF5VGV4dD1Qcm9ncmFtIgogICAgICAgICAgICAgICAgICB2LW9uPSJvbiIKICAgICAgICAgICAgICAgICAgdi1pZj0idGFza3NWZXJpZmljYXRpb24uY2FuQWRkKCdBZGRDb2RlU3lzdGVtJykiCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDx2LWxpc3QtaXRlbS10aXRsZSBjbGFzcz0ibWVudVRleHQiPgogICAgICAgICAgICAgICAgICAgIDx2LWljb24KICAgICAgICAgICAgICAgICAgICAgIGxlZnQKICAgICAgICAgICAgICAgICAgICAgIGNvbG9yPSJibGFjayIKICAgICAgICAgICAgICAgICAgICA+bWRpLWJvb2stYWxwaGFiZXQ8L3YtaWNvbj57eyAkdCgnQXBwLm1lbnUuYWRkUHJvZ3JhbS5tc2cnKX19CiAgICAgICAgICAgICAgICAgIDwvdi1saXN0LWl0ZW0tdGl0bGU+CiAgICAgICAgICAgICAgICA8L3YtbGlzdC1pdGVtPgogICAgICAgICAgICAgIDwvdGVtcGxhdGU+CiAgICAgICAgICAgICAgPHNwYW4+e3sgJHQoJ0FwcC5tZW51LmFkZFByb2dyYW0udG9vbHRpcCcpfX08L3NwYW4+CiAgICAgICAgICAgIDwvdi10b29sdGlwPgogICAgICAgICAgPC92LWxpc3Q+CiAgICAgICAgICA8di1saXN0IGNsYXNzPSJsYXN0TWVudSI+CiAgICAgICAgICAgIDx2LXRvb2x0aXAgcmlnaHQ+CiAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDphY3RpdmF0b3I9Insgb24gfSI+CiAgICAgICAgICAgICAgPHYtbGlzdC1pdGVtCiAgICAgICAgICAgICAgICB0bz0iL0FkZENvZGVTeXN0ZW0/dHlwZT1zZXJ2aWNlQ2hhcmFjdGVyaXN0aWNzJmRpc3BsYXlUZXh0PVNlcnZpY2UgQ2hhcmFjdGVyaXN0aWNzIgogICAgICAgICAgICAgICAgdi1vbj0ib24iCiAgICAgICAgICAgICAgICB2LWlmPSJ0YXNrc1ZlcmlmaWNhdGlvbi5jYW5BZGQoJ0FkZENvZGVTeXN0ZW0nKSIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8di1saXN0LWl0ZW0tdGl0bGUgY2xhc3M9Im1lbnVUZXh0Ij4KICAgICAgICAgICAgICAgICAgPHYtaWNvbgogICAgICAgICAgICAgICAgICAgIGxlZnQKICAgICAgICAgICAgICAgICAgICBjb2xvcj0iYmxhY2siCiAgICAgICAgICAgICAgICAgID5tZGktYm9vay1hbHBoYWJldDwvdi1pY29uPnt7ICR0KCdBcHAubWVudS5hZGRDaGFyYWN0ZXJpc3RpYy5tc2cnKX19CiAgICAgICAgICAgICAgICA8L3YtbGlzdC1pdGVtLXRpdGxlPgogICAgICAgICAgICAgIDwvdi1saXN0LWl0ZW0+CiAgICAgICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICAgICAgICA8c3Bhbj57eyAkdCgnQXBwLm1lbnUuYWRkQ2hhcmFjdGVyaXN0aWMudG9vbHRpcCcpfX08L3NwYW4+CiAgICAgICAgICAgIDwvdi10b29sdGlwPgogICAgICAgICAgPC92LWxpc3Q+CiAgICAgICAgICA8di1saXN0IGNsYXNzPSJsYXN0TWVudSI+CiAgICAgICAgICAgIDx2LXRvb2x0aXAgcmlnaHQ+CiAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDphY3RpdmF0b3I9Insgb24gfSI+CiAgICAgICAgICAgICAgICA8di1saXN0LWl0ZW0KICAgICAgICAgICAgICAgICAgdG89Ii9BZGRDb2RlU3lzdGVtP3R5cGU9c2VydmljZVByb3Zpc2lvbkNvbmRpdGlvbnMmZGlzcGxheVRleHQ9U2VydmljZSBQcm92aXNpb24gQ29uZGl0aW9uIgogICAgICAgICAgICAgICAgICB2LW9uPSJvbiIKICAgICAgICAgICAgICAgICAgdi1pZj0idGFza3NWZXJpZmljYXRpb24uY2FuQWRkKCdBZGRDb2RlU3lzdGVtJykiCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDx2LWxpc3QtaXRlbS10aXRsZSBjbGFzcz0ibWVudVRleHQiPgogICAgICAgICAgICAgICAgICAgIDx2LWljb24KICAgICAgICAgICAgICAgICAgICAgIGxlZnQKICAgICAgICAgICAgICAgICAgICAgIGNvbG9yPSJibGFjayIKICAgICAgICAgICAgICAgICAgICA+bWRpLWJvb2stYWxwaGFiZXQ8L3YtaWNvbj57eyAkdCgnQXBwLm1lbnUuYWRkU2VydmljZVByb3Zpc2lvbkNvbmRpdGlvbi5tc2cnKX19CiAgICAgICAgICAgICAgICAgIDwvdi1saXN0LWl0ZW0tdGl0bGU+CiAgICAgICAgICAgICAgICA8L3YtbGlzdC1pdGVtPgogICAgICAgICAgICAgIDwvdGVtcGxhdGU+CiAgICAgICAgICAgICAgPHNwYW4+e3sgJHQoJ0FwcC5tZW51LmFkZFNlcnZpY2VQcm92aXNpb25Db25kaXRpb24udG9vbHRpcCcpfX08L3NwYW4+CiAgICAgICAgICAgIDwvdi10b29sdGlwPgogICAgICAgICAgPC92LWxpc3Q+CiAgICAgICAgPC91bD4KICAgICAgPC9saT4KICAgICAgPGxpIGNsYXNzPSJwYXJlbnQiPgogICAgICAgIDxhIGhyZWY9IiMiPgogICAgICAgICAgPHYtaWNvbgogICAgICAgICAgICBsZWZ0CiAgICAgICAgICAgIGNvbG9yPSJibGFjayIKICAgICAgICAgID5tZGktY2FsbC1tYWRlPC92LWljb24+CiAgICAgICAgICB7eyAkdCgnQXBwLm1lbnUuZmFjaWxpdHlSZXF1ZXN0cy5tc2cnKX19CiAgICAgICAgICA8di1pY29uCiAgICAgICAgICAgIGNvbG9yPSJibGFjayIKICAgICAgICAgICAgc21hbGwKICAgICAgICAgICAgY2xhc3M9Im1lbnVBcnJvdyIKICAgICAgICAgID5tZGktcGxheS1hcnJvdzwvdi1pY29uPgogICAgICAgIDwvYT4KICAgICAgICA8dWwgY2xhc3M9ImNoaWxkIj4KICAgICAgICAgIDx2LWxpc3QgY2xhc3M9Imxhc3RNZW51Ij4KICAgICAgICAgICAgPHYtdG9vbHRpcCByaWdodD4KICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90OmFjdGl2YXRvcj0ieyBvbiB9Ij4KICAgICAgICAgICAgICAgIDx2LWxpc3QtaXRlbQogICAgICAgICAgICAgICAgICB2LWlmPSJ0YXNrc1ZlcmlmaWNhdGlvbi5jYW5BZGQoJ1JlcXVlc3RCdWlsZGluZ0FkZGl0aW9uJykiCiAgICAgICAgICAgICAgICAgIHRvPSJSZXF1ZXN0QnVpbGRpbmdBZGRpdGlvbiIKICAgICAgICAgICAgICAgICAgdi1vbj0ib24iCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDx2LWxpc3QtaXRlbS10aXRsZSBjbGFzcz0ibWVudVRleHQiPgogICAgICAgICAgICAgICAgICAgIDx2LWljb24KICAgICAgICAgICAgICAgICAgICAgIGxlZnQKICAgICAgICAgICAgICAgICAgICAgIGNvbG9yPSJibGFjayIKICAgICAgICAgICAgICAgICAgICA+bWRpLWNhbGwtbWFkZTwvdi1pY29uPnt7ICR0KCdBcHAubWVudS5yZXF1ZXN0TmV3RmFjaWxpdHkubXNnJyl9fQogICAgICAgICAgICAgICAgICA8L3YtbGlzdC1pdGVtLXRpdGxlPgogICAgICAgICAgICAgICAgPC92LWxpc3QtaXRlbT4KICAgICAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgICAgICAgIDxzcGFuPnt7ICR0KCdBcHAubWVudS5yZXF1ZXN0TmV3RmFjaWxpdHkudG9vbHRpcCcpfX08L3NwYW4+CiAgICAgICAgICAgIDwvdi10b29sdGlwPgogICAgICAgICAgPC92LWxpc3Q+CiAgICAgICAgICA8di1saXN0IGNsYXNzPSJsYXN0TWVudSI+CiAgICAgICAgICAgIDx2LXRvb2x0aXAgcmlnaHQ+CiAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDphY3RpdmF0b3I9Insgb24gfSI+CiAgICAgICAgICAgICAgICA8di1saXN0LWl0ZW0KICAgICAgICAgICAgICAgICAgdi1pZj0idGFza3NWZXJpZmljYXRpb24uY2FuQWRkKCdSZXF1ZXN0VXBkYXRlQnVpbGRpbmdEZXRhaWxzJykiCiAgICAgICAgICAgICAgICAgIHRvPSJSZXF1ZXN0VXBkYXRlQnVpbGRpbmdEZXRhaWxzIgogICAgICAgICAgICAgICAgICB2LW9uPSJvbiIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPHYtbGlzdC1pdGVtLXRpdGxlIGNsYXNzPSJtZW51VGV4dCI+CiAgICAgICAgICAgICAgICAgICAgPHYtaWNvbgogICAgICAgICAgICAgICAgICAgICAgbGVmdAogICAgICAgICAgICAgICAgICAgICAgY29sb3I9ImJsYWNrIgogICAgICAgICAgICAgICAgICAgID5tZGktY2FsbC1tYWRlPC92LWljb24+e3sgJHQoJ0FwcC5tZW51LnJlcXVlc3RVcGRhdGVGYWNpbGl0eS5tc2cnKX19CiAgICAgICAgICAgICAgICAgIDwvdi1saXN0LWl0ZW0tdGl0bGU+CiAgICAgICAgICAgICAgICA8L3YtbGlzdC1pdGVtPgogICAgICAgICAgICAgIDwvdGVtcGxhdGU+CiAgICAgICAgICAgICAgPHNwYW4+e3sgJHQoJ0FwcC5tZW51LnJlcXVlc3RVcGRhdGVGYWNpbGl0eS50b29sdGlwJyl9fTwvc3Bhbj4KICAgICAgICAgICAgPC92LXRvb2x0aXA+CiAgICAgICAgICA8L3YtbGlzdD4KICAgICAgICA8L3VsPgogICAgICA8L2xpPgoKICAgICAgPGxpIGNsYXNzPSJwYXJlbnQiPgogICAgICAgIDxhIGhyZWY9IiMiPgogICAgICAgICAgPHYtaWNvbgogICAgICAgICAgICBsZWZ0CiAgICAgICAgICAgIGNvbG9yPSJibGFjayIKICAgICAgICAgID5tZGktZm9ybWF0LWxpc3QtYnVsbGV0ZWQtc3F1YXJlPC92LWljb24+CiAgICAgICAgICB7eyAkdCgnQXBwLm1lbnUuZmFjaWxpdHlSZWdSZXBvcnRzLm1zZycpfX0KICAgICAgICAgIDx2LWljb24KICAgICAgICAgICAgY29sb3I9ImJsYWNrIgogICAgICAgICAgICBzbWFsbAogICAgICAgICAgICBjbGFzcz0ibWVudUFycm93IgogICAgICAgICAgPm1kaS1wbGF5LWFycm93PC92LWljb24+CiAgICAgICAgPC9hPgogICAgICAgIDx1bCBjbGFzcz0iY2hpbGQiPgogICAgICAgICAgPHYtbGlzdAogICAgICAgICAgICBjbGFzcz0ibGFzdE1lbnUiCiAgICAgICAgICAgIHYtaWY9InRhc2tzVmVyaWZpY2F0aW9uLmNhblZpZXcoJ0ZhY2lsaXRpZXNSZXBvcnQnKSIKICAgICAgICAgID4KICAgICAgICAgICAgPHYtbGlzdC1pdGVtIHRvPSJGYWNpbGl0aWVzUmVwb3J0Ij4KICAgICAgICAgICAgICA8di1saXN0LWl0ZW0tdGl0bGUgY2xhc3M9Im1lbnVUZXh0Ij4KICAgICAgICAgICAgICAgIDx2LWljb24KICAgICAgICAgICAgICAgICAgbGVmdAogICAgICAgICAgICAgICAgICBjb2xvcj0iYmxhY2siCiAgICAgICAgICAgICAgICA+bWRpLWZvcm1hdC1saXN0LWJ1bGxldGVkLXNxdWFyZTwvdi1pY29uPnt7ICR0KCdBcHAubWVudS5mYWNpbGl0aWVzUmVwb3J0Lm1zZycpfX0KICAgICAgICAgICAgICA8L3YtbGlzdC1pdGVtLXRpdGxlPgogICAgICAgICAgICA8L3YtbGlzdC1pdGVtPgogICAgICAgICAgPC92LWxpc3Q+CiAgICAgICAgICA8di1saXN0CiAgICAgICAgICAgIGNsYXNzPSJsYXN0TWVudSIKICAgICAgICAgICAgdi1pZj0idGFza3NWZXJpZmljYXRpb24uY2FuVmlldygnTmV3RmFjaWxpdGllc1JlcXVlc3RzUmVwb3J0JykiCiAgICAgICAgICA+CiAgICAgICAgICAgIDx2LXRvb2x0aXAgcmlnaHQ+CiAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDphY3RpdmF0b3I9Insgb24gfSI+CiAgICAgICAgICAgICAgICA8di1saXN0LWl0ZW0KICAgICAgICAgICAgICAgICAgdG89Ik5ld0ZhY2lsaXRpZXNSZXF1ZXN0c1JlcG9ydCIKICAgICAgICAgICAgICAgICAgdi1vbj0ib24iCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDx2LWxpc3QtaXRlbS10aXRsZSBjbGFzcz0ibWVudVRleHQiPgogICAgICAgICAgICAgICAgICAgIDx2LWljb24KICAgICAgICAgICAgICAgICAgICAgIGxlZnQKICAgICAgICAgICAgICAgICAgICAgIGNvbG9yPSJibGFjayIKICAgICAgICAgICAgICAgICAgICA+bWRpLWZvcm1hdC1saXN0LWJ1bGxldGVkLXNxdWFyZTwvdi1pY29uPnt7ICR0KCdBcHAubWVudS5uZXdGYWNpbGl0aWVzUmVxdWVzdHNSZXBvcnQubXNnJyl9fQogICAgICAgICAgICAgICAgICA8L3YtbGlzdC1pdGVtLXRpdGxlPgogICAgICAgICAgICAgICAgPC92LWxpc3QtaXRlbT4KICAgICAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgICAgICAgIDxzcGFuPnt7ICR0KCdBcHAubWVudS5uZXdGYWNpbGl0aWVzUmVxdWVzdHNSZXBvcnQudG9vbHRpcCcpfX08L3NwYW4+CiAgICAgICAgICAgIDwvdi10b29sdGlwPgogICAgICAgICAgPC92LWxpc3Q+CiAgICAgICAgICA8di1saXN0CiAgICAgICAgICAgIGNsYXNzPSJsYXN0TWVudSIKICAgICAgICAgICAgdi1pZj0idGFza3NWZXJpZmljYXRpb24uY2FuVmlldygnRmFjaWxpdGllc1VwZGF0ZVJlcXVlc3RzUmVwb3J0JykiCiAgICAgICAgICA+CiAgICAgICAgICAgIDx2LXRvb2x0aXAgcmlnaHQ+CiAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDphY3RpdmF0b3I9Insgb24gfSI+CiAgICAgICAgICAgICAgICA8di1saXN0LWl0ZW0KICAgICAgICAgICAgICAgICAgdG89IkZhY2lsaXRpZXNVcGRhdGVSZXF1ZXN0c1JlcG9ydCIKICAgICAgICAgICAgICAgICAgdi1vbj0ib24iCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDx2LWxpc3QtaXRlbS10aXRsZSBjbGFzcz0ibWVudVRleHQiPgogICAgICAgICAgICAgICAgICAgIDx2LWljb24KICAgICAgICAgICAgICAgICAgICAgIGxlZnQKICAgICAgICAgICAgICAgICAgICAgIGNvbG9yPSJibGFjayIKICAgICAgICAgICAgICAgICAgICA+bWRpLWZvcm1hdC1saXN0LWJ1bGxldGVkLXNxdWFyZTwvdi1pY29uPnt7ICR0KCdBcHAubWVudS5mYWNpbGl0aWVzVXBkYXRlUmVxdWVzdHNSZXBvcnQubXNnJyl9fQogICAgICAgICAgICAgICAgICA8L3YtbGlzdC1pdGVtLXRpdGxlPgogICAgICAgICAgICAgICAgPC92LWxpc3QtaXRlbT4KICAgICAgICAgICAgICAgIDxzcGFuPnt7ICR0KCdBcHAubWVudS5mYWNpbGl0aWVzVXBkYXRlUmVxdWVzdHNSZXBvcnQudG9vbHRpcCcpfX08L3NwYW4+CiAgICAgICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICAgICAgPC92LXRvb2x0aXA+CiAgICAgICAgICA8L3YtbGlzdD4KICAgICAgICAgIDx2LWxpc3QKICAgICAgICAgICAgY2xhc3M9Imxhc3RNZW51IgogICAgICAgICAgICB2LWlmPSJ0YXNrc1ZlcmlmaWNhdGlvbi5jYW5WaWV3KCdTZXJ2aWNlc1JlcG9ydCcpIgogICAgICAgICAgPgogICAgICAgICAgICA8di1saXN0LWl0ZW0gdG89IlNlcnZpY2VzUmVwb3J0Ij4KICAgICAgICAgICAgICA8di1saXN0LWl0ZW0tdGl0bGUgY2xhc3M9Im1lbnVUZXh0Ij4KICAgICAgICAgICAgICAgIDx2LWljb24KICAgICAgICAgICAgICAgICAgbGVmdAogICAgICAgICAgICAgICAgICBjb2xvcj0iYmxhY2siCiAgICAgICAgICAgICAgICA+bWRpLWZvcm1hdC1saXN0LWJ1bGxldGVkLXNxdWFyZTwvdi1pY29uPnt7ICR0KCdBcHAubWVudS5zZXJ2aWNlc1JlcG9ydC5tc2cnKX19CiAgICAgICAgICAgICAgPC92LWxpc3QtaXRlbS10aXRsZT4KICAgICAgICAgICAgPC92LWxpc3QtaXRlbT4KICAgICAgICAgIDwvdi1saXN0PgogICAgICAgICAgPHYtbGlzdAogICAgICAgICAgICBjbGFzcz0ibGFzdE1lbnUiCiAgICAgICAgICAgIHYtaWY9InRhc2tzVmVyaWZpY2F0aW9uLmNhblZpZXcoJ0ZhY2lsaXRpZXNSZXBvcnQnKSIKICAgICAgICAgID4KICAgICAgICAgICAgPHYtdG9vbHRpcCByaWdodD4KICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90OmFjdGl2YXRvcj0ieyBvbiB9Ij4KICAgICAgICAgICAgICAgIDx2LWxpc3QtaXRlbQogICAgICAgICAgICAgICAgICB0bz0iSGlzdG9yeSIKICAgICAgICAgICAgICAgICAgdi1vbj0ib24iCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDx2LWxpc3QtaXRlbS10aXRsZSBjbGFzcz0ibWVudVRleHQiPgogICAgICAgICAgICAgICAgICAgIDx2LWljb24KICAgICAgICAgICAgICAgICAgICAgIGxlZnQKICAgICAgICAgICAgICAgICAgICAgIGNvbG9yPSJibGFjayIKICAgICAgICAgICAgICAgICAgICA+bWRpLWZvcm1hdC1saXN0LWJ1bGxldGVkLXNxdWFyZTwvdi1pY29uPnt7ICR0KCdBcHAubWVudS5oaXN0b3J5UmVwb3J0Lm1zZycpfX0KICAgICAgICAgICAgICAgICAgPC92LWxpc3QtaXRlbS10aXRsZT4KICAgICAgICAgICAgICAgIDwvdi1saXN0LWl0ZW0+CiAgICAgICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICAgICAgICA8c3Bhbj57eyAkdCgnQXBwLm1lbnUuaGlzdG9yeVJlcG9ydC50b29sdGlwJyl9fTwvc3Bhbj4KICAgICAgICAgICAgPC92LXRvb2x0aXA+CiAgICAgICAgICA8L3YtbGlzdD4KICAgICAgICA8L3VsPgogICAgICA8L2xpPgogICAgPC91bD4KICA8L2xpPgogIDxsaSBjbGFzcz0icGFyZW50Ij4KICAgIDxhIGhyZWY9IiMiPgogICAgICA8di1pY29uPm1kaS1hY2NvdW50LW91dGxpbmU8L3YtaWNvbj57eyAkdCgnQXBwLm1lbnUuYWNjb3VudC5tc2cnKX19CiAgICA8L2E+CiAgICA8dWwgY2xhc3M9ImNoaWxkIj4KICAgICAgPHYtbGlzdCBjbGFzcz0ibGFzdE1lbnUiPgogICAgICAgIDx2LXRvb2x0aXAgcmlnaHQ+CiAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90OmFjdGl2YXRvcj0ieyBvbiB9Ij4KICAgICAgICAgICAgPHYtbGlzdC1pdGVtCiAgICAgICAgICAgICAgdG89ImFkZFVzZXIiCiAgICAgICAgICAgICAgdi1vbj0ib24iCiAgICAgICAgICAgICAgdi1pZj0nJHN0b3JlLnN0YXRlLmF1dGgucm9sZSA9PT0gIkFkbWluIicKICAgICAgICAgICAgPgogICAgICAgICAgICAgIDx2LWxpc3QtaXRlbS10aXRsZSBjbGFzcz0ibWVudVRleHQiPgogICAgICAgICAgICAgICAgPHYtaWNvbgogICAgICAgICAgICAgICAgICBsZWZ0CiAgICAgICAgICAgICAgICAgIGNvbG9yPSJibGFjayIKICAgICAgICAgICAgICAgID5tZGktYWNjb3VudC1vdXRsaW5lPC92LWljb24+e3sgJHQoJ0FwcC5tZW51LmFkZFVzZXIubXNnJyl9fQogICAgICAgICAgICAgIDwvdi1saXN0LWl0ZW0tdGl0bGU+CiAgICAgICAgICAgIDwvdi1saXN0LWl0ZW0+CiAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgICAgPHNwYW4+e3sgJHQoJ0FwcC5tZW51LmFkZFVzZXIudG9vbHRpcCcpfX08L3NwYW4+CiAgICAgICAgPC92LXRvb2x0aXA+CiAgICAgIDwvdi1saXN0PgogICAgICA8di1saXN0IGNsYXNzPSJsYXN0TWVudSI+CiAgICAgICAgPHYtdG9vbHRpcCByaWdodD4KICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6YWN0aXZhdG9yPSJ7IG9uIH0iPgogICAgICAgICAgICA8di1saXN0LWl0ZW0KICAgICAgICAgICAgICB0bz0idXNlcnNMaXN0IgogICAgICAgICAgICAgIHYtb249Im9uIgogICAgICAgICAgICAgIHYtaWY9JyRzdG9yZS5zdGF0ZS5hdXRoLnJvbGUgPT09ICJBZG1pbiInCiAgICAgICAgICAgID4KICAgICAgICAgICAgICA8di1saXN0LWl0ZW0tdGl0bGUgY2xhc3M9Im1lbnVUZXh0Ij4KICAgICAgICAgICAgICAgIDx2LWljb24KICAgICAgICAgICAgICAgICAgbGVmdAogICAgICAgICAgICAgICAgICBjb2xvcj0iYmxhY2siCiAgICAgICAgICAgICAgICA+bWRpLWFjY291bnQtb3V0bGluZTwvdi1pY29uPnt7ICR0KCdBcHAubWVudS51c2Vyc0xpc3QubXNnJyl9fQogICAgICAgICAgICAgIDwvdi1saXN0LWl0ZW0tdGl0bGU+CiAgICAgICAgICAgIDwvdi1saXN0LWl0ZW0+CiAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgICAgPHNwYW4+e3sgJHQoJ0FwcC5tZW51LnVzZXJzTGlzdC50b29sdGlwJyl9fTwvc3Bhbj4KICAgICAgICA8L3YtdG9vbHRpcD4KICAgICAgPC92LWxpc3Q+CiAgICAgIDx2LWxpc3QgY2xhc3M9Imxhc3RNZW51Ij4KICAgICAgICA8di10b29sdGlwIHJpZ2h0PgogICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDphY3RpdmF0b3I9Insgb24gfSI+CiAgICAgICAgICAgIDx2LWxpc3QtaXRlbQogICAgICAgICAgICAgIHRvPSJyb2xlc01hbmFnZW1lbnQiCiAgICAgICAgICAgICAgdi1vbj0ib24iCiAgICAgICAgICAgICAgdi1pZj0nJHN0b3JlLnN0YXRlLmF1dGgucm9sZSA9PT0gIkFkbWluIicKICAgICAgICAgICAgPgogICAgICAgICAgICAgIDx2LWxpc3QtaXRlbS10aXRsZSBjbGFzcz0ibWVudVRleHQiPgogICAgICAgICAgICAgICAgPHYtaWNvbgogICAgICAgICAgICAgICAgICBsZWZ0CiAgICAgICAgICAgICAgICAgIGNvbG9yPSJibGFjayIKICAgICAgICAgICAgICAgID5tZGktYWNjb3VudC1vdXRsaW5lPC92LWljb24+e3sgJHQoJ0FwcC5tZW51LnJvbGVzTWFuYWdlbWVudC5tc2cnKX19CiAgICAgICAgICAgICAgPC92LWxpc3QtaXRlbS10aXRsZT4KICAgICAgICAgICAgPC92LWxpc3QtaXRlbT4KICAgICAgICAgIDwvdGVtcGxhdGU+CiAgICAgICAgICA8c3Bhbj57eyAkdCgnQXBwLm1lbnUucm9sZXNNYW5hZ2VtZW50LnRvb2x0aXAnKX19PC9zcGFuPgogICAgICAgIDwvdi10b29sdGlwPgogICAgICA8L3YtbGlzdD4KICAgICAgPHYtbGlzdCBjbGFzcz0ibGFzdE1lbnUiPgogICAgICAgIDx2LWxpc3QtaXRlbSB0bz0iY2hhbmdlUGFzc3dvcmQiPgogICAgICAgICAgPHYtbGlzdC1pdGVtLXRpdGxlIGNsYXNzPSJtZW51VGV4dCI+CiAgICAgICAgICAgIDx2LWljb24KICAgICAgICAgICAgICBsZWZ0CiAgICAgICAgICAgICAgY29sb3I9ImJsYWNrIgogICAgICAgICAgICA+bWRpLWFjY291bnQtb3V0bGluZTwvdi1pY29uPnt7ICR0KCdBcHAubWVudS5jaGFuZ2VQYXNzd29yZC5tc2cnKX19CiAgICAgICAgICA8L3YtbGlzdC1pdGVtLXRpdGxlPgogICAgICAgIDwvdi1saXN0LWl0ZW0+CiAgICAgIDwvdi1saXN0PgogICAgPC91bD4KICA8L2xpPgogIDxsaSBjbGFzcz0icGFyZW50Ij4KICAgIDx2LWxpc3QtaXRlbQogICAgICB0bz0iY29uZmlndXJlIgogICAgICB2LWlmPSchJHN0b3JlLnN0YXRlLmRlbnlBY2Nlc3MnCiAgICAgIGNsYXNzPSJuZXdDbGFzcyIKICAgID4KICAgICAgPHYtaWNvbj5tZGktY29nPC92LWljb24+IHt7ICR0KCdBcHAubWVudS5jb25maWd1cmUubXNnJykgfX0KICAgIDwvdi1saXN0LWl0ZW0+CiAgPC9saT4KICA8bGkgY2xhc3M9InBhcmVudCI+CiAgICA8di1saXN0LWl0ZW0KICAgICAgdG89ImxvZ291dCIKICAgICAgdi1vbj0ib24iCiAgICAgIHYtaWY9JyEkc3RvcmUuc3RhdGUuZGVueUFjY2VzcyAmJiAhJHN0b3JlLnN0YXRlLmNvbmZpZy5nZW5lcmFsQ29uZmlnLmF1dGhEaXNhYmxlZCcKICAgICAgY2xhc3M9Im5ld0NsYXNzIgogICAgPgogICAgICA8di1saXN0LWl0ZW0tdGl0bGU+CiAgICAgICAgPHYtaWNvbj5tZGktbG9nb3V0PC92LWljb24+IHt7ICR0KCdBcHAubWVudS5sb2dvdXQubXNnJykgfX0KICAgICAgPC92LWxpc3QtaXRlbS10aXRsZT4KICAgIDwvdi1saXN0LWl0ZW0+CiAgPC9saT4KPC91bD4K"},null]}