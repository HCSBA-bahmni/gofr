{"remainingRequest":"/home/ally/gofr2/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ally/gofr2/src/components/menu.vue?vue&type=template&id=a380d422&scoped=true&","dependencies":[{"path":"/home/ally/gofr2/src/components/menu.vue","mtime":1618998441291},{"path":"/home/ally/gofr2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ally/gofr2/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/ally/gofr2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ally/gofr2/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Cjx1bCBpZD0ibWVudSI+CiAgPGxpIGNsYXNzPSJwYXJlbnQiPjxhIGhyZWY9IiMiPgogICAgICA8di1pY29uPnNwZWxsY2hlY2s8L3YtaWNvbj4ge3skdCgnQXBwLm1lbnUuZmFjaWxpdHlSZWNvbi5tc2cnKX19CiAgICA8L2E+CiAgICA8dWwgY2xhc3M9ImNoaWxkIj4KICAgICAgPGxpIGNsYXNzPSJwYXJlbnQiPgogICAgICAgIDxhCiAgICAgICAgICBocmVmPSIjIgogICAgICAgICAgc3R5bGU9Im1hcmdpbi1sZWZ0OiAxNXB4IgogICAgICAgID4KICAgICAgICAgIDx2LWljb24KICAgICAgICAgICAgY29sb3I9ImJsYWNrIgogICAgICAgICAgICBsZWZ0CiAgICAgICAgICA+c3luYzwvdi1pY29uPnt7ICR0KCdBcHAubWVudS5kYXRhU291cmNlc1BhcmVudC5tc2cnKX19IDx2LWljb24KICAgICAgICAgICAgY29sb3I9ImJsYWNrIgogICAgICAgICAgICBzbWFsbAogICAgICAgICAgICBjbGFzcz0ibWVudUFycm93IgogICAgICAgICAgPnBsYXlfYXJyb3c8L3YtaWNvbj4KICAgICAgICA8L2E+CiAgICAgICAgPHVsIGNsYXNzPSJjaGlsZCI+CiAgICAgICAgICA8di1saXN0IGNsYXNzPSJsYXN0TWVudSI+CiAgICAgICAgICAgIDx2LXRvb2x0aXAgcmlnaHQ+CiAgICAgICAgICAgICAgPHYtbGlzdC10aWxlCiAgICAgICAgICAgICAgICB0bz0iQWRkRGF0YVNvdXJjZXMiCiAgICAgICAgICAgICAgICBzbG90PSJhY3RpdmF0b3IiCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPHYtbGlzdC10aWxlLXRpdGxlIGNsYXNzPSJtZW51VGV4dCI+CiAgICAgICAgICAgICAgICAgIDx2LWljb24KICAgICAgICAgICAgICAgICAgICBsZWZ0CiAgICAgICAgICAgICAgICAgICAgY29sb3I9ImJsYWNrIgogICAgICAgICAgICAgICAgICA+Y2xvdWRfdXBsb2FkPC92LWljb24+CiAgICAgICAgICAgICAgICAgIHt7ICR0KCdBcHAubWVudS5hZGREYXRhU291cmNlcy5tc2cnKX19CiAgICAgICAgICAgICAgICA8L3YtbGlzdC10aWxlLXRpdGxlPgogICAgICAgICAgICAgIDwvdi1saXN0LXRpbGU+CiAgICAgICAgICAgICAgPHNwYW4+e3sgJHQoJ0FwcC5tZW51LmFkZERhdGFTb3VyY2VzLnRvb2x0aXAnKX19PC9zcGFuPgogICAgICAgICAgICA8L3YtdG9vbHRpcD4KICAgICAgICAgIDwvdi1saXN0PgogICAgICAgICAgPHYtbGlzdCBjbGFzcz0ibGFzdE1lbnUiPgogICAgICAgICAgICA8di10b29sdGlwIHJpZ2h0PgogICAgICAgICAgICAgIDx2LWxpc3QtdGlsZQogICAgICAgICAgICAgICAgdG89IlZpZXdEYXRhU291cmNlcyIKICAgICAgICAgICAgICAgIHNsb3Q9ImFjdGl2YXRvciIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8di1saXN0LXRpbGUtdGl0bGUgY2xhc3M9Im1lbnVUZXh0Ij4KICAgICAgICAgICAgICAgICAgPHYtaWNvbgogICAgICAgICAgICAgICAgICAgIGxlZnQKICAgICAgICAgICAgICAgICAgICBjb2xvcj0iYmxhY2siCiAgICAgICAgICAgICAgICAgID5saXN0PC92LWljb24+e3sgJHQoJ0FwcC5tZW51LnZpZXdEYXRhU291cmNlcy5tc2cnKX19CiAgICAgICAgICAgICAgICA8L3YtbGlzdC10aWxlLXRpdGxlPgogICAgICAgICAgICAgIDwvdi1saXN0LXRpbGU+CiAgICAgICAgICAgICAgPHNwYW4+e3sgJHQoJ0FwcC5tZW51LnZpZXdEYXRhU291cmNlcy50b29sdGlwJyl9fTwvc3Bhbj4KICAgICAgICAgICAgPC92LXRvb2x0aXA+CiAgICAgICAgICA8L3YtbGlzdD4KICAgICAgICA8L3VsPgogICAgICA8L2xpPgogICAgICA8di1saXN0IDpjbGFzcz0ieyBkaXNhYmxlZE1lbnU6IE9iamVjdC5rZXlzKCRzdG9yZS5zdGF0ZS5hY3RpdmVQYWlyLnNvdXJjZTEpLmxlbmd0aD09PTAsbGFzdE1lbnU6IHRydWUgfSI+CiAgICAgICAgPHYtdG9vbHRpcCByaWdodD4KICAgICAgICAgIDx2LWxpc3QtdGlsZQogICAgICAgICAgICBzbG90PSJhY3RpdmF0b3IiCiAgICAgICAgICAgIHRvPSJ2aWV3IgogICAgICAgICAgICBjb2xvcj0id2hpdGUiCiAgICAgICAgICAgIDpkaXNhYmxlZD0iT2JqZWN0LmtleXMoJHN0b3JlLnN0YXRlLmFjdGl2ZVBhaXIuc291cmNlMSkubGVuZ3RoPT09MCIKICAgICAgICAgID4KICAgICAgICAgICAgPHYtbGlzdC10aWxlLXRpdGxlIGNsYXNzPSJtZW51VGV4dCI+CiAgICAgICAgICAgICAgPHYtaWNvbgogICAgICAgICAgICAgICAgbGVmdAogICAgICAgICAgICAgICAgY29sb3I9ImJsYWNrIgogICAgICAgICAgICAgID5saXN0PC92LWljb24+e3sgJHQoJ0FwcC5tZW51LnZpZXcubXNnJyl9fQogICAgICAgICAgICA8L3YtbGlzdC10aWxlLXRpdGxlPgogICAgICAgICAgPC92LWxpc3QtdGlsZT4KICAgICAgICAgIDxzcGFuPnt7ICR0KCdBcHAubWVudS52aWV3LnRvb2x0aXAnKSB9fTwvc3Bhbj4KICAgICAgICA8L3YtdG9vbHRpcD4KICAgICAgPC92LWxpc3Q+CiAgICAgIDxsaSBjbGFzcz0icGFyZW50Ij4KICAgICAgICA8YQogICAgICAgICAgaHJlZj0iIyIKICAgICAgICAgIHN0eWxlPSJtYXJnaW4tbGVmdDogMTVweCIKICAgICAgICA+CiAgICAgICAgICA8di1pY29uCiAgICAgICAgICAgIGxlZnQKICAgICAgICAgICAgY29sb3I9ImJsYWNrIgogICAgICAgICAgPmNvbXBhcmVfYXJyb3dzPC92LWljb24+e3sgJHQoJ0FwcC5tZW51LnJlY29uY2lsZS5tc2cnKX19IDx2LWljb24KICAgICAgICAgICAgY29sb3I9ImJsYWNrIgogICAgICAgICAgICBzbWFsbAogICAgICAgICAgICBjbGFzcz0ibWVudUFycm93IgogICAgICAgICAgPnBsYXlfYXJyb3c8L3YtaWNvbj4KICAgICAgICA8L2E+CiAgICAgICAgPHVsIGNsYXNzPSJjaGlsZCI+CiAgICAgICAgICA8di1saXN0IDpjbGFzcz0ieyBkaXNhYmxlZE1lbnU6ICRzdG9yZS5zdGF0ZS5kYXRhU291cmNlcy5sZW5ndGggPD0gMSB8fCAkc3RvcmUuc3RhdGUuZGF0YVNvdXJjZVBhaXJzLmxlbmd0aCA8PSAwLGxhc3RNZW51OiB0cnVlIH0iPgogICAgICAgICAgICA8di10b29sdGlwIHJpZ2h0PgogICAgICAgICAgICAgIDx2LWxpc3QtdGlsZQogICAgICAgICAgICAgICAgdG89ImRhdGFTb3VyY2VzUGFpciIKICAgICAgICAgICAgICAgIHNsb3Q9ImFjdGl2YXRvciIKICAgICAgICAgICAgICAgIDpkaXNhYmxlZD0iJHN0b3JlLnN0YXRlLmRhdGFTb3VyY2VzLmxlbmd0aCA8PSAxIHx8ICRzdG9yZS5zdGF0ZS5kYXRhU291cmNlUGFpcnMubGVuZ3RoIDw9IDAiCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPHYtbGlzdC10aWxlLXRpdGxlIGNsYXNzPSJtZW51VGV4dCI+CiAgICAgICAgICAgICAgICAgIDx2LWljb24KICAgICAgICAgICAgICAgICAgICBsZWZ0CiAgICAgICAgICAgICAgICAgICAgY29sb3I9ImJsYWNrIgogICAgICAgICAgICAgICAgICA+ZmlsdGVyXzI8L3YtaWNvbj57eyAkdCgnQXBwLm1lbnUuY3JlYXRlUGFpci5tc2cnKX19CiAgICAgICAgICAgICAgICA8L3YtbGlzdC10aWxlLXRpdGxlPgogICAgICAgICAgICAgIDwvdi1saXN0LXRpbGU+CiAgICAgICAgICAgICAgPHNwYW4+e3sgJHQoJ0FwcC5tZW51LmNyZWF0ZVBhaXIudG9vbHRpcCcpfX08L3NwYW4+CiAgICAgICAgICAgIDwvdi10b29sdGlwPgogICAgICAgICAgPC92LWxpc3Q+CiAgICAgICAgICA8di1saXN0IDpjbGFzcz0ieyBkaXNhYmxlZE1lbnU6IE9iamVjdC5rZXlzKCRzdG9yZS5zdGF0ZS5hY3RpdmVQYWlyLnNvdXJjZTEpLmxlbmd0aCA9PT0gMCxsYXN0TWVudTogdHJ1ZSB9Ij4KICAgICAgICAgICAgPHYtdG9vbHRpcCByaWdodD4KICAgICAgICAgICAgICA8di1saXN0LXRpbGUKICAgICAgICAgICAgICAgIHRvPSJzY29yZXMiCiAgICAgICAgICAgICAgICBzbG90PSJhY3RpdmF0b3IiCiAgICAgICAgICAgICAgICA6ZGlzYWJsZWQ9J09iamVjdC5rZXlzKCRzdG9yZS5zdGF0ZS5hY3RpdmVQYWlyLnNvdXJjZTEpLmxlbmd0aCA9PT0gMCcKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8di1saXN0LXRpbGUtdGl0bGUgY2xhc3M9Im1lbnVUZXh0Ij4KICAgICAgICAgICAgICAgICAgPHYtaWNvbgogICAgICAgICAgICAgICAgICAgIGxlZnQKICAgICAgICAgICAgICAgICAgICBjb2xvcj0iYmxhY2siCiAgICAgICAgICAgICAgICAgID5maW5kX2luX3BhZ2U8L3YtaWNvbj57eyAkdCgnQXBwLm1lbnUucmVjb25jaWxlLm1zZycpIH19CiAgICAgICAgICAgICAgICA8L3YtbGlzdC10aWxlLXRpdGxlPgogICAgICAgICAgICAgIDwvdi1saXN0LXRpbGU+CiAgICAgICAgICAgICAgPHNwYW4+e3sgJHQoJ0FwcC5tZW51LnJlY29uY2lsZS50b29sdGlwJykgfX08L3NwYW4+CiAgICAgICAgICAgIDwvdi10b29sdGlwPgogICAgICAgICAgPC92LWxpc3Q+CiAgICAgICAgICA8di1saXN0IDpjbGFzcz0ieyBkaXNhYmxlZE1lbnU6IE9iamVjdC5rZXlzKCRzdG9yZS5zdGF0ZS5hY3RpdmVQYWlyLnNvdXJjZTEpLmxlbmd0aD09PTAsbGFzdE1lbnU6IHRydWUgfSI+CiAgICAgICAgICAgIDx2LXRvb2x0aXAgcmlnaHQ+CiAgICAgICAgICAgICAgPHYtbGlzdC10aWxlCiAgICAgICAgICAgICAgICB0bz0icmVjb1N0YXR1cyIKICAgICAgICAgICAgICAgIHNsb3Q9ImFjdGl2YXRvciIKICAgICAgICAgICAgICAgIDpkaXNhYmxlZD0nT2JqZWN0LmtleXMoJHN0b3JlLnN0YXRlLmFjdGl2ZVBhaXIuc291cmNlMSkubGVuZ3RoID09PSAwJwogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDx2LWxpc3QtdGlsZS10aXRsZSBjbGFzcz0ibWVudVRleHQiPgogICAgICAgICAgICAgICAgICA8di1pY29uCiAgICAgICAgICAgICAgICAgICAgbGVmdAogICAgICAgICAgICAgICAgICAgIGNvbG9yPSJibGFjayIKICAgICAgICAgICAgICAgICAgPmRhc2hib2FyZDwvdi1pY29uPiB7eyAkdCgnQXBwLm1lbnUucmVjb1N0YXR1cy5tc2cnKSB9fQogICAgICAgICAgICAgICAgPC92LWxpc3QtdGlsZS10aXRsZT4KICAgICAgICAgICAgICA8L3YtbGlzdC10aWxlPgogICAgICAgICAgICAgIDxzcGFuPnt7ICR0KCdBcHAubWVudS5yZWNvU3RhdHVzLnRvb2x0aXAnKSB9fTwvc3Bhbj4KICAgICAgICAgICAgPC92LXRvb2x0aXA+CiAgICAgICAgICA8L3YtbGlzdD4KICAgICAgICA8L3VsPgogICAgICA8L2xpPgogICAgPC91bD4KICA8L2xpPgogIDxsaSBjbGFzcz0icGFyZW50Ij4KICAgIDxhIGhyZWY9IiMiPgogICAgICA8di1pY29uPmxvY2F0aW9uX29uPC92LWljb24+e3sgJHQoJ0FwcC5tZW51LmZhY2lsaXR5UmVnaXN0cnkubXNnJyl9fQogICAgPC9hPgogICAgPHVsIGNsYXNzPSJjaGlsZCI+CiAgICAgIDx2LWxpc3QKICAgICAgICBjbGFzcz0ibGFzdE1lbnUiCiAgICAgICAgdi1pZj0idGFza3NWZXJpZmljYXRpb24uY2FuQWRkKCdBZGRKdXJpc2RpY3Rpb24nKSIKICAgICAgPgogICAgICAgIDx2LXRvb2x0aXAgcmlnaHQ+CiAgICAgICAgICA8di1saXN0LXRpbGUKICAgICAgICAgICAgdG89IkFkZEp1cmlzZGljdGlvbiIKICAgICAgICAgICAgc2xvdD0iYWN0aXZhdG9yIgogICAgICAgICAgPgogICAgICAgICAgICA8di1saXN0LXRpbGUtdGl0bGUgY2xhc3M9Im1lbnVUZXh0Ij4KICAgICAgICAgICAgICA8di1pY29uCiAgICAgICAgICAgICAgICBsZWZ0CiAgICAgICAgICAgICAgICBjb2xvcj0iYmxhY2siCiAgICAgICAgICAgICAgPmhvbWVfd29yazwvdi1pY29uPnt7ICR0KCdBcHAubWVudS5hZGRKdXJpc2RpY3Rpb24ubXNnJyl9fQogICAgICAgICAgICA8L3YtbGlzdC10aWxlLXRpdGxlPgogICAgICAgICAgPC92LWxpc3QtdGlsZT4KICAgICAgICAgIDxzcGFuPnt7ICR0KCdBcHAubWVudS5hZGRKdXJpc2RpY3Rpb24udG9vbHRpcCcpfX08L3NwYW4+CiAgICAgICAgPC92LXRvb2x0aXA+CiAgICAgIDwvdi1saXN0PgogICAgICA8di1saXN0IGNsYXNzPSJsYXN0TWVudSI+CiAgICAgICAgPHYtdG9vbHRpcCByaWdodD4KICAgICAgICAgIDx2LWxpc3QtdGlsZQogICAgICAgICAgICB0bz0iQWRkRmFjaWxpdHlUZXN0IgogICAgICAgICAgICBzbG90PSJhY3RpdmF0b3IiCiAgICAgICAgICA+CiAgICAgICAgICAgIDx2LWxpc3QtdGlsZS10aXRsZSBjbGFzcz0ibWVudVRleHQiPgogICAgICAgICAgICAgIDx2LWljb24KICAgICAgICAgICAgICAgIGxlZnQKICAgICAgICAgICAgICAgIGNvbG9yPSJibGFjayIKICAgICAgICAgICAgICA+Y2xvdWRfdXBsb2FkPC92LWljb24+CiAgICAgICAgICAgICAgVGVzdCBBZGQgRmFjaWxpdHkKICAgICAgICAgICAgPC92LWxpc3QtdGlsZS10aXRsZT4KICAgICAgICAgIDwvdi1saXN0LXRpbGU+CiAgICAgICAgICA8c3Bhbj57eyAkdCgnQXBwLm1lbnUuYWRkRGF0YVNvdXJjZXMudG9vbHRpcCcpfX08L3NwYW4+CiAgICAgICAgPC92LXRvb2x0aXA+CiAgICAgIDwvdi1saXN0PgogICAgICA8di1saXN0CiAgICAgICAgY2xhc3M9Imxhc3RNZW51IgogICAgICAgIHYtaWY9InRhc2tzVmVyaWZpY2F0aW9uLmNhbkFkZCgnQWRkRmFjaWxpdHknKSIKICAgICAgPgogICAgICAgIDx2LXRvb2x0aXAgcmlnaHQ+CiAgICAgICAgICA8di1saXN0LXRpbGUKICAgICAgICAgICAgdG89IkFkZEZhY2lsaXR5IgogICAgICAgICAgICBzbG90PSJhY3RpdmF0b3IiCiAgICAgICAgICA+CiAgICAgICAgICAgIDx2LWxpc3QtdGlsZS10aXRsZSBjbGFzcz0ibWVudVRleHQiPgogICAgICAgICAgICAgIDx2LWljb24KICAgICAgICAgICAgICAgIGxlZnQKICAgICAgICAgICAgICAgIGNvbG9yPSJibGFjayIKICAgICAgICAgICAgICA+aG91c2U8L3YtaWNvbj57eyAkdCgnQXBwLm1lbnUuYWRkRmFjaWxpdHkubXNnJyl9fQogICAgICAgICAgICA8L3YtbGlzdC10aWxlLXRpdGxlPgogICAgICAgICAgPC92LWxpc3QtdGlsZT4KICAgICAgICAgIDxzcGFuPnt7ICR0KCdBcHAubWVudS5hZGRGYWNpbGl0eS50b29sdGlwJyl9fTwvc3Bhbj4KICAgICAgICA8L3YtdG9vbHRpcD4KICAgICAgPC92LWxpc3Q+CiAgICAgIDx2LWxpc3QKICAgICAgICBjbGFzcz0ibGFzdE1lbnUiCiAgICAgICAgdi1pZj0idGFza3NWZXJpZmljYXRpb24uY2FuQWRkKCdBZGRTZXJ2aWNlJykiCiAgICAgID4KICAgICAgICA8di10b29sdGlwIHJpZ2h0PgogICAgICAgICAgPHYtbGlzdC10aWxlCiAgICAgICAgICAgIHRvPSJBZGRTZXJ2aWNlIgogICAgICAgICAgICBzbG90PSJhY3RpdmF0b3IiCiAgICAgICAgICA+CiAgICAgICAgICAgIDx2LWxpc3QtdGlsZS10aXRsZSBjbGFzcz0ibWVudVRleHQiPgogICAgICAgICAgICAgIDx2LWljb24KICAgICAgICAgICAgICAgIGxlZnQKICAgICAgICAgICAgICAgIGNvbG9yPSJibGFjayIKICAgICAgICAgICAgICA+cm9vbV9zZXJ2aWNlPC92LWljb24+e3sgJHQoJ0FwcC5tZW51LmFkZFNlcnZpY2UubXNnJyl9fQogICAgICAgICAgICA8L3YtbGlzdC10aWxlLXRpdGxlPgogICAgICAgICAgPC92LWxpc3QtdGlsZT4KICAgICAgICAgIDxzcGFuPnt7ICR0KCdBcHAubWVudS5hZGRTZXJ2aWNlLnRvb2x0aXAnKX19PC9zcGFuPgogICAgICAgIDwvdi10b29sdGlwPgogICAgICA8L3YtbGlzdD4KICAgICAgPGxpCiAgICAgICAgY2xhc3M9InBhcmVudCIKICAgICAgICB2LWlmPSJ0YXNrc1ZlcmlmaWNhdGlvbi5jYW5BZGQoJ0FkZENvZGVTeXN0ZW0nKSIKICAgICAgPgogICAgICAgIDxhCiAgICAgICAgICBocmVmPSIjIgogICAgICAgICAgc3R5bGU9Im1hcmdpbi1sZWZ0OiAxNXB4IgogICAgICAgID4KICAgICAgICAgIDx2LWljb24KICAgICAgICAgICAgbGVmdAogICAgICAgICAgICBjb2xvcj0iYmxhY2siCiAgICAgICAgICA+YWRkPC92LWljb24+CiAgICAgICAgICB7eyAkdCgnQXBwLm1lbnUuaGVhbHRoU2VydmljZVRlcm1pbm9sb2dpZXMubXNnJyl9fQogICAgICAgICAgPHYtaWNvbgogICAgICAgICAgICBjb2xvcj0iYmxhY2siCiAgICAgICAgICAgIHNtYWxsCiAgICAgICAgICAgIGNsYXNzPSJtZW51QXJyb3ciCiAgICAgICAgICA+cGxheV9hcnJvdzwvdi1pY29uPgogICAgICAgIDwvYT4KICAgICAgICA8dWwgY2xhc3M9ImNoaWxkIj4KICAgICAgICAgIDx2LWxpc3QgY2xhc3M9Imxhc3RNZW51Ij4KICAgICAgICAgICAgPHYtdG9vbHRpcCByaWdodD4KICAgICAgICAgICAgICA8di1saXN0LXRpbGUKICAgICAgICAgICAgICAgIHRvPSIvQWRkQ29kZVN5c3RlbT90eXBlPXNlcnZpY2VDYXRlZ29yaWVzJmRpc3BsYXlUZXh0PVNlcnZpY2UgQ2F0ZWdvcmllIgogICAgICAgICAgICAgICAgc2xvdD0iYWN0aXZhdG9yIgogICAgICAgICAgICAgICAgdi1pZj0idGFza3NWZXJpZmljYXRpb24uY2FuQWRkKCdBZGRDb2RlU3lzdGVtJykiCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPHYtbGlzdC10aWxlLXRpdGxlIGNsYXNzPSJtZW51VGV4dCI+CiAgICAgICAgICAgICAgICAgIDx2LWljb24KICAgICAgICAgICAgICAgICAgICBsZWZ0CiAgICAgICAgICAgICAgICAgICAgY29sb3I9ImJsYWNrIgogICAgICAgICAgICAgICAgICA+YWRkPC92LWljb24+e3sgJHQoJ0FwcC5tZW51LmFkZFNlcnZpY2VDYXRlZ29yeS5tc2cnKX19CiAgICAgICAgICAgICAgICA8L3YtbGlzdC10aWxlLXRpdGxlPgogICAgICAgICAgICAgIDwvdi1saXN0LXRpbGU+CiAgICAgICAgICAgICAgPHNwYW4+e3sgJHQoJ0FwcC5tZW51LmFkZFNlcnZpY2VDYXRlZ29yeS50b29sdGlwJyl9fTwvc3Bhbj4KICAgICAgICAgICAgPC92LXRvb2x0aXA+CiAgICAgICAgICA8L3YtbGlzdD4KICAgICAgICAgIDx2LWxpc3QgY2xhc3M9Imxhc3RNZW51Ij4KICAgICAgICAgICAgPHYtdG9vbHRpcCByaWdodD4KICAgICAgICAgICAgICA8di1saXN0LXRpbGUKICAgICAgICAgICAgICAgIHRvPSIvQWRkQ29kZVN5c3RlbT90eXBlPXNlcnZpY2VUeXBlcyZkaXNwbGF5VGV4dD1TZXJ2aWNlIFR5cGUiCiAgICAgICAgICAgICAgICBzbG90PSJhY3RpdmF0b3IiCiAgICAgICAgICAgICAgICB2LWlmPSJ0YXNrc1ZlcmlmaWNhdGlvbi5jYW5BZGQoJ0FkZENvZGVTeXN0ZW0nKSIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8di1saXN0LXRpbGUtdGl0bGUgY2xhc3M9Im1lbnVUZXh0Ij4KICAgICAgICAgICAgICAgICAgPHYtaWNvbgogICAgICAgICAgICAgICAgICAgIGxlZnQKICAgICAgICAgICAgICAgICAgICBjb2xvcj0iYmxhY2siCiAgICAgICAgICAgICAgICAgID5hZGQ8L3YtaWNvbj57eyAkdCgnQXBwLm1lbnUuYWRkU2VydmljZVR5cGUubXNnJyl9fQogICAgICAgICAgICAgICAgPC92LWxpc3QtdGlsZS10aXRsZT4KICAgICAgICAgICAgICA8L3YtbGlzdC10aWxlPgogICAgICAgICAgICAgIDxzcGFuPnt7ICR0KCdBcHAubWVudS5hZGRTZXJ2aWNlVHlwZS50b29sdGlwJyl9fTwvc3Bhbj4KICAgICAgICAgICAgPC92LXRvb2x0aXA+CiAgICAgICAgICA8L3YtbGlzdD4KICAgICAgICAgIDx2LWxpc3QgY2xhc3M9Imxhc3RNZW51Ij4KICAgICAgICAgICAgPHYtdG9vbHRpcCByaWdodD4KICAgICAgICAgICAgICA8di1saXN0LXRpbGUKICAgICAgICAgICAgICAgIHRvPSIvQWRkQ29kZVN5c3RlbT90eXBlPXNwZWNpYWx0aWVzJmRpc3BsYXlUZXh0PVNwZWNpYWx0eSIKICAgICAgICAgICAgICAgIHNsb3Q9ImFjdGl2YXRvciIKICAgICAgICAgICAgICAgIHYtaWY9InRhc2tzVmVyaWZpY2F0aW9uLmNhbkFkZCgnQWRkQ29kZVN5c3RlbScpIgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDx2LWxpc3QtdGlsZS10aXRsZSBjbGFzcz0ibWVudVRleHQiPgogICAgICAgICAgICAgICAgICA8di1pY29uCiAgICAgICAgICAgICAgICAgICAgbGVmdAogICAgICAgICAgICAgICAgICAgIGNvbG9yPSJibGFjayIKICAgICAgICAgICAgICAgICAgPmFkZDwvdi1pY29uPnt7ICR0KCdBcHAubWVudS5hZGRTZXJ2aWNlU3BlY2lhbHR5Lm1zZycpfX0KICAgICAgICAgICAgICAgIDwvdi1saXN0LXRpbGUtdGl0bGU+CiAgICAgICAgICAgICAgPC92LWxpc3QtdGlsZT4KICAgICAgICAgICAgICA8c3Bhbj57eyAkdCgnQXBwLm1lbnUuYWRkU2VydmljZVNwZWNpYWx0eS50b29sdGlwJyl9fTwvc3Bhbj4KICAgICAgICAgICAgPC92LXRvb2x0aXA+CiAgICAgICAgICA8L3YtbGlzdD4KICAgICAgICAgIDx2LWxpc3QgY2xhc3M9Imxhc3RNZW51Ij4KICAgICAgICAgICAgPHYtdG9vbHRpcCByaWdodD4KICAgICAgICAgICAgICA8di1saXN0LXRpbGUKICAgICAgICAgICAgICAgIHRvPSIvQWRkQ29kZVN5c3RlbT90eXBlPXNlcnZpY2VFbGlnaWJpbGl0aWVzJmRpc3BsYXlUZXh0PVNlcnZpY2UgRWxpZ2liaWxpdHkiCiAgICAgICAgICAgICAgICBzbG90PSJhY3RpdmF0b3IiCiAgICAgICAgICAgICAgICB2LWlmPSJ0YXNrc1ZlcmlmaWNhdGlvbi5jYW5BZGQoJ0FkZENvZGVTeXN0ZW0nKSIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8di1saXN0LXRpbGUtdGl0bGUgY2xhc3M9Im1lbnVUZXh0Ij4KICAgICAgICAgICAgICAgICAgPHYtaWNvbgogICAgICAgICAgICAgICAgICAgIGxlZnQKICAgICAgICAgICAgICAgICAgICBjb2xvcj0iYmxhY2siCiAgICAgICAgICAgICAgICAgID5hZGQ8L3YtaWNvbj57eyAkdCgnQXBwLm1lbnUuYWRkU2VydmljZUVsaWdpYmlsaXR5Lm1zZycpfX0KICAgICAgICAgICAgICAgIDwvdi1saXN0LXRpbGUtdGl0bGU+CiAgICAgICAgICAgICAgPC92LWxpc3QtdGlsZT4KICAgICAgICAgICAgICA8c3Bhbj57eyAkdCgnQXBwLm1lbnUuYWRkU2VydmljZUVsaWdpYmlsaXR5LnRvb2x0aXAnKX19PC9zcGFuPgogICAgICAgICAgICA8L3YtdG9vbHRpcD4KICAgICAgICAgIDwvdi1saXN0PgogICAgICAgICAgPHYtbGlzdCBjbGFzcz0ibGFzdE1lbnUiPgogICAgICAgICAgICA8di10b29sdGlwIHJpZ2h0PgogICAgICAgICAgICAgIDx2LWxpc3QtdGlsZQogICAgICAgICAgICAgICAgdG89Ii9BZGRDb2RlU3lzdGVtP3R5cGU9bGFuZ3VhZ2VzJmRpc3BsYXlUZXh0PUxhbmd1YWdlIgogICAgICAgICAgICAgICAgc2xvdD0iYWN0aXZhdG9yIgogICAgICAgICAgICAgICAgdi1pZj0idGFza3NWZXJpZmljYXRpb24uY2FuQWRkKCdBZGRDb2RlU3lzdGVtJykiCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPHYtbGlzdC10aWxlLXRpdGxlIGNsYXNzPSJtZW51VGV4dCI+CiAgICAgICAgICAgICAgICAgIDx2LWljb24KICAgICAgICAgICAgICAgICAgICBsZWZ0CiAgICAgICAgICAgICAgICAgICAgY29sb3I9ImJsYWNrIgogICAgICAgICAgICAgICAgICA+YWRkPC92LWljb24+e3sgJHQoJ0FwcC5tZW51LmFkZExhbmd1YWdlLm1zZycpfX0KICAgICAgICAgICAgICAgIDwvdi1saXN0LXRpbGUtdGl0bGU+CiAgICAgICAgICAgICAgPC92LWxpc3QtdGlsZT4KICAgICAgICAgICAgICA8c3Bhbj57eyAkdCgnQXBwLm1lbnUuYWRkTGFuZ3VhZ2UudG9vbHRpcCcpfX08L3NwYW4+CiAgICAgICAgICAgIDwvdi10b29sdGlwPgogICAgICAgICAgPC92LWxpc3Q+CiAgICAgICAgICA8di1saXN0IGNsYXNzPSJsYXN0TWVudSI+CiAgICAgICAgICAgIDx2LXRvb2x0aXAgcmlnaHQ+CiAgICAgICAgICAgICAgPHYtbGlzdC10aWxlCiAgICAgICAgICAgICAgICB0bz0iL0FkZENvZGVTeXN0ZW0/dHlwZT1yZWZlcnJhbE1ldGhvZHMmZGlzcGxheVRleHQ9UmVmZXJyYWwgTWV0aG9kcyIKICAgICAgICAgICAgICAgIHNsb3Q9ImFjdGl2YXRvciIKICAgICAgICAgICAgICAgIHYtaWY9InRhc2tzVmVyaWZpY2F0aW9uLmNhbkFkZCgnQWRkQ29kZVN5c3RlbScpIgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDx2LWxpc3QtdGlsZS10aXRsZSBjbGFzcz0ibWVudVRleHQiPgogICAgICAgICAgICAgICAgICA8di1pY29uCiAgICAgICAgICAgICAgICAgICAgbGVmdAogICAgICAgICAgICAgICAgICAgIGNvbG9yPSJibGFjayIKICAgICAgICAgICAgICAgICAgPmFkZDwvdi1pY29uPnt7ICR0KCdBcHAubWVudS5hZGRSZWZlcnJhbE1ldGhvZC5tc2cnKX19CiAgICAgICAgICAgICAgICA8L3YtbGlzdC10aWxlLXRpdGxlPgogICAgICAgICAgICAgIDwvdi1saXN0LXRpbGU+CiAgICAgICAgICAgICAgPHNwYW4+e3sgJHQoJ0FwcC5tZW51LmFkZFJlZmVycmFsTWV0aG9kLnRvb2x0aXAnKX19PC9zcGFuPgogICAgICAgICAgICA8L3YtdG9vbHRpcD4KICAgICAgICAgIDwvdi1saXN0PgogICAgICAgICAgPHYtbGlzdCBjbGFzcz0ibGFzdE1lbnUiPgogICAgICAgICAgICA8di10b29sdGlwIHJpZ2h0PgogICAgICAgICAgICAgIDx2LWxpc3QtdGlsZQogICAgICAgICAgICAgICAgdG89Ii9BZGRDb2RlU3lzdGVtP3R5cGU9cHJvZ3JhbXMmZGlzcGxheVRleHQ9UHJvZ3JhbSIKICAgICAgICAgICAgICAgIHNsb3Q9ImFjdGl2YXRvciIKICAgICAgICAgICAgICAgIHYtaWY9InRhc2tzVmVyaWZpY2F0aW9uLmNhbkFkZCgnQWRkQ29kZVN5c3RlbScpIgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDx2LWxpc3QtdGlsZS10aXRsZSBjbGFzcz0ibWVudVRleHQiPgogICAgICAgICAgICAgICAgICA8di1pY29uCiAgICAgICAgICAgICAgICAgICAgbGVmdAogICAgICAgICAgICAgICAgICAgIGNvbG9yPSJibGFjayIKICAgICAgICAgICAgICAgICAgPmFkZDwvdi1pY29uPnt7ICR0KCdBcHAubWVudS5hZGRQcm9ncmFtLm1zZycpfX0KICAgICAgICAgICAgICAgIDwvdi1saXN0LXRpbGUtdGl0bGU+CiAgICAgICAgICAgICAgPC92LWxpc3QtdGlsZT4KICAgICAgICAgICAgICA8c3Bhbj57eyAkdCgnQXBwLm1lbnUuYWRkUHJvZ3JhbS50b29sdGlwJyl9fTwvc3Bhbj4KICAgICAgICAgICAgPC92LXRvb2x0aXA+CiAgICAgICAgICA8L3YtbGlzdD4KICAgICAgICAgIDx2LWxpc3QgY2xhc3M9Imxhc3RNZW51Ij4KICAgICAgICAgICAgPHYtdG9vbHRpcCByaWdodD4KICAgICAgICAgICAgICA8di1saXN0LXRpbGUKICAgICAgICAgICAgICAgIHRvPSIvQWRkQ29kZVN5c3RlbT90eXBlPXNlcnZpY2VDaGFyYWN0ZXJpc3RpY3MmZGlzcGxheVRleHQ9U2VydmljZSBDaGFyYWN0ZXJpc3RpY3MiCiAgICAgICAgICAgICAgICBzbG90PSJhY3RpdmF0b3IiCiAgICAgICAgICAgICAgICB2LWlmPSJ0YXNrc1ZlcmlmaWNhdGlvbi5jYW5BZGQoJ0FkZENvZGVTeXN0ZW0nKSIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8di1saXN0LXRpbGUtdGl0bGUgY2xhc3M9Im1lbnVUZXh0Ij4KICAgICAgICAgICAgICAgICAgPHYtaWNvbgogICAgICAgICAgICAgICAgICAgIGxlZnQKICAgICAgICAgICAgICAgICAgICBjb2xvcj0iYmxhY2siCiAgICAgICAgICAgICAgICAgID5hZGQ8L3YtaWNvbj57eyAkdCgnQXBwLm1lbnUuYWRkQ2hhcmFjdGVyaXN0aWMubXNnJyl9fQogICAgICAgICAgICAgICAgPC92LWxpc3QtdGlsZS10aXRsZT4KICAgICAgICAgICAgICA8L3YtbGlzdC10aWxlPgogICAgICAgICAgICAgIDxzcGFuPnt7ICR0KCdBcHAubWVudS5hZGRDaGFyYWN0ZXJpc3RpYy50b29sdGlwJyl9fTwvc3Bhbj4KICAgICAgICAgICAgPC92LXRvb2x0aXA+CiAgICAgICAgICA8L3YtbGlzdD4KICAgICAgICAgIDx2LWxpc3QgY2xhc3M9Imxhc3RNZW51Ij4KICAgICAgICAgICAgPHYtdG9vbHRpcCByaWdodD4KICAgICAgICAgICAgICA8di1saXN0LXRpbGUKICAgICAgICAgICAgICAgIHRvPSIvQWRkQ29kZVN5c3RlbT90eXBlPXNlcnZpY2VQcm92aXNpb25Db25kaXRpb25zJmRpc3BsYXlUZXh0PVNlcnZpY2UgUHJvdmlzaW9uIENvbmRpdGlvbiIKICAgICAgICAgICAgICAgIHNsb3Q9ImFjdGl2YXRvciIKICAgICAgICAgICAgICAgIHYtaWY9InRhc2tzVmVyaWZpY2F0aW9uLmNhbkFkZCgnQWRkQ29kZVN5c3RlbScpIgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDx2LWxpc3QtdGlsZS10aXRsZSBjbGFzcz0ibWVudVRleHQiPgogICAgICAgICAgICAgICAgICA8di1pY29uCiAgICAgICAgICAgICAgICAgICAgbGVmdAogICAgICAgICAgICAgICAgICAgIGNvbG9yPSJibGFjayIKICAgICAgICAgICAgICAgICAgPmFkZDwvdi1pY29uPnt7ICR0KCdBcHAubWVudS5hZGRTZXJ2aWNlUHJvdmlzaW9uQ29uZGl0aW9uLm1zZycpfX0KICAgICAgICAgICAgICAgIDwvdi1saXN0LXRpbGUtdGl0bGU+CiAgICAgICAgICAgICAgPC92LWxpc3QtdGlsZT4KICAgICAgICAgICAgICA8c3Bhbj57eyAkdCgnQXBwLm1lbnUuYWRkU2VydmljZVByb3Zpc2lvbkNvbmRpdGlvbi50b29sdGlwJyl9fTwvc3Bhbj4KICAgICAgICAgICAgPC92LXRvb2x0aXA+CiAgICAgICAgICA8L3YtbGlzdD4KICAgICAgICA8L3VsPgogICAgICA8L2xpPgogICAgICA8bGkgY2xhc3M9InBhcmVudCI+CiAgICAgICAgPGEgaHJlZj0iIyI+CiAgICAgICAgICA8di1pY29uCiAgICAgICAgICAgIGxlZnQKICAgICAgICAgICAgY29sb3I9ImJsYWNrIgogICAgICAgICAgPmNhbGxfbWFkZTwvdi1pY29uPgogICAgICAgICAge3sgJHQoJ0FwcC5tZW51LmZhY2lsaXR5UmVxdWVzdHMubXNnJyl9fQogICAgICAgICAgPHYtaWNvbgogICAgICAgICAgICBjb2xvcj0iYmxhY2siCiAgICAgICAgICAgIHNtYWxsCiAgICAgICAgICAgIGNsYXNzPSJtZW51QXJyb3ciCiAgICAgICAgICA+cGxheV9hcnJvdzwvdi1pY29uPgogICAgICAgIDwvYT4KICAgICAgICA8dWwgY2xhc3M9ImNoaWxkIj4KICAgICAgICAgIDx2LWxpc3QgY2xhc3M9Imxhc3RNZW51Ij4KICAgICAgICAgICAgPHYtdG9vbHRpcCByaWdodD4KICAgICAgICAgICAgICA8di1saXN0LXRpbGUKICAgICAgICAgICAgICAgIHYtaWY9InRhc2tzVmVyaWZpY2F0aW9uLmNhbkFkZCgnUmVxdWVzdEJ1aWxkaW5nQWRkaXRpb24nKSIKICAgICAgICAgICAgICAgIHRvPSJSZXF1ZXN0QnVpbGRpbmdBZGRpdGlvbiIKICAgICAgICAgICAgICAgIHNsb3Q9ImFjdGl2YXRvciIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8di1saXN0LXRpbGUtdGl0bGUgY2xhc3M9Im1lbnVUZXh0Ij4KICAgICAgICAgICAgICAgICAgPHYtaWNvbgogICAgICAgICAgICAgICAgICAgIGxlZnQKICAgICAgICAgICAgICAgICAgICBjb2xvcj0iYmxhY2siCiAgICAgICAgICAgICAgICAgID5jYWxsX21hZGU8L3YtaWNvbj57eyAkdCgnQXBwLm1lbnUucmVxdWVzdE5ld0ZhY2lsaXR5Lm1zZycpfX0KICAgICAgICAgICAgICAgIDwvdi1saXN0LXRpbGUtdGl0bGU+CiAgICAgICAgICAgICAgPC92LWxpc3QtdGlsZT4KICAgICAgICAgICAgICA8c3Bhbj57eyAkdCgnQXBwLm1lbnUucmVxdWVzdE5ld0ZhY2lsaXR5LnRvb2x0aXAnKX19PC9zcGFuPgogICAgICAgICAgICA8L3YtdG9vbHRpcD4KICAgICAgICAgIDwvdi1saXN0PgogICAgICAgICAgPHYtbGlzdCBjbGFzcz0ibGFzdE1lbnUiPgogICAgICAgICAgICA8di10b29sdGlwIHJpZ2h0PgogICAgICAgICAgICAgIDx2LWxpc3QtdGlsZQogICAgICAgICAgICAgICAgdi1pZj0idGFza3NWZXJpZmljYXRpb24uY2FuQWRkKCdSZXF1ZXN0VXBkYXRlQnVpbGRpbmdEZXRhaWxzJykiCiAgICAgICAgICAgICAgICB0bz0iUmVxdWVzdFVwZGF0ZUJ1aWxkaW5nRGV0YWlscyIKICAgICAgICAgICAgICAgIHNsb3Q9ImFjdGl2YXRvciIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8di1saXN0LXRpbGUtdGl0bGUgY2xhc3M9Im1lbnVUZXh0Ij4KICAgICAgICAgICAgICAgICAgPHYtaWNvbgogICAgICAgICAgICAgICAgICAgIGxlZnQKICAgICAgICAgICAgICAgICAgICBjb2xvcj0iYmxhY2siCiAgICAgICAgICAgICAgICAgID5jYWxsX21hZGU8L3YtaWNvbj57eyAkdCgnQXBwLm1lbnUucmVxdWVzdFVwZGF0ZUZhY2lsaXR5Lm1zZycpfX0KICAgICAgICAgICAgICAgIDwvdi1saXN0LXRpbGUtdGl0bGU+CiAgICAgICAgICAgICAgPC92LWxpc3QtdGlsZT4KICAgICAgICAgICAgICA8c3Bhbj57eyAkdCgnQXBwLm1lbnUucmVxdWVzdFVwZGF0ZUZhY2lsaXR5LnRvb2x0aXAnKX19PC9zcGFuPgogICAgICAgICAgICA8L3YtdG9vbHRpcD4KICAgICAgICAgIDwvdi1saXN0PgogICAgICAgIDwvdWw+CiAgICAgIDwvbGk+CgogICAgICA8bGkgY2xhc3M9InBhcmVudCI+CiAgICAgICAgPGEgaHJlZj0iIyI+CiAgICAgICAgICA8di1pY29uCiAgICAgICAgICAgIGxlZnQKICAgICAgICAgICAgY29sb3I9ImJsYWNrIgogICAgICAgICAgPmxpc3Q8L3YtaWNvbj4KICAgICAgICAgIHt7ICR0KCdBcHAubWVudS5mYWNpbGl0eVJlZ1JlcG9ydHMubXNnJyl9fQogICAgICAgICAgPHYtaWNvbgogICAgICAgICAgICBjb2xvcj0iYmxhY2siCiAgICAgICAgICAgIHNtYWxsCiAgICAgICAgICAgIGNsYXNzPSJtZW51QXJyb3ciCiAgICAgICAgICA+cGxheV9hcnJvdzwvdi1pY29uPgogICAgICAgIDwvYT4KICAgICAgICA8dWwgY2xhc3M9ImNoaWxkIj4KICAgICAgICAgIDx2LWxpc3QKICAgICAgICAgICAgY2xhc3M9Imxhc3RNZW51IgogICAgICAgICAgICB2LWlmPSJ0YXNrc1ZlcmlmaWNhdGlvbi5jYW5WaWV3KCdGYWNpbGl0aWVzUmVwb3J0JykiCiAgICAgICAgICA+CiAgICAgICAgICAgIDx2LWxpc3QtdGlsZSB0bz0iRmFjaWxpdGllc1JlcG9ydCI+CiAgICAgICAgICAgICAgPHYtbGlzdC10aWxlLXRpdGxlIGNsYXNzPSJtZW51VGV4dCI+CiAgICAgICAgICAgICAgICA8di1pY29uCiAgICAgICAgICAgICAgICAgIGxlZnQKICAgICAgICAgICAgICAgICAgY29sb3I9ImJsYWNrIgogICAgICAgICAgICAgICAgPmxpc3Q8L3YtaWNvbj57eyAkdCgnQXBwLm1lbnUuZmFjaWxpdGllc1JlcG9ydC5tc2cnKX19CiAgICAgICAgICAgICAgPC92LWxpc3QtdGlsZS10aXRsZT4KICAgICAgICAgICAgPC92LWxpc3QtdGlsZT4KICAgICAgICAgIDwvdi1saXN0PgogICAgICAgICAgPHYtbGlzdAogICAgICAgICAgICBjbGFzcz0ibGFzdE1lbnUiCiAgICAgICAgICAgIHYtaWY9InRhc2tzVmVyaWZpY2F0aW9uLmNhblZpZXcoJ05ld0ZhY2lsaXRpZXNSZXF1ZXN0c1JlcG9ydCcpIgogICAgICAgICAgPgogICAgICAgICAgICA8di10b29sdGlwIHJpZ2h0PgogICAgICAgICAgICAgIDx2LWxpc3QtdGlsZQogICAgICAgICAgICAgICAgdG89Ik5ld0ZhY2lsaXRpZXNSZXF1ZXN0c1JlcG9ydCIKICAgICAgICAgICAgICAgIHNsb3Q9ImFjdGl2YXRvciIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8di1saXN0LXRpbGUtdGl0bGUgY2xhc3M9Im1lbnVUZXh0Ij4KICAgICAgICAgICAgICAgICAgPHYtaWNvbgogICAgICAgICAgICAgICAgICAgIGxlZnQKICAgICAgICAgICAgICAgICAgICBjb2xvcj0iYmxhY2siCiAgICAgICAgICAgICAgICAgID5saXN0PC92LWljb24+e3sgJHQoJ0FwcC5tZW51Lm5ld0ZhY2lsaXRpZXNSZXF1ZXN0c1JlcG9ydC5tc2cnKX19CiAgICAgICAgICAgICAgICA8L3YtbGlzdC10aWxlLXRpdGxlPgogICAgICAgICAgICAgIDwvdi1saXN0LXRpbGU+CiAgICAgICAgICAgICAgPHNwYW4+e3sgJHQoJ0FwcC5tZW51Lm5ld0ZhY2lsaXRpZXNSZXF1ZXN0c1JlcG9ydC50b29sdGlwJyl9fTwvc3Bhbj4KICAgICAgICAgICAgPC92LXRvb2x0aXA+CiAgICAgICAgICA8L3YtbGlzdD4KICAgICAgICAgIDx2LWxpc3QKICAgICAgICAgICAgY2xhc3M9Imxhc3RNZW51IgogICAgICAgICAgICB2LWlmPSJ0YXNrc1ZlcmlmaWNhdGlvbi5jYW5WaWV3KCdGYWNpbGl0aWVzVXBkYXRlUmVxdWVzdHNSZXBvcnQnKSIKICAgICAgICAgID4KICAgICAgICAgICAgPHYtdG9vbHRpcCByaWdodD4KICAgICAgICAgICAgICA8di1saXN0LXRpbGUKICAgICAgICAgICAgICAgIHRvPSJGYWNpbGl0aWVzVXBkYXRlUmVxdWVzdHNSZXBvcnQiCiAgICAgICAgICAgICAgICBzbG90PSJhY3RpdmF0b3IiCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPHYtbGlzdC10aWxlLXRpdGxlIGNsYXNzPSJtZW51VGV4dCI+CiAgICAgICAgICAgICAgICAgIDx2LWljb24KICAgICAgICAgICAgICAgICAgICBsZWZ0CiAgICAgICAgICAgICAgICAgICAgY29sb3I9ImJsYWNrIgogICAgICAgICAgICAgICAgICA+bGlzdDwvdi1pY29uPnt7ICR0KCdBcHAubWVudS5mYWNpbGl0aWVzVXBkYXRlUmVxdWVzdHNSZXBvcnQubXNnJyl9fQogICAgICAgICAgICAgICAgPC92LWxpc3QtdGlsZS10aXRsZT4KICAgICAgICAgICAgICA8L3YtbGlzdC10aWxlPgogICAgICAgICAgICAgIDxzcGFuPnt7ICR0KCdBcHAubWVudS5mYWNpbGl0aWVzVXBkYXRlUmVxdWVzdHNSZXBvcnQudG9vbHRpcCcpfX08L3NwYW4+CiAgICAgICAgICAgIDwvdi10b29sdGlwPgogICAgICAgICAgPC92LWxpc3Q+CiAgICAgICAgICA8di1saXN0CiAgICAgICAgICAgIGNsYXNzPSJsYXN0TWVudSIKICAgICAgICAgICAgdi1pZj0idGFza3NWZXJpZmljYXRpb24uY2FuVmlldygnU2VydmljZXNSZXBvcnQnKSIKICAgICAgICAgID4KICAgICAgICAgICAgPHYtbGlzdC10aWxlIHRvPSJTZXJ2aWNlc1JlcG9ydCI+CiAgICAgICAgICAgICAgPHYtbGlzdC10aWxlLXRpdGxlIGNsYXNzPSJtZW51VGV4dCI+CiAgICAgICAgICAgICAgICA8di1pY29uCiAgICAgICAgICAgICAgICAgIGxlZnQKICAgICAgICAgICAgICAgICAgY29sb3I9ImJsYWNrIgogICAgICAgICAgICAgICAgPmxpc3Q8L3YtaWNvbj57eyAkdCgnQXBwLm1lbnUuc2VydmljZXNSZXBvcnQubXNnJyl9fQogICAgICAgICAgICAgIDwvdi1saXN0LXRpbGUtdGl0bGU+CiAgICAgICAgICAgIDwvdi1saXN0LXRpbGU+CiAgICAgICAgICA8L3YtbGlzdD4KICAgICAgICAgIDx2LWxpc3QKICAgICAgICAgICAgY2xhc3M9Imxhc3RNZW51IgogICAgICAgICAgICB2LWlmPSJ0YXNrc1ZlcmlmaWNhdGlvbi5jYW5WaWV3KCdGYWNpbGl0aWVzUmVwb3J0JykiCiAgICAgICAgICA+CiAgICAgICAgICAgIDx2LXRvb2x0aXAgcmlnaHQ+CiAgICAgICAgICAgICAgPHYtbGlzdC10aWxlCiAgICAgICAgICAgICAgICB0bz0iSGlzdG9yeSIKICAgICAgICAgICAgICAgIHNsb3Q9ImFjdGl2YXRvciIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8di1saXN0LXRpbGUtdGl0bGUgY2xhc3M9Im1lbnVUZXh0Ij4KICAgICAgICAgICAgICAgICAgPHYtaWNvbgogICAgICAgICAgICAgICAgICAgIGxlZnQKICAgICAgICAgICAgICAgICAgICBjb2xvcj0iYmxhY2siCiAgICAgICAgICAgICAgICAgID5saXN0PC92LWljb24+e3sgJHQoJ0FwcC5tZW51Lmhpc3RvcnlSZXBvcnQubXNnJyl9fQogICAgICAgICAgICAgICAgPC92LWxpc3QtdGlsZS10aXRsZT4KICAgICAgICAgICAgICA8L3YtbGlzdC10aWxlPgogICAgICAgICAgICAgIDxzcGFuPnt7ICR0KCdBcHAubWVudS5oaXN0b3J5UmVwb3J0LnRvb2x0aXAnKX19PC9zcGFuPgogICAgICAgICAgICA8L3YtdG9vbHRpcD4KICAgICAgICAgIDwvdi1saXN0PgogICAgICAgIDwvdWw+CiAgICAgIDwvbGk+CiAgICA8L3VsPgogIDwvbGk+CiAgPGxpIGNsYXNzPSJwYXJlbnQiPgogICAgPGEgaHJlZj0iIyI+CiAgICAgIDx2LWljb24+cGVybV9pZGVudGl0eTwvdi1pY29uPnt7ICR0KCdBcHAubWVudS5hY2NvdW50Lm1zZycpfX0KICAgIDwvYT4KICAgIDx1bCBjbGFzcz0iY2hpbGQiPgogICAgICA8di1saXN0IGNsYXNzPSJsYXN0TWVudSI+CiAgICAgICAgPHYtdG9vbHRpcCByaWdodD4KICAgICAgICAgIDx2LWxpc3QtdGlsZQogICAgICAgICAgICB0bz0iYWRkVXNlciIKICAgICAgICAgICAgc2xvdD0iYWN0aXZhdG9yIgogICAgICAgICAgICB2LWlmPSckc3RvcmUuc3RhdGUuYXV0aC5yb2xlID09PSAiQWRtaW4iJwogICAgICAgICAgPgogICAgICAgICAgICA8di1saXN0LXRpbGUtdGl0bGUgY2xhc3M9Im1lbnVUZXh0Ij4KICAgICAgICAgICAgICA8di1pY29uCiAgICAgICAgICAgICAgICBsZWZ0CiAgICAgICAgICAgICAgICBjb2xvcj0iYmxhY2siCiAgICAgICAgICAgICAgPnBlcm1faWRlbnRpdHk8L3YtaWNvbj57eyAkdCgnQXBwLm1lbnUuYWRkVXNlci5tc2cnKX19CiAgICAgICAgICAgIDwvdi1saXN0LXRpbGUtdGl0bGU+CiAgICAgICAgICA8L3YtbGlzdC10aWxlPgogICAgICAgICAgPHNwYW4+e3sgJHQoJ0FwcC5tZW51LmFkZFVzZXIudG9vbHRpcCcpfX08L3NwYW4+CiAgICAgICAgPC92LXRvb2x0aXA+CiAgICAgIDwvdi1saXN0PgogICAgICA8di1saXN0IGNsYXNzPSJsYXN0TWVudSI+CiAgICAgICAgPHYtdG9vbHRpcCByaWdodD4KICAgICAgICAgIDx2LWxpc3QtdGlsZQogICAgICAgICAgICB0bz0idXNlcnNMaXN0IgogICAgICAgICAgICBzbG90PSJhY3RpdmF0b3IiCiAgICAgICAgICAgIHYtaWY9JyRzdG9yZS5zdGF0ZS5hdXRoLnJvbGUgPT09ICJBZG1pbiInCiAgICAgICAgICA+CiAgICAgICAgICAgIDx2LWxpc3QtdGlsZS10aXRsZSBjbGFzcz0ibWVudVRleHQiPgogICAgICAgICAgICAgIDx2LWljb24KICAgICAgICAgICAgICAgIGxlZnQKICAgICAgICAgICAgICAgIGNvbG9yPSJibGFjayIKICAgICAgICAgICAgICA+cGVybV9pZGVudGl0eTwvdi1pY29uPnt7ICR0KCdBcHAubWVudS51c2Vyc0xpc3QubXNnJyl9fQogICAgICAgICAgICA8L3YtbGlzdC10aWxlLXRpdGxlPgogICAgICAgICAgPC92LWxpc3QtdGlsZT4KICAgICAgICAgIDxzcGFuPnt7ICR0KCdBcHAubWVudS51c2Vyc0xpc3QudG9vbHRpcCcpfX08L3NwYW4+CiAgICAgICAgPC92LXRvb2x0aXA+CiAgICAgIDwvdi1saXN0PgogICAgICA8di1saXN0IGNsYXNzPSJsYXN0TWVudSI+CiAgICAgICAgPHYtdG9vbHRpcCByaWdodD4KICAgICAgICAgIDx2LWxpc3QtdGlsZQogICAgICAgICAgICB0bz0icm9sZXNNYW5hZ2VtZW50IgogICAgICAgICAgICBzbG90PSJhY3RpdmF0b3IiCiAgICAgICAgICAgIHYtaWY9JyRzdG9yZS5zdGF0ZS5hdXRoLnJvbGUgPT09ICJBZG1pbiInCiAgICAgICAgICA+CiAgICAgICAgICAgIDx2LWxpc3QtdGlsZS10aXRsZSBjbGFzcz0ibWVudVRleHQiPgogICAgICAgICAgICAgIDx2LWljb24KICAgICAgICAgICAgICAgIGxlZnQKICAgICAgICAgICAgICAgIGNvbG9yPSJibGFjayIKICAgICAgICAgICAgICA+cGVybV9pZGVudGl0eTwvdi1pY29uPnt7ICR0KCdBcHAubWVudS5yb2xlc01hbmFnZW1lbnQubXNnJyl9fQogICAgICAgICAgICA8L3YtbGlzdC10aWxlLXRpdGxlPgogICAgICAgICAgPC92LWxpc3QtdGlsZT4KICAgICAgICAgIDxzcGFuPnt7ICR0KCdBcHAubWVudS5yb2xlc01hbmFnZW1lbnQudG9vbHRpcCcpfX08L3NwYW4+CiAgICAgICAgPC92LXRvb2x0aXA+CiAgICAgIDwvdi1saXN0PgogICAgICA8di1saXN0IGNsYXNzPSJsYXN0TWVudSI+CiAgICAgICAgPHYtbGlzdC10aWxlIHRvPSJjaGFuZ2VQYXNzd29yZCI+CiAgICAgICAgICA8di1saXN0LXRpbGUtdGl0bGUgY2xhc3M9Im1lbnVUZXh0Ij4KICAgICAgICAgICAgPHYtaWNvbgogICAgICAgICAgICAgIGxlZnQKICAgICAgICAgICAgICBjb2xvcj0iYmxhY2siCiAgICAgICAgICAgID5wZXJtX2lkZW50aXR5PC92LWljb24+e3sgJHQoJ0FwcC5tZW51LmNoYW5nZVBhc3N3b3JkLm1zZycpfX0KICAgICAgICAgIDwvdi1saXN0LXRpbGUtdGl0bGU+CiAgICAgICAgPC92LWxpc3QtdGlsZT4KICAgICAgPC92LWxpc3Q+CiAgICA8L3VsPgogIDwvbGk+CiAgPGxpIGNsYXNzPSJwYXJlbnQiPgogICAgPHYtbGlzdC10aWxlCiAgICAgIHRvPSJjb25maWd1cmUiCiAgICAgIHNsb3Q9ImFjdGl2YXRvciIKICAgICAgdi1pZj0nISRzdG9yZS5zdGF0ZS5kZW55QWNjZXNzJwogICAgICBjbGFzcz0ibmV3Q2xhc3MiCiAgICA+CiAgICAgIDx2LWljb24+c2V0dGluZ3M8L3YtaWNvbj4ge3sgJHQoJ0FwcC5tZW51LmNvbmZpZ3VyZS5tc2cnKSB9fQogICAgPC92LWxpc3QtdGlsZT4KICA8L2xpPgogIDxsaSBjbGFzcz0icGFyZW50Ij4KICAgIDx2LWxpc3QtdGlsZQogICAgICB0bz0ibG9nb3V0IgogICAgICBzbG90PSJhY3RpdmF0b3IiCiAgICAgIHYtaWY9JyEkc3RvcmUuc3RhdGUuZGVueUFjY2VzcyAmJiAhJHN0b3JlLnN0YXRlLmNvbmZpZy5nZW5lcmFsQ29uZmlnLmF1dGhEaXNhYmxlZCcKICAgICAgY2xhc3M9Im5ld0NsYXNzIgogICAgPgogICAgICA8di1saXN0LXRpbGUtdGl0bGU+CiAgICAgICAgPHYtaWNvbj5sb2dvdXQ8L3YtaWNvbj4ge3sgJHQoJ0FwcC5tZW51LmxvZ291dC5tc2cnKSB9fQogICAgICA8L3YtbGlzdC10aWxlLXRpdGxlPgogICAgPC92LWxpc3QtdGlsZT4KICA8L2xpPgo8L3VsPgo="},null]}