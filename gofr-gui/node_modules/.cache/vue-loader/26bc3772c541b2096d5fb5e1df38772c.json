{"remainingRequest":"/home/ally/gofr/gofr-gui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ally/gofr/gofr-gui/src/components/FacilityRegistry/ServicesReport.vue?vue&type=template&id=0baea2c1&","dependencies":[{"path":"/home/ally/gofr/gofr-gui/src/components/FacilityRegistry/ServicesReport.vue","mtime":1619257194373},{"path":"/home/ally/gofr/gofr-gui/node_modules/cache-loader/dist/cjs.js","mtime":1619257191457},{"path":"/home/ally/gofr/gofr-gui/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1619257191305},{"path":"/home/ally/gofr/gofr-gui/node_modules/cache-loader/dist/cjs.js","mtime":1619257191457},{"path":"/home/ally/gofr/gofr-gui/node_modules/vue-loader/lib/index.js","mtime":1619257191305}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}