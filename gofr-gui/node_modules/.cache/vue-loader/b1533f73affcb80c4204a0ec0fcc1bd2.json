{"remainingRequest":"/home/ally/gofr/gofr-gui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ally/gofr/gofr-gui/src/components/menu.vue?vue&type=template&id=a380d422&scoped=true&","dependencies":[{"path":"/home/ally/gofr/gofr-gui/src/components/menu.vue","mtime":1621954054717},{"path":"/home/ally/gofr/gofr-gui/node_modules/cache-loader/dist/cjs.js","mtime":1619257191457},{"path":"/home/ally/gofr/gofr-gui/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1619257191305},{"path":"/home/ally/gofr/gofr-gui/node_modules/cache-loader/dist/cjs.js","mtime":1619257191457},{"path":"/home/ally/gofr/gofr-gui/node_modules/vue-loader/lib/index.js","mtime":1619257191305}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Cjx1bCBpZD0ibWVudSI+CiAgPGxpIGNsYXNzPSJwYXJlbnQiPjxhIGhyZWY9IiMiPgogICAgICA8di1pY29uPm1kaS1zcGVsbGNoZWNrPC92LWljb24+IHt7JHQoJ0FwcC5tZW51LmZhY2lsaXR5UmVjb24ubXNnJyl9fQogICAgPC9hPgogICAgPHVsIGNsYXNzPSJjaGlsZCI+CiAgICAgIDxsaSBjbGFzcz0icGFyZW50Ij4KICAgICAgICA8YQogICAgICAgICAgaHJlZj0iIyIKICAgICAgICAgIHN0eWxlPSJtYXJnaW4tbGVmdDogMTVweCIKICAgICAgICA+CiAgICAgICAgICA8di1pY29uCiAgICAgICAgICAgIGNvbG9yPSJibGFjayIKICAgICAgICAgICAgbGVmdAogICAgICAgICAgPm1kaS1zeW5jPC92LWljb24+e3sgJHQoJ0FwcC5tZW51LmRhdGFTb3VyY2VzUGFyZW50Lm1zZycpfX0gPHYtaWNvbgogICAgICAgICAgICBjb2xvcj0iYmxhY2siCiAgICAgICAgICAgIHNtYWxsCiAgICAgICAgICAgIGNsYXNzPSJtZW51QXJyb3ciCiAgICAgICAgICA+bWRpLXBsYXk8L3YtaWNvbj4KICAgICAgICA8L2E+CiAgICAgICAgPHVsIGNsYXNzPSJjaGlsZCI+CiAgICAgICAgICA8di1saXN0IGNsYXNzPSJsYXN0TWVudSI+CiAgICAgICAgICAgIDx2LXRvb2x0aXAgcmlnaHQ+CiAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDphY3RpdmF0b3I9Insgb24gfSI+CiAgICAgICAgICAgICAgICA8di1saXN0LWl0ZW0KICAgICAgICAgICAgICAgICAgdG89Ii9BZGREYXRhU291cmNlcyIKICAgICAgICAgICAgICAgICAgdi1vbj0ib24iCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDx2LWxpc3QtaXRlbS10aXRsZSBjbGFzcz0ibWVudVRleHQiPgogICAgICAgICAgICAgICAgICAgIDx2LWljb24KICAgICAgICAgICAgICAgICAgICAgIGxlZnQKICAgICAgICAgICAgICAgICAgICAgIGNvbG9yPSJibGFjayIKICAgICAgICAgICAgICAgICAgICA+bWRpLWNsb3VkLXVwbG9hZDwvdi1pY29uPgogICAgICAgICAgICAgICAgICAgIHt7ICR0KCdBcHAubWVudS5hZGREYXRhU291cmNlcy5tc2cnKX19CiAgICAgICAgICAgICAgICAgIDwvdi1saXN0LWl0ZW0tdGl0bGU+CiAgICAgICAgICAgICAgICA8L3YtbGlzdC1pdGVtPgogICAgICAgICAgICAgIDwvdGVtcGxhdGU+CiAgICAgICAgICAgICAgPHNwYW4+e3sgJHQoJ0FwcC5tZW51LmFkZERhdGFTb3VyY2VzLnRvb2x0aXAnKX19PC9zcGFuPgogICAgICAgICAgICA8L3YtdG9vbHRpcD4KICAgICAgICAgIDwvdi1saXN0PgogICAgICAgICAgPHYtbGlzdCBjbGFzcz0ibGFzdE1lbnUiPgogICAgICAgICAgICA8di10b29sdGlwIHJpZ2h0PgogICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6YWN0aXZhdG9yPSJ7IG9uIH0iPgogICAgICAgICAgICAgICAgPHYtbGlzdC1pdGVtCiAgICAgICAgICAgICAgICAgIHRvPSIvVmlld0RhdGFTb3VyY2VzIgogICAgICAgICAgICAgICAgICB2LW9uPSJvbiIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPHYtbGlzdC1pdGVtLXRpdGxlIGNsYXNzPSJtZW51VGV4dCI+CiAgICAgICAgICAgICAgICAgICAgPHYtaWNvbgogICAgICAgICAgICAgICAgICAgICAgbGVmdAogICAgICAgICAgICAgICAgICAgICAgY29sb3I9ImJsYWNrIgogICAgICAgICAgICAgICAgICAgID5tZGktZm9ybWF0LWxpc3QtYnVsbGV0ZWQtc3F1YXJlPC92LWljb24+e3sgJHQoJ0FwcC5tZW51LnZpZXdEYXRhU291cmNlcy5tc2cnKX19CiAgICAgICAgICAgICAgICAgIDwvdi1saXN0LWl0ZW0tdGl0bGU+CiAgICAgICAgICAgICAgICA8L3YtbGlzdC1pdGVtPgogICAgICAgICAgICAgIDwvdGVtcGxhdGU+CiAgICAgICAgICAgICAgPHNwYW4+e3sgJHQoJ0FwcC5tZW51LnZpZXdEYXRhU291cmNlcy50b29sdGlwJyl9fTwvc3Bhbj4KICAgICAgICAgICAgPC92LXRvb2x0aXA+CiAgICAgICAgICA8L3YtbGlzdD4KICAgICAgICA8L3VsPgogICAgICA8L2xpPgogICAgICA8di1saXN0IDpjbGFzcz0ieyBkaXNhYmxlZE1lbnU6IE9iamVjdC5rZXlzKCRzdG9yZS5zdGF0ZS5hY3RpdmVQYWlyLnNvdXJjZTEpLmxlbmd0aD09PTAsbGFzdE1lbnU6IHRydWUgfSI+CiAgICAgICAgPHYtdG9vbHRpcCByaWdodD4KICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6YWN0aXZhdG9yPSJ7IG9uIH0iPgogICAgICAgICAgICA8di1saXN0LWl0ZW0KICAgICAgICAgICAgICB2LW9uPSJvbiIKICAgICAgICAgICAgICB0bz0iL3ZpZXciCiAgICAgICAgICAgICAgY29sb3I9IndoaXRlIgogICAgICAgICAgICAgIDpkaXNhYmxlZD0iT2JqZWN0LmtleXMoJHN0b3JlLnN0YXRlLmFjdGl2ZVBhaXIuc291cmNlMSkubGVuZ3RoPT09MCIKICAgICAgICAgICAgPgogICAgICAgICAgICAgIDx2LWxpc3QtaXRlbS10aXRsZSBjbGFzcz0ibWVudVRleHQiPgogICAgICAgICAgICAgICAgPHYtaWNvbgogICAgICAgICAgICAgICAgICBsZWZ0CiAgICAgICAgICAgICAgICAgIGNvbG9yPSJibGFjayIKICAgICAgICAgICAgICAgID5tZGktZm9ybWF0LWxpc3QtYnVsbGV0ZWQtc3F1YXJlPC92LWljb24+e3sgJHQoJ0FwcC5tZW51LnZpZXcubXNnJyl9fQogICAgICAgICAgICAgIDwvdi1saXN0LWl0ZW0tdGl0bGU+CiAgICAgICAgICAgIDwvdi1saXN0LWl0ZW0+CiAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgICAgPHNwYW4+e3sgJHQoJ0FwcC5tZW51LnZpZXcudG9vbHRpcCcpIH19PC9zcGFuPgogICAgICAgIDwvdi10b29sdGlwPgogICAgICA8L3YtbGlzdD4KICAgICAgPGxpIGNsYXNzPSJwYXJlbnQiPgogICAgICAgIDxhCiAgICAgICAgICBocmVmPSIjIgogICAgICAgICAgc3R5bGU9Im1hcmdpbi1sZWZ0OiAxNXB4IgogICAgICAgID4KICAgICAgICAgIDx2LWljb24KICAgICAgICAgICAgbGVmdAogICAgICAgICAgICBjb2xvcj0iYmxhY2siCiAgICAgICAgICA+bWRpLWNvbXBhcmUtaG9yaXpvbnRhbDwvdi1pY29uPnt7ICR0KCdBcHAubWVudS5yZWNvbmNpbGUubXNnJyl9fSA8di1pY29uCiAgICAgICAgICAgIGNvbG9yPSJibGFjayIKICAgICAgICAgICAgc21hbGwKICAgICAgICAgICAgY2xhc3M9Im1lbnVBcnJvdyIKICAgICAgICAgID5tZGktcGxheTwvdi1pY29uPgogICAgICAgIDwvYT4KICAgICAgICA8dWwgY2xhc3M9ImNoaWxkIj4KICAgICAgICAgIDx2LWxpc3QgOmNsYXNzPSJ7IGRpc2FibGVkTWVudTogJHN0b3JlLnN0YXRlLmRhdGFTb3VyY2VzLmxlbmd0aCA8PSAxIHx8ICRzdG9yZS5zdGF0ZS5kYXRhU291cmNlUGFpcnMubGVuZ3RoIDw9IDAsbGFzdE1lbnU6IHRydWUgfSI+CiAgICAgICAgICAgIDx2LXRvb2x0aXAgcmlnaHQ+CiAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDphY3RpdmF0b3I9Insgb24gfSI+CiAgICAgICAgICAgICAgICA8di1saXN0LWl0ZW0KICAgICAgICAgICAgICAgICAgdG89Ii9kYXRhU291cmNlc1BhaXIiCiAgICAgICAgICAgICAgICAgIHYtb249Im9uIgogICAgICAgICAgICAgICAgICA6ZGlzYWJsZWQ9IiRzdG9yZS5zdGF0ZS5kYXRhU291cmNlcy5sZW5ndGggPD0gMSB8fCAkc3RvcmUuc3RhdGUuZGF0YVNvdXJjZVBhaXJzLmxlbmd0aCA8PSAwIgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8di1saXN0LWl0ZW0tdGl0bGUgY2xhc3M9Im1lbnVUZXh0Ij4KICAgICAgICAgICAgICAgICAgICA8di1pY29uCiAgICAgICAgICAgICAgICAgICAgICBsZWZ0CiAgICAgICAgICAgICAgICAgICAgICBjb2xvcj0iYmxhY2siCiAgICAgICAgICAgICAgICAgICAgPm1kaS1udW1lcmljLTItYm94LW11bHRpcGxlLW91dGxpbmU8L3YtaWNvbj57eyAkdCgnQXBwLm1lbnUuY3JlYXRlUGFpci5tc2cnKX19CiAgICAgICAgICAgICAgICAgIDwvdi1saXN0LWl0ZW0tdGl0bGU+CiAgICAgICAgICAgICAgICA8L3YtbGlzdC1pdGVtPgogICAgICAgICAgICAgIDwvdGVtcGxhdGU+CiAgICAgICAgICAgICAgPHNwYW4+e3sgJHQoJ0FwcC5tZW51LmNyZWF0ZVBhaXIudG9vbHRpcCcpfX08L3NwYW4+CiAgICAgICAgICAgIDwvdi10b29sdGlwPgogICAgICAgICAgPC92LWxpc3Q+CiAgICAgICAgICA8di1saXN0IDpjbGFzcz0ieyBkaXNhYmxlZE1lbnU6IE9iamVjdC5rZXlzKCRzdG9yZS5zdGF0ZS5hY3RpdmVQYWlyLnNvdXJjZTEpLmxlbmd0aCA9PT0gMCxsYXN0TWVudTogdHJ1ZSB9Ij4KICAgICAgICAgICAgPHYtdG9vbHRpcCByaWdodD4KICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90OmFjdGl2YXRvcj0ieyBvbiB9Ij4KICAgICAgICAgICAgICAgIDx2LWxpc3QtaXRlbQogICAgICAgICAgICAgICAgICB0bz0iL3Njb3JlcyIKICAgICAgICAgICAgICAgICAgdi1vbj0ib24iCiAgICAgICAgICAgICAgICAgIDpkaXNhYmxlZD0nT2JqZWN0LmtleXMoJHN0b3JlLnN0YXRlLmFjdGl2ZVBhaXIuc291cmNlMSkubGVuZ3RoID09PSAwJwogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8di1saXN0LWl0ZW0tdGl0bGUgY2xhc3M9Im1lbnVUZXh0Ij4KICAgICAgICAgICAgICAgICAgICA8di1pY29uCiAgICAgICAgICAgICAgICAgICAgICBsZWZ0CiAgICAgICAgICAgICAgICAgICAgICBjb2xvcj0iYmxhY2siCiAgICAgICAgICAgICAgICAgICAgPm1kaS1ib29rLXNlYXJjaDwvdi1pY29uPnt7ICR0KCdBcHAubWVudS5yZWNvbmNpbGUubXNnJykgfX0KICAgICAgICAgICAgICAgICAgPC92LWxpc3QtaXRlbS10aXRsZT4KICAgICAgICAgICAgICAgIDwvdi1saXN0LWl0ZW0+CiAgICAgICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICAgICAgICA8c3Bhbj57eyAkdCgnQXBwLm1lbnUucmVjb25jaWxlLnRvb2x0aXAnKSB9fTwvc3Bhbj4KICAgICAgICAgICAgPC92LXRvb2x0aXA+CiAgICAgICAgICA8L3YtbGlzdD4KICAgICAgICAgIDx2LWxpc3QgOmNsYXNzPSJ7IGRpc2FibGVkTWVudTogT2JqZWN0LmtleXMoJHN0b3JlLnN0YXRlLmFjdGl2ZVBhaXIuc291cmNlMSkubGVuZ3RoPT09MCxsYXN0TWVudTogdHJ1ZSB9Ij4KICAgICAgICAgICAgPHYtdG9vbHRpcCByaWdodD4KICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90OmFjdGl2YXRvcj0ieyBvbiB9Ij4KICAgICAgICAgICAgICAgIDx2LWxpc3QtaXRlbQogICAgICAgICAgICAgICAgICB0bz0iL3JlY29TdGF0dXMiCiAgICAgICAgICAgICAgICAgIHYtb249Im9uIgogICAgICAgICAgICAgICAgICA6ZGlzYWJsZWQ9J09iamVjdC5rZXlzKCRzdG9yZS5zdGF0ZS5hY3RpdmVQYWlyLnNvdXJjZTEpLmxlbmd0aCA9PT0gMCcKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPHYtbGlzdC1pdGVtLXRpdGxlIGNsYXNzPSJtZW51VGV4dCI+CiAgICAgICAgICAgICAgICAgICAgPHYtaWNvbgogICAgICAgICAgICAgICAgICAgICAgbGVmdAogICAgICAgICAgICAgICAgICAgICAgY29sb3I9ImJsYWNrIgogICAgICAgICAgICAgICAgICAgID5tZGktdmlldy1kYXNoYm9hcmQ8L3YtaWNvbj4ge3sgJHQoJ0FwcC5tZW51LnJlY29TdGF0dXMubXNnJykgfX0KICAgICAgICAgICAgICAgICAgPC92LWxpc3QtaXRlbS10aXRsZT4KICAgICAgICAgICAgICAgIDwvdi1saXN0LWl0ZW0+CiAgICAgICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICAgICAgICA8c3Bhbj57eyAkdCgnQXBwLm1lbnUucmVjb1N0YXR1cy50b29sdGlwJykgfX08L3NwYW4+CiAgICAgICAgICAgIDwvdi10b29sdGlwPgogICAgICAgICAgPC92LWxpc3Q+CiAgICAgICAgPC91bD4KICAgICAgPC9saT4KICAgIDwvdWw+CiAgPC9saT4KICA8bGkgY2xhc3M9InBhcmVudCI+CiAgICA8YSBocmVmPSIjIj4KICAgICAgPHYtaWNvbj5tZGktbWFwLW1hcmtlcjwvdi1pY29uPnt7ICR0KCdBcHAubWVudS5mYWNpbGl0eVJlZ2lzdHJ5Lm1zZycpfX0KICAgIDwvYT4KICAgIDx1bCBjbGFzcz0iY2hpbGQiPgogICAgICA8di1saXN0CiAgICAgICAgY2xhc3M9Imxhc3RNZW51IgogICAgICAgIHYtaWY9InRhc2tzVmVyaWZpY2F0aW9uLmNhbkFkZCgnQWRkSnVyaXNkaWN0aW9uJykiCiAgICAgID4KICAgICAgICA8di10b29sdGlwIHJpZ2h0PgogICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDphY3RpdmF0b3I9Insgb24gfSI+CiAgICAgICAgICAgIDx2LWxpc3QtaXRlbQogICAgICAgICAgICAgIHRvPSIvUmVzb3VyY2UvQWRkL2p1cmlzZGljdGlvbiIKICAgICAgICAgICAgICB2LW9uPSJvbiIKICAgICAgICAgICAgPgogICAgICAgICAgICAgIDx2LWxpc3QtaXRlbS10aXRsZSBjbGFzcz0ibWVudVRleHQiPgogICAgICAgICAgICAgICAgPHYtaWNvbgogICAgICAgICAgICAgICAgICBsZWZ0CiAgICAgICAgICAgICAgICAgIGNvbG9yPSJibGFjayIKICAgICAgICAgICAgICAgID5tZGktaG9tZS1jaXR5PC92LWljb24+e3sgJHQoJ0FwcC5tZW51LmFkZEp1cmlzZGljdGlvbi5tc2cnKX19CiAgICAgICAgICAgICAgPC92LWxpc3QtaXRlbS10aXRsZT4KICAgICAgICAgICAgPC92LWxpc3QtaXRlbT4KICAgICAgICAgIDwvdGVtcGxhdGU+CiAgICAgICAgICA8c3Bhbj57eyAkdCgnQXBwLm1lbnUuYWRkSnVyaXNkaWN0aW9uLnRvb2x0aXAnKX19PC9zcGFuPgogICAgICAgIDwvdi10b29sdGlwPgogICAgICA8L3YtbGlzdD4KICAgICAgPHYtbGlzdAogICAgICAgIGNsYXNzPSJsYXN0TWVudSIKICAgICAgICB2LWlmPSJ0YXNrc1ZlcmlmaWNhdGlvbi5jYW5BZGQoJ0FkZEZhY2lsaXR5JykiCiAgICAgID4KICAgICAgICA8di10b29sdGlwIHJpZ2h0PgogICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDphY3RpdmF0b3I9Insgb24gfSI+CiAgICAgICAgICAgIDx2LWxpc3QtaXRlbQogICAgICAgICAgICAgIHRvPSIvcXVlc3Rpb25uYWlyZS9nb2ZyLWZhY2lsaXR5LXF1ZXN0aW9ubmFpcmUvZmFjaWxpdHkiCiAgICAgICAgICAgICAgdi1vbj0ib24iCiAgICAgICAgICAgID4KICAgICAgICAgICAgICA8di1saXN0LWl0ZW0tdGl0bGUgY2xhc3M9Im1lbnVUZXh0Ij4KICAgICAgICAgICAgICAgIDx2LWljb24KICAgICAgICAgICAgICAgICAgbGVmdAogICAgICAgICAgICAgICAgICBjb2xvcj0iYmxhY2siCiAgICAgICAgICAgICAgICA+bWRpLWhvc3BpdGFsLWJ1aWxkaW5nPC92LWljb24+e3sgJHQoJ0FwcC5tZW51LmFkZEZhY2lsaXR5Lm1zZycpfX0KICAgICAgICAgICAgICA8L3YtbGlzdC1pdGVtLXRpdGxlPgogICAgICAgICAgICA8L3YtbGlzdC1pdGVtPgogICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICAgIDxzcGFuPnt7ICR0KCdBcHAubWVudS5hZGRGYWNpbGl0eS50b29sdGlwJyl9fTwvc3Bhbj4KICAgICAgICA8L3YtdG9vbHRpcD4KICAgICAgPC92LWxpc3Q+CiAgICAgIDx2LWxpc3QKICAgICAgICBjbGFzcz0ibGFzdE1lbnUiCiAgICAgICAgdi1pZj0idGFza3NWZXJpZmljYXRpb24uY2FuQWRkKCdBZGRTZXJ2aWNlJykiCiAgICAgID4KICAgICAgICA8di10b29sdGlwIHJpZ2h0PgogICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDphY3RpdmF0b3I9Insgb24gfSI+CiAgICAgICAgICAgIDx2LWxpc3QtaXRlbQogICAgICAgICAgICAgIHRvPSIvUmVzb3VyY2UvQWRkL3NlcnZpY2UiCiAgICAgICAgICAgICAgdi1vbj0ib24iCiAgICAgICAgICAgID4KICAgICAgICAgICAgICA8di1saXN0LWl0ZW0tdGl0bGUgY2xhc3M9Im1lbnVUZXh0Ij4KICAgICAgICAgICAgICAgIDx2LWljb24KICAgICAgICAgICAgICAgICAgbGVmdAogICAgICAgICAgICAgICAgICBjb2xvcj0iYmxhY2siCiAgICAgICAgICAgICAgICA+bWRpLXJvb20tc2VydmljZTwvdi1pY29uPnt7ICR0KCdBcHAubWVudS5hZGRTZXJ2aWNlLm1zZycpfX0KICAgICAgICAgICAgICA8L3YtbGlzdC1pdGVtLXRpdGxlPgogICAgICAgICAgICA8L3YtbGlzdC1pdGVtPgogICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICAgIDxzcGFuPnt7ICR0KCdBcHAubWVudS5hZGRTZXJ2aWNlLnRvb2x0aXAnKX19PC9zcGFuPgogICAgICAgIDwvdi10b29sdGlwPgogICAgICA8L3YtbGlzdD4KICAgICAgPHYtbGlzdAogICAgICAgIGNsYXNzPSJsYXN0TWVudSIKICAgICAgICB2LWlmPSJ0YXNrc1ZlcmlmaWNhdGlvbi5jYW5BZGQoJ0FkZFNlcnZpY2UnKSIKICAgICAgPgogICAgICAgIDx2LXRvb2x0aXAgcmlnaHQ+CiAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90OmFjdGl2YXRvcj0ieyBvbiB9Ij4KICAgICAgICAgICAgPHYtbGlzdC1pdGVtCiAgICAgICAgICAgICAgdG89Ii9SZXNvdXJjZS9TZWFyY2gvc2VydmljZSIKICAgICAgICAgICAgICB2LW9uPSJvbiIKICAgICAgICAgICAgPgogICAgICAgICAgICAgIDx2LWxpc3QtaXRlbS10aXRsZSBjbGFzcz0ibWVudVRleHQiPgogICAgICAgICAgICAgICAgPHYtaWNvbgogICAgICAgICAgICAgICAgICBsZWZ0CiAgICAgICAgICAgICAgICAgIGNvbG9yPSJibGFjayIKICAgICAgICAgICAgICAgID5tZGktbWFnbmlmeTwvdi1pY29uPnt7ICR0KCdBcHAubWVudS5zZWFyY2hTZXJ2aWNlLm1zZycpfX0KICAgICAgICAgICAgICA8L3YtbGlzdC1pdGVtLXRpdGxlPgogICAgICAgICAgICA8L3YtbGlzdC1pdGVtPgogICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICAgIDxzcGFuPnt7ICR0KCdBcHAubWVudS5hZGRGYWNpbGl0eS50b29sdGlwJyl9fTwvc3Bhbj4KICAgICAgICA8L3YtdG9vbHRpcD4KICAgICAgPC92LWxpc3Q+CiAgICAgIDx2LWxpc3QKICAgICAgICBjbGFzcz0ibGFzdE1lbnUiCiAgICAgICAgdi1pZj0idGFza3NWZXJpZmljYXRpb24uY2FuQWRkKCdBZGRGYWNpbGl0eScpIgogICAgICA+CiAgICAgICAgPHYtdG9vbHRpcCByaWdodD4KICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6YWN0aXZhdG9yPSJ7IG9uIH0iPgogICAgICAgICAgICA8di1saXN0LWl0ZW0KICAgICAgICAgICAgICB0bz0iL1Jlc291cmNlL1NlYXJjaC9mYWNpbGl0eSIKICAgICAgICAgICAgICB2LW9uPSJvbiIKICAgICAgICAgICAgPgogICAgICAgICAgICAgIDx2LWxpc3QtaXRlbS10aXRsZSBjbGFzcz0ibWVudVRleHQiPgogICAgICAgICAgICAgICAgPHYtaWNvbgogICAgICAgICAgICAgICAgICBsZWZ0CiAgICAgICAgICAgICAgICAgIGNvbG9yPSJibGFjayIKICAgICAgICAgICAgICAgID5tZGktbWFnbmlmeTwvdi1pY29uPlNlYXJjaCBGYWNpbGl0eQogICAgICAgICAgICAgIDwvdi1saXN0LWl0ZW0tdGl0bGU+CiAgICAgICAgICAgIDwvdi1saXN0LWl0ZW0+CiAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgICAgPHNwYW4+e3sgJHQoJ0FwcC5tZW51LmFkZEZhY2lsaXR5LnRvb2x0aXAnKX19PC9zcGFuPgogICAgICAgIDwvdi10b29sdGlwPgogICAgICA8L3YtbGlzdD4KICAgICAgPHYtbGlzdAogICAgICAgIGNsYXNzPSJsYXN0TWVudSIKICAgICAgICB2LWlmPSJ0YXNrc1ZlcmlmaWNhdGlvbi5jYW5BZGQoJ0FkZFNlcnZpY2UnKSIKICAgICAgPgogICAgICAgIDx2LXRvb2x0aXAgcmlnaHQ+CiAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90OmFjdGl2YXRvcj0ieyBvbiB9Ij4KICAgICAgICAgICAgPHYtbGlzdC1pdGVtCiAgICAgICAgICAgICAgdG89Ii9SZXNvdXJjZS9TZWFyY2gvZmFjaWxpdHktYWRkLXJlcXVlc3QvYWRkLXJlcXVlc3QiCiAgICAgICAgICAgICAgdi1vbj0ib24iCiAgICAgICAgICAgID4KICAgICAgICAgICAgICA8di1saXN0LWl0ZW0tdGl0bGUgY2xhc3M9Im1lbnVUZXh0Ij4KICAgICAgICAgICAgICAgIDx2LWljb24KICAgICAgICAgICAgICAgICAgbGVmdAogICAgICAgICAgICAgICAgICBjb2xvcj0iYmxhY2siCiAgICAgICAgICAgICAgICA+bWRpLW1hZ25pZnk8L3YtaWNvbj5TZWFyY2ggRmFjaWxpdHkgQWRkIFJlcXVlc3QKICAgICAgICAgICAgICA8L3YtbGlzdC1pdGVtLXRpdGxlPgogICAgICAgICAgICA8L3YtbGlzdC1pdGVtPgogICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICAgIDxzcGFuPnt7ICR0KCdBcHAubWVudS5hZGRGYWNpbGl0eS50b29sdGlwJyl9fTwvc3Bhbj4KICAgICAgICA8L3YtdG9vbHRpcD4KICAgICAgPC92LWxpc3Q+CiAgICAgIDx2LWxpc3QKICAgICAgICBjbGFzcz0ibGFzdE1lbnUiCiAgICAgICAgdi1pZj0idGFza3NWZXJpZmljYXRpb24uY2FuQWRkKCdBZGRTZXJ2aWNlJykiCiAgICAgID4KICAgICAgICA8di10b29sdGlwIHJpZ2h0PgogICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDphY3RpdmF0b3I9Insgb24gfSI+CiAgICAgICAgICAgIDx2LWxpc3QtaXRlbQogICAgICAgICAgICAgIHRvPSIvUmVzb3VyY2UvU2VhcmNoL2ZhY2lsaXR5LXVwZGF0ZS1yZXF1ZXN0L3VwZGF0ZS1yZXF1ZXN0IgogICAgICAgICAgICAgIHYtb249Im9uIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgPHYtbGlzdC1pdGVtLXRpdGxlIGNsYXNzPSJtZW51VGV4dCI+CiAgICAgICAgICAgICAgICA8di1pY29uCiAgICAgICAgICAgICAgICAgIGxlZnQKICAgICAgICAgICAgICAgICAgY29sb3I9ImJsYWNrIgogICAgICAgICAgICAgICAgPm1kaS1tYWduaWZ5PC92LWljb24+U2VhcmNoIEZhY2lsaXR5IFVwZGF0ZSBSZXF1ZXN0CiAgICAgICAgICAgICAgPC92LWxpc3QtaXRlbS10aXRsZT4KICAgICAgICAgICAgPC92LWxpc3QtaXRlbT4KICAgICAgICAgIDwvdGVtcGxhdGU+CiAgICAgICAgICA8c3Bhbj57eyAkdCgnQXBwLm1lbnUuYWRkRmFjaWxpdHkudG9vbHRpcCcpfX08L3NwYW4+CiAgICAgICAgPC92LXRvb2x0aXA+CiAgICAgIDwvdi1saXN0PgogICAgICA8bGkgY2xhc3M9InBhcmVudCI+CiAgICAgICAgPGEgaHJlZj0iIyI+CiAgICAgICAgICA8di1pY29uCiAgICAgICAgICAgIGxlZnQKICAgICAgICAgICAgY29sb3I9ImJsYWNrIgogICAgICAgICAgPm1kaS1jYWxsLW1hZGU8L3YtaWNvbj4KICAgICAgICAgIHt7ICR0KCdBcHAubWVudS5mYWNpbGl0eVJlcXVlc3RzLm1zZycpfX0KICAgICAgICAgIDx2LWljb24KICAgICAgICAgICAgY29sb3I9ImJsYWNrIgogICAgICAgICAgICBzbWFsbAogICAgICAgICAgICBjbGFzcz0ibWVudUFycm93IgogICAgICAgICAgPm1kaS1wbGF5LWFycm93PC92LWljb24+CiAgICAgICAgPC9hPgogICAgICAgIDx1bCBjbGFzcz0iY2hpbGQiPgogICAgICAgICAgPHYtbGlzdCBjbGFzcz0ibGFzdE1lbnUiPgogICAgICAgICAgICA8di10b29sdGlwIHJpZ2h0PgogICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6YWN0aXZhdG9yPSJ7IG9uIH0iPgogICAgICAgICAgICAgICAgPHYtbGlzdC1pdGVtCiAgICAgICAgICAgICAgICAgIHYtaWY9InRhc2tzVmVyaWZpY2F0aW9uLmNhbkFkZCgnUmVxdWVzdEJ1aWxkaW5nQWRkaXRpb24nKSIKICAgICAgICAgICAgICAgICAgdG89Ii9xdWVzdGlvbm5haXJlL2dvZnItZmFjaWxpdHktYWRkLXJlcXVlc3QtcXVlc3Rpb25uYWlyZS9mYWNpbGl0eS1hZGQtcmVxdWVzdCIKICAgICAgICAgICAgICAgICAgdi1vbj0ib24iCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDx2LWxpc3QtaXRlbS10aXRsZSBjbGFzcz0ibWVudVRleHQiPgogICAgICAgICAgICAgICAgICAgIDx2LWljb24KICAgICAgICAgICAgICAgICAgICAgIGxlZnQKICAgICAgICAgICAgICAgICAgICAgIGNvbG9yPSJibGFjayIKICAgICAgICAgICAgICAgICAgICA+bWRpLWNhbGwtbWFkZTwvdi1pY29uPnt7ICR0KCdBcHAubWVudS5yZXF1ZXN0TmV3RmFjaWxpdHkubXNnJyl9fQogICAgICAgICAgICAgICAgICA8L3YtbGlzdC1pdGVtLXRpdGxlPgogICAgICAgICAgICAgICAgPC92LWxpc3QtaXRlbT4KICAgICAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgICAgICAgIDxzcGFuPnt7ICR0KCdBcHAubWVudS5yZXF1ZXN0TmV3RmFjaWxpdHkudG9vbHRpcCcpfX08L3NwYW4+CiAgICAgICAgICAgIDwvdi10b29sdGlwPgogICAgICAgICAgPC92LWxpc3Q+CiAgICAgICAgICA8di1saXN0IGNsYXNzPSJsYXN0TWVudSI+CiAgICAgICAgICAgIDx2LXRvb2x0aXAgcmlnaHQ+CiAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDphY3RpdmF0b3I9Insgb24gfSI+CiAgICAgICAgICAgICAgICA8di1saXN0LWl0ZW0KICAgICAgICAgICAgICAgICAgdi1pZj0idGFza3NWZXJpZmljYXRpb24uY2FuQWRkKCdSZXF1ZXN0VXBkYXRlQnVpbGRpbmdEZXRhaWxzJykiCiAgICAgICAgICAgICAgICAgIHRvPSIvUmVzb3VyY2UvU2VhcmNoL2ZhY2lsaXR5P3NlYXJjaEFjdGlvbj1zZW5kLXVwZGF0ZS1yZXF1ZXN0IgogICAgICAgICAgICAgICAgICB2LW9uPSJvbiIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPHYtbGlzdC1pdGVtLXRpdGxlIGNsYXNzPSJtZW51VGV4dCI+CiAgICAgICAgICAgICAgICAgICAgPHYtaWNvbgogICAgICAgICAgICAgICAgICAgICAgbGVmdAogICAgICAgICAgICAgICAgICAgICAgY29sb3I9ImJsYWNrIgogICAgICAgICAgICAgICAgICAgID5tZGktY2FsbC1tYWRlPC92LWljb24+e3sgJHQoJ0FwcC5tZW51LnJlcXVlc3RVcGRhdGVGYWNpbGl0eS5tc2cnKX19CiAgICAgICAgICAgICAgICAgIDwvdi1saXN0LWl0ZW0tdGl0bGU+CiAgICAgICAgICAgICAgICA8L3YtbGlzdC1pdGVtPgogICAgICAgICAgICAgIDwvdGVtcGxhdGU+CiAgICAgICAgICAgICAgPHNwYW4+e3sgJHQoJ0FwcC5tZW51LnJlcXVlc3RVcGRhdGVGYWNpbGl0eS50b29sdGlwJyl9fTwvc3Bhbj4KICAgICAgICAgICAgPC92LXRvb2x0aXA+CiAgICAgICAgICA8L3YtbGlzdD4KICAgICAgICA8L3VsPgogICAgICA8L2xpPgoKICAgICAgPGxpIGNsYXNzPSJwYXJlbnQiPgogICAgICAgIDxhIGhyZWY9IiMiPgogICAgICAgICAgPHYtaWNvbgogICAgICAgICAgICBsZWZ0CiAgICAgICAgICAgIGNvbG9yPSJibGFjayIKICAgICAgICAgID5tZGktZm9ybWF0LWxpc3QtYnVsbGV0ZWQtc3F1YXJlPC92LWljb24+CiAgICAgICAgICB7eyAkdCgnQXBwLm1lbnUuZmFjaWxpdHlSZWdSZXBvcnRzLm1zZycpfX0KICAgICAgICAgIDx2LWljb24KICAgICAgICAgICAgY29sb3I9ImJsYWNrIgogICAgICAgICAgICBzbWFsbAogICAgICAgICAgICBjbGFzcz0ibWVudUFycm93IgogICAgICAgICAgPm1kaS1wbGF5LWFycm93PC92LWljb24+CiAgICAgICAgPC9hPgogICAgICAgIDx1bCBjbGFzcz0iY2hpbGQiPgogICAgICAgICAgPHYtbGlzdAogICAgICAgICAgICBjbGFzcz0ibGFzdE1lbnUiCiAgICAgICAgICAgIHYtaWY9InRhc2tzVmVyaWZpY2F0aW9uLmNhblZpZXcoJ0ZhY2lsaXRpZXNSZXBvcnQnKSIKICAgICAgICAgID4KICAgICAgICAgICAgPHYtbGlzdC1pdGVtIHRvPSIvRmFjaWxpdGllc1JlcG9ydCI+CiAgICAgICAgICAgICAgPHYtbGlzdC1pdGVtLXRpdGxlIGNsYXNzPSJtZW51VGV4dCI+CiAgICAgICAgICAgICAgICA8di1pY29uCiAgICAgICAgICAgICAgICAgIGxlZnQKICAgICAgICAgICAgICAgICAgY29sb3I9ImJsYWNrIgogICAgICAgICAgICAgICAgPm1kaS1mb3JtYXQtbGlzdC1idWxsZXRlZC1zcXVhcmU8L3YtaWNvbj57eyAkdCgnQXBwLm1lbnUuZmFjaWxpdGllc1JlcG9ydC5tc2cnKX19CiAgICAgICAgICAgICAgPC92LWxpc3QtaXRlbS10aXRsZT4KICAgICAgICAgICAgPC92LWxpc3QtaXRlbT4KICAgICAgICAgIDwvdi1saXN0PgogICAgICAgICAgPHYtbGlzdAogICAgICAgICAgICBjbGFzcz0ibGFzdE1lbnUiCiAgICAgICAgICAgIHYtaWY9InRhc2tzVmVyaWZpY2F0aW9uLmNhblZpZXcoJ05ld0ZhY2lsaXRpZXNSZXF1ZXN0c1JlcG9ydCcpIgogICAgICAgICAgPgogICAgICAgICAgICA8di10b29sdGlwIHJpZ2h0PgogICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6YWN0aXZhdG9yPSJ7IG9uIH0iPgogICAgICAgICAgICAgICAgPHYtbGlzdC1pdGVtCiAgICAgICAgICAgICAgICAgIHRvPSIvTmV3RmFjaWxpdGllc1JlcXVlc3RzUmVwb3J0IgogICAgICAgICAgICAgICAgICB2LW9uPSJvbiIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPHYtbGlzdC1pdGVtLXRpdGxlIGNsYXNzPSJtZW51VGV4dCI+CiAgICAgICAgICAgICAgICAgICAgPHYtaWNvbgogICAgICAgICAgICAgICAgICAgICAgbGVmdAogICAgICAgICAgICAgICAgICAgICAgY29sb3I9ImJsYWNrIgogICAgICAgICAgICAgICAgICAgID5tZGktZm9ybWF0LWxpc3QtYnVsbGV0ZWQtc3F1YXJlPC92LWljb24+e3sgJHQoJ0FwcC5tZW51Lm5ld0ZhY2lsaXRpZXNSZXF1ZXN0c1JlcG9ydC5tc2cnKX19CiAgICAgICAgICAgICAgICAgIDwvdi1saXN0LWl0ZW0tdGl0bGU+CiAgICAgICAgICAgICAgICA8L3YtbGlzdC1pdGVtPgogICAgICAgICAgICAgIDwvdGVtcGxhdGU+CiAgICAgICAgICAgICAgPHNwYW4+e3sgJHQoJ0FwcC5tZW51Lm5ld0ZhY2lsaXRpZXNSZXF1ZXN0c1JlcG9ydC50b29sdGlwJyl9fTwvc3Bhbj4KICAgICAgICAgICAgPC92LXRvb2x0aXA+CiAgICAgICAgICA8L3YtbGlzdD4KICAgICAgICAgIDx2LWxpc3QKICAgICAgICAgICAgY2xhc3M9Imxhc3RNZW51IgogICAgICAgICAgICB2LWlmPSJ0YXNrc1ZlcmlmaWNhdGlvbi5jYW5WaWV3KCdGYWNpbGl0aWVzVXBkYXRlUmVxdWVzdHNSZXBvcnQnKSIKICAgICAgICAgID4KICAgICAgICAgICAgPHYtdG9vbHRpcCByaWdodD4KICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90OmFjdGl2YXRvcj0ieyBvbiB9Ij4KICAgICAgICAgICAgICAgIDx2LWxpc3QtaXRlbQogICAgICAgICAgICAgICAgICB0bz0iL0ZhY2lsaXRpZXNVcGRhdGVSZXF1ZXN0c1JlcG9ydCIKICAgICAgICAgICAgICAgICAgdi1vbj0ib24iCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDx2LWxpc3QtaXRlbS10aXRsZSBjbGFzcz0ibWVudVRleHQiPgogICAgICAgICAgICAgICAgICAgIDx2LWljb24KICAgICAgICAgICAgICAgICAgICAgIGxlZnQKICAgICAgICAgICAgICAgICAgICAgIGNvbG9yPSJibGFjayIKICAgICAgICAgICAgICAgICAgICA+bWRpLWZvcm1hdC1saXN0LWJ1bGxldGVkLXNxdWFyZTwvdi1pY29uPnt7ICR0KCdBcHAubWVudS5mYWNpbGl0aWVzVXBkYXRlUmVxdWVzdHNSZXBvcnQubXNnJyl9fQogICAgICAgICAgICAgICAgICA8L3YtbGlzdC1pdGVtLXRpdGxlPgogICAgICAgICAgICAgICAgPC92LWxpc3QtaXRlbT4KICAgICAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgICAgICAgIDxzcGFuPnt7ICR0KCdBcHAubWVudS5mYWNpbGl0aWVzVXBkYXRlUmVxdWVzdHNSZXBvcnQudG9vbHRpcCcpfX08L3NwYW4+CiAgICAgICAgICAgIDwvdi10b29sdGlwPgogICAgICAgICAgPC92LWxpc3Q+CiAgICAgICAgICA8di1saXN0CiAgICAgICAgICAgIGNsYXNzPSJsYXN0TWVudSIKICAgICAgICAgICAgdi1pZj0idGFza3NWZXJpZmljYXRpb24uY2FuVmlldygnU2VydmljZXNSZXBvcnQnKSIKICAgICAgICAgID4KICAgICAgICAgICAgPHYtbGlzdC1pdGVtIHRvPSIvU2VydmljZXNSZXBvcnQiPgogICAgICAgICAgICAgIDx2LWxpc3QtaXRlbS10aXRsZSBjbGFzcz0ibWVudVRleHQiPgogICAgICAgICAgICAgICAgPHYtaWNvbgogICAgICAgICAgICAgICAgICBsZWZ0CiAgICAgICAgICAgICAgICAgIGNvbG9yPSJibGFjayIKICAgICAgICAgICAgICAgID5tZGktZm9ybWF0LWxpc3QtYnVsbGV0ZWQtc3F1YXJlPC92LWljb24+e3sgJHQoJ0FwcC5tZW51LnNlcnZpY2VzUmVwb3J0Lm1zZycpfX0KICAgICAgICAgICAgICA8L3YtbGlzdC1pdGVtLXRpdGxlPgogICAgICAgICAgICA8L3YtbGlzdC1pdGVtPgogICAgICAgICAgPC92LWxpc3Q+CiAgICAgICAgPC91bD4KICAgICAgPC9saT4KICAgIDwvdWw+CiAgPC9saT4KICA8bGkgY2xhc3M9InBhcmVudCI+CiAgICA8YSBocmVmPSIjIj4KICAgICAgPHYtaWNvbj5tZGktYWNjb3VudC1vdXRsaW5lPC92LWljb24+e3sgJHQoJ0FwcC5tZW51LmFjY291bnQubXNnJyl9fQogICAgPC9hPgogICAgPHVsIGNsYXNzPSJjaGlsZCI+CiAgICAgIDx2LWxpc3QgY2xhc3M9Imxhc3RNZW51Ij4KICAgICAgICA8di10b29sdGlwIHJpZ2h0PgogICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDphY3RpdmF0b3I9Insgb24gfSI+CiAgICAgICAgICAgIDx2LWxpc3QtaXRlbQogICAgICAgICAgICAgIHRvPSIvYWRkVXNlciIKICAgICAgICAgICAgICB2LW9uPSJvbiIKICAgICAgICAgICAgICB2LWlmPSckc3RvcmUuc3RhdGUuYXV0aC5yb2xlID09PSAiQWRtaW4iJwogICAgICAgICAgICA+CiAgICAgICAgICAgICAgPHYtbGlzdC1pdGVtLXRpdGxlIGNsYXNzPSJtZW51VGV4dCI+CiAgICAgICAgICAgICAgICA8di1pY29uCiAgICAgICAgICAgICAgICAgIGxlZnQKICAgICAgICAgICAgICAgICAgY29sb3I9ImJsYWNrIgogICAgICAgICAgICAgICAgPm1kaS1hY2NvdW50LW91dGxpbmU8L3YtaWNvbj57eyAkdCgnQXBwLm1lbnUuYWRkVXNlci5tc2cnKX19CiAgICAgICAgICAgICAgPC92LWxpc3QtaXRlbS10aXRsZT4KICAgICAgICAgICAgPC92LWxpc3QtaXRlbT4KICAgICAgICAgIDwvdGVtcGxhdGU+CiAgICAgICAgICA8c3Bhbj57eyAkdCgnQXBwLm1lbnUuYWRkVXNlci50b29sdGlwJyl9fTwvc3Bhbj4KICAgICAgICA8L3YtdG9vbHRpcD4KICAgICAgPC92LWxpc3Q+CiAgICAgIDx2LWxpc3QgY2xhc3M9Imxhc3RNZW51Ij4KICAgICAgICA8di10b29sdGlwIHJpZ2h0PgogICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDphY3RpdmF0b3I9Insgb24gfSI+CiAgICAgICAgICAgIDx2LWxpc3QtaXRlbQogICAgICAgICAgICAgIHRvPSIvdXNlcnNMaXN0IgogICAgICAgICAgICAgIHYtb249Im9uIgogICAgICAgICAgICAgIHYtaWY9JyRzdG9yZS5zdGF0ZS5hdXRoLnJvbGUgPT09ICJBZG1pbiInCiAgICAgICAgICAgID4KICAgICAgICAgICAgICA8di1saXN0LWl0ZW0tdGl0bGUgY2xhc3M9Im1lbnVUZXh0Ij4KICAgICAgICAgICAgICAgIDx2LWljb24KICAgICAgICAgICAgICAgICAgbGVmdAogICAgICAgICAgICAgICAgICBjb2xvcj0iYmxhY2siCiAgICAgICAgICAgICAgICA+bWRpLWFjY291bnQtb3V0bGluZTwvdi1pY29uPnt7ICR0KCdBcHAubWVudS51c2Vyc0xpc3QubXNnJyl9fQogICAgICAgICAgICAgIDwvdi1saXN0LWl0ZW0tdGl0bGU+CiAgICAgICAgICAgIDwvdi1saXN0LWl0ZW0+CiAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgICAgPHNwYW4+e3sgJHQoJ0FwcC5tZW51LnVzZXJzTGlzdC50b29sdGlwJyl9fTwvc3Bhbj4KICAgICAgICA8L3YtdG9vbHRpcD4KICAgICAgPC92LWxpc3Q+CiAgICAgIDx2LWxpc3QgY2xhc3M9Imxhc3RNZW51Ij4KICAgICAgICA8di10b29sdGlwIHJpZ2h0PgogICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDphY3RpdmF0b3I9Insgb24gfSI+CiAgICAgICAgICAgIDx2LWxpc3QtaXRlbQogICAgICAgICAgICAgIHRvPSIvcm9sZXNNYW5hZ2VtZW50IgogICAgICAgICAgICAgIHYtb249Im9uIgogICAgICAgICAgICAgIHYtaWY9JyRzdG9yZS5zdGF0ZS5hdXRoLnJvbGUgPT09ICJBZG1pbiInCiAgICAgICAgICAgID4KICAgICAgICAgICAgICA8di1saXN0LWl0ZW0tdGl0bGUgY2xhc3M9Im1lbnVUZXh0Ij4KICAgICAgICAgICAgICAgIDx2LWljb24KICAgICAgICAgICAgICAgICAgbGVmdAogICAgICAgICAgICAgICAgICBjb2xvcj0iYmxhY2siCiAgICAgICAgICAgICAgICA+bWRpLWFjY291bnQtb3V0bGluZTwvdi1pY29uPnt7ICR0KCdBcHAubWVudS5yb2xlc01hbmFnZW1lbnQubXNnJyl9fQogICAgICAgICAgICAgIDwvdi1saXN0LWl0ZW0tdGl0bGU+CiAgICAgICAgICAgIDwvdi1saXN0LWl0ZW0+CiAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgICAgPHNwYW4+e3sgJHQoJ0FwcC5tZW51LnJvbGVzTWFuYWdlbWVudC50b29sdGlwJyl9fTwvc3Bhbj4KICAgICAgICA8L3YtdG9vbHRpcD4KICAgICAgPC92LWxpc3Q+CiAgICAgIDx2LWxpc3QgY2xhc3M9Imxhc3RNZW51Ij4KICAgICAgICA8di1saXN0LWl0ZW0gdG89Ii9jaGFuZ2VQYXNzd29yZCI+CiAgICAgICAgICA8di1saXN0LWl0ZW0tdGl0bGUgY2xhc3M9Im1lbnVUZXh0Ij4KICAgICAgICAgICAgPHYtaWNvbgogICAgICAgICAgICAgIGxlZnQKICAgICAgICAgICAgICBjb2xvcj0iYmxhY2siCiAgICAgICAgICAgID5tZGktYWNjb3VudC1vdXRsaW5lPC92LWljb24+e3sgJHQoJ0FwcC5tZW51LmNoYW5nZVBhc3N3b3JkLm1zZycpfX0KICAgICAgICAgIDwvdi1saXN0LWl0ZW0tdGl0bGU+CiAgICAgICAgPC92LWxpc3QtaXRlbT4KICAgICAgPC92LWxpc3Q+CiAgICA8L3VsPgogIDwvbGk+CiAgPGxpIGNsYXNzPSJwYXJlbnQiPgogICAgPHYtbGlzdC1pdGVtCiAgICAgIHRvPSIvY29uZmlndXJlIgogICAgICB2LWlmPSchJHN0b3JlLnN0YXRlLmRlbnlBY2Nlc3MnCiAgICAgIGNsYXNzPSJuZXdDbGFzcyIKICAgID4KICAgICAgPHYtbGlzdC1pdGVtLXRpdGxlPgogICAgICAgIDx2LWljb24+bWRpLWNvZzwvdi1pY29uPiB7eyAkdCgnQXBwLm1lbnUuY29uZmlndXJlLm1zZycpIH19CiAgICAgIDwvdi1saXN0LWl0ZW0tdGl0bGU+CiAgICA8L3YtbGlzdC1pdGVtPgogIDwvbGk+CiAgPGxpIGNsYXNzPSJwYXJlbnQiPgogICAgPHYtbGlzdC1pdGVtCiAgICAgIHRvPSIvbG9nb3V0IgogICAgICB2LWlmPSchJHN0b3JlLnN0YXRlLmRlbnlBY2Nlc3MgJiYgISRzdG9yZS5zdGF0ZS5jb25maWcuZ2VuZXJhbENvbmZpZy5hdXRoRGlzYWJsZWQnCiAgICAgIGNsYXNzPSJuZXdDbGFzcyIKICAgID4KICAgICAgPHYtbGlzdC1pdGVtLXRpdGxlPgogICAgICAgIDx2LWljb24+bWRpLWxvZ291dDwvdi1pY29uPiB7eyAkdCgnQXBwLm1lbnUubG9nb3V0Lm1zZycpIH19CiAgICAgIDwvdi1saXN0LWl0ZW0tdGl0bGU+CiAgICA8L3YtbGlzdC1pdGVtPgogIDwvbGk+CjwvdWw+Cg=="},null]}